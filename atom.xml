<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.damon8.cn/"/>
  <updated>2020-07-23T07:46:52.383Z</updated>
  <id>http://www.damon8.cn/</id>
  
  <author>
    <name>Damon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s master机器文件系统故障的一次恢复过程</title>
    <link href="http://www.damon8.cn/2020/07/23/k8s-01/"/>
    <id>http://www.damon8.cn/2020/07/23/k8s-01/</id>
    <published>2020-07-23T07:23:59.000Z</published>
    <updated>2020-07-23T07:46:52.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>研发反馈他们那边一套集群有台master文件系统损坏无法开机，他们是三台openstack上的虚机，是虚拟化宿主机故障导致的虚机文件系统损坏。三台机器是master+node，指导他修复后开机，修复过程和我之前文章opensuse的一次救援步骤一样</p><p>起来后我上去看，因为做了 HA 的，所以只有这个node有问题，集群没影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# kubectl get node -o wide</span><br><span class="line">NAME             STATUS     ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">10.252.146.104   NotReady   &lt;none&gt;   30d   v1.16.9   10.252.146.104   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br><span class="line">10.252.146.105   Ready      &lt;none&gt;   30d   v1.16.9   10.252.146.105   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br><span class="line">10.252.146.106   Ready      &lt;none&gt;   30d   v1.16.9   10.252.146.106   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br></pre></td></tr></table></figure><p>启动docker试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# systemctl start docker</span><br><span class="line">Job for docker.service canceled.</span><br></pre></td></tr></table></figure><p>无法启动，查看下启动失败的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# systemctl --failed</span><br><span class="line">  UNIT               LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● containerd.service loaded failed failed containerd container runtime</span><br></pre></td></tr></table></figure><p>查看下containerd的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# journalctl -xe -u containerd</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481459735+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.service.v1.snapshots-service&quot;...&quot; type&#x3D;io.containerd.service.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481472223+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.runtime.v1.linux&quot;...&quot; type&#x3D;io.containerd.runtime.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481517630+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.runtime.v2.task&quot;...&quot; type&#x3D;io.containerd.runtime.v2</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481562176+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.monitor.v1.cgroups&quot;...&quot; type&#x3D;io.containerd.monitor.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481964349+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.service.v1.tasks-service&quot;...&quot; type&#x3D;io.containerd.service.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.481996158+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.internal.v1.restart&quot;...&quot; type&#x3D;io.containerd.internal.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482048208+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.containers&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482081110+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.content&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482096598+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.diff&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482112263+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.events&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482123307+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.healthcheck&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482133477+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.images&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482142943+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.leases&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482151644+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.namespaces&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482160741+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.internal.v1.opt&quot;...&quot; type&#x3D;io.containerd.internal.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482184201+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.snapshots&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482194643+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.tasks&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482206871+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.version&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482215454+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.introspection&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482365838+08:00&quot; level&#x3D;info msg&#x3D;serving... address&#x3D;&quot;&#x2F;run&#x2F;containerd&#x2F;containerd.sock&quot;</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: time&#x3D;&quot;2020-07-23T11:20:11.482404139+08:00&quot; level&#x3D;info msg&#x3D;&quot;containerd successfully booted in 0.003611s&quot;</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: [signal SIGSEGV: segmentation violation code&#x3D;0x1 addr&#x3D;0x8 pc&#x3D;0x5626b983c259]</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: goroutine 55 [running]:</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt.(*Bucket).Cursor(...)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;bucket.go:84</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt.(*Bucket).Get(0x0, 0x5626bb7e3f10, 0xb, 0xb, 0x0, 0x2, 0x4)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;bucket.go:260 +0x39</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.scanRoots.func6(0x7fe557c63020, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x5626b95eec72)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;gc.go:222 +0xcb</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt.(*Bucket).ForEach(0xc0003d1780, 0xc00057b640, 0xa, 0xa)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;bucket.go:388 +0x100</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.scanRoots(0x5626bacedde0, 0xc0003d1680, 0xc0002ee2a0, 0xc00031a3c0, 0xc000527a60, 0x7fe586a43fff)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;gc.go:216 +0x4df</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).getMarked.func1(0xc0002ee2a0, 0x0, 0x0)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;db.go:359 +0x165</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt.(*DB).View(0xc00000c1e0, 0xc00008b860, 0x0, 0x0)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;vendor&#x2F;go.etcd.io&#x2F;bbolt&#x2F;db.go:701 +0x92</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).getMarked(0xc0000a0a80, 0x5626bacede20, 0xc0000d6010, 0x203000, 0x203000, 0x400)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;db.go:342 +0x7e</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).GarbageCollect(0xc0000a0a80, 0x5626bacede20, 0xc0000d6010, 0x0, 0x1, 0x0, 0x0)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;db.go:257 +0xa3</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.(*gcScheduler).run(0xc0000a0b40, 0x5626bacede20, 0xc0000d6010)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:310 +0x511</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: created by github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.init.0.func1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:132 +0x462</span><br><span class="line">Jul 23 11:20:11 k8s-m1 systemd[1]: containerd.service: Main process exited, code&#x3D;exited, status&#x3D;2&#x2F;INVALIDARGUMENT</span><br><span class="line">Jul 23 11:20:11 k8s-m1 systemd[1]: containerd.service: Failed with result &#39;exit-code&#39;.</span><br></pre></td></tr></table></figure><p>这个问题从panic抛出的堆栈信息看和我之前文章docker启动panic很类似，都是 boltdb 文件出错，找下 git 信息去看看代码路径在哪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# systemctl cat containerd | grep ExecStart</span><br><span class="line">ExecStartPre&#x3D;-&#x2F;sbin&#x2F;modprobe overlay</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;containerd</span><br><span class="line"></span><br><span class="line">[root@k8s-m1 ~]# &#x2F;usr&#x2F;bin&#x2F;containerd --version</span><br><span class="line">containerd containerd.io 1.2.13 7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br></pre></td></tr></table></figure><p>按照这个blob去用github的url访问是404，只有去按照tag版本查看了，根据相关代码找到了 boltdb 的文件名是meta.db</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;blob&#x2F;v1.2.13&#x2F;metadata&#x2F;db.go#L257</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;blob&#x2F;v1.2.13&#x2F;metadata&#x2F;db.go#L79</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;blob&#x2F;v1.2.13&#x2F;services&#x2F;server&#x2F;server.go#L261-L268</span><br></pre></td></tr></table></figure><p>查找下ic.Root路径是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# &#x2F;usr&#x2F;bin&#x2F;containerd --help | grep config</span><br><span class="line">     config    information on the containerd config</span><br><span class="line">   --config value, -c value     path to the configuration file (default: &quot;&#x2F;etc&#x2F;containerd&#x2F;config.toml&quot;)</span><br><span class="line"></span><br><span class="line">[root@k8s-m1 ~]# grep root &#x2F;etc&#x2F;containerd&#x2F;config.toml</span><br><span class="line">#root &#x3D; &quot;&#x2F;var&#x2F;lib&#x2F;containerd&quot;</span><br><span class="line">[root@k8s-m1 ~]]# find &#x2F;var&#x2F;lib&#x2F;containerd -type f -name meta.db</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;containerd&#x2F;io.containerd.metadata.v1.bolt&#x2F;meta.db</span><br></pre></td></tr></table></figure><p>找到boltdb文件，改名启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]]# mv &#x2F;var&#x2F;lib&#x2F;containerd&#x2F;io.containerd.metadata.v1.bolt&#x2F;meta.db&#123;,.bak&#125;</span><br><span class="line">[root@k8s-m1 ~]# systemctl status containerd.service</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;containerd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Thu 2020-07-23 11:20:11 CST; 17min ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;containerd.io</span><br><span class="line">  Process: 9186 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;containerd (code&#x3D;exited, status&#x3D;2)</span><br><span class="line">  Process: 9182 ExecStartPre&#x3D;&#x2F;sbin&#x2F;modprobe overlay (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 9186 (code&#x3D;exited, status&#x3D;2)</span><br><span class="line"></span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).getMarked(0xc0000a0a80, 0x5626bacede20, 0xc0000d6010, 0x203000, 0x203000, 0x400)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;db.go:342 +0x7e</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata.(*DB).GarbageCollect(0xc0000a0a80, 0x5626bacede20, 0xc0000d6010, 0x0, 0x1, 0x0, 0x0)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;metadata&#x2F;db.go:257 +0xa3</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.(*gcScheduler).run(0xc0000a0b40, 0x5626bacede20, 0xc0000d6010)</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:310 +0x511</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]: created by github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler.init.0.func1</span><br><span class="line">Jul 23 11:20:11 k8s-m1 containerd[9186]:         &#x2F;go&#x2F;src&#x2F;github.com&#x2F;containerd&#x2F;containerd&#x2F;gc&#x2F;scheduler&#x2F;scheduler.go:132 +0x462</span><br><span class="line">Jul 23 11:20:11 k8s-m1 systemd[1]: containerd.service: Main process exited, code&#x3D;exited, status&#x3D;2&#x2F;INVALIDARGUMENT</span><br><span class="line">Jul 23 11:20:11 k8s-m1 systemd[1]: containerd.service: Failed with result &#39;exit-code&#39;.</span><br><span class="line">[root@k8s-m1 ~]# systemctl restart containerd.service</span><br><span class="line">[root@k8s-m1 ~]# systemctl status containerd.service</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;containerd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2020-07-23 11:25:37 CST; 1s ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;containerd.io</span><br><span class="line">  Process: 15661 ExecStartPre&#x3D;&#x2F;sbin&#x2F;modprobe overlay (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 15663 (containerd)</span><br><span class="line">    Tasks: 16</span><br><span class="line">   Memory: 28.6M</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;containerd.service</span><br><span class="line">           └─15663 &#x2F;usr&#x2F;bin&#x2F;containerd</span><br><span class="line"></span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496725460+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.images&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496734129+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.leases&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496742793+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.namespaces&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496751740+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.internal.v1.opt&quot;...&quot; type&#x3D;io.containerd.internal.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496775185+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.snapshots&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496785498+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.tasks&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496794873+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.version&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496803178+08:00&quot; level&#x3D;info msg&#x3D;&quot;loading plugin &quot;io.containerd.grpc.v1.introspection&quot;...&quot; type&#x3D;io.containerd.grpc.v1</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496944458+08:00&quot; level&#x3D;info msg&#x3D;serving... address&#x3D;&quot;&#x2F;run&#x2F;containerd&#x2F;containerd.sock&quot;</span><br><span class="line">Jul 23 11:25:37 k8s-m1 containerd[15663]: time&#x3D;&quot;2020-07-23T11:25:37.496958031+08:00&quot; level&#x3D;info msg&#x3D;&quot;containerd successfully booted in 0.003994s&quot;</span><br></pre></td></tr></table></figure><p>containerd 起来后，启动下 docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br><span class="line">           └─10-docker.conf</span><br><span class="line">   Active: inactive (dead) since Thu 2020-07-23 11:20:13 CST; 18min ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;docs.docker.com</span><br><span class="line">  Process: 9398 ExecStopPost&#x3D;&#x2F;bin&#x2F;bash -c &#x2F;sbin&#x2F;iptables -D FORWARD -s 0.0.0.0&#x2F;0 -j ACCEPT &amp;&gt; &#x2F;dev&#x2F;null || : (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 9187 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 9187 (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"></span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.956503485+08:00&quot; level&#x3D;error msg&#x3D;&quot;Stop container error: Failed to stop container 68860c8d16b9ce7e74e8efd9db00e70a57eef1b752c2e6c703073c0bce5517d3 with error: Cannot kill c&gt;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.954347116+08:00&quot; level&#x3D;error msg&#x3D;&quot;Stop container error: Failed to stop container 5ec9922beed1276989f1866c3fd911f37cc26aae4e4b27c7ce78183a9a4725cc with error: Cannot kill c&gt;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.953615411+08:00&quot; level&#x3D;info msg&#x3D;&quot;Container failed to stop after sending signal 15 to the process, force killing&quot;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.956557179+08:00&quot; level&#x3D;error msg&#x3D;&quot;Stop container error: Failed to stop container 6d0096fbcd4055f8bafb6b38f502a0186cd1dfca34219e9dd6050f512971aef5 with error: Cannot kill c&gt;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.954601191+08:00&quot; level&#x3D;info msg&#x3D;&quot;Container failed to stop after sending signal 15 to the process, force killing&quot;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.956600790+08:00&quot; level&#x3D;error msg&#x3D;&quot;Stop container error: Failed to stop container 6d1175ba6c55cb05ad89f4134ba8e9d3495c5acb5f07938dc16339b7cca013bf with error: Cannot kill c&gt;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.957188989+08:00&quot; level&#x3D;info msg&#x3D;&quot;Daemon shutdown complete&quot;</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.957212655+08:00&quot; level&#x3D;info msg&#x3D;&quot;stopping event stream following graceful shutdown&quot; error&#x3D;&quot;context canceled&quot; module&#x3D;libcontainerd namespace&#x3D;plugins.moby</span><br><span class="line">Jul 23 11:20:13 k8s-m1 dockerd[9187]: time&#x3D;&quot;2020-07-23T11:20:13.957209679+08:00&quot; level&#x3D;info msg&#x3D;&quot;stopping event stream following graceful shutdown&quot; error&#x3D;&quot;context canceled&quot; module&#x3D;libcontainerd namespace&#x3D;moby</span><br><span class="line">Jul 23 11:20:13 k8s-m1 systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">[root@k8s-m1 ~]# systemctl start docker</span><br><span class="line">[root@k8s-m1 ~]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br><span class="line">           └─10-docker.conf</span><br><span class="line">   Active: active (running) since Thu 2020-07-23 11:26:11 CST; 1s ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;docs.docker.com</span><br><span class="line">  Process: 9398 ExecStopPost&#x3D;&#x2F;bin&#x2F;bash -c &#x2F;sbin&#x2F;iptables -D FORWARD -s 0.0.0.0&#x2F;0 -j ACCEPT &amp;&gt; &#x2F;dev&#x2F;null || : (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 16156 ExecStartPost&#x3D;&#x2F;sbin&#x2F;iptables -I FORWARD -s 0.0.0.0&#x2F;0 -j ACCEPT (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 15974 (dockerd)</span><br><span class="line">    Tasks: 62</span><br><span class="line">   Memory: 89.1M</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;docker.service</span><br><span class="line">           └─15974 &#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock</span><br><span class="line"></span><br><span class="line">Jul 23 11:26:10 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:10.851106564+08:00&quot; level&#x3D;error msg&#x3D;&quot;cb4e16249cd8eac48ed734c71237195f04d63c56c55c0199b3cdf3d49461903d cleanup: failed to delete container from containerd: no such container&quot;</span><br><span class="line">Jul 23 11:26:10 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:10.860456898+08:00&quot; level&#x3D;error msg&#x3D;&quot;d9bbcab186ccb59f96c95fc886ec1b66a52aa96e45b117cf7d12e3ff9b95db9f cleanup: failed to delete container from containerd: no such container&quot;</span><br><span class="line">Jul 23 11:26:10 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:10.872405757+08:00&quot; level&#x3D;error msg&#x3D;&quot;07eb7a09bc8589abcb4d79af4b46798327bfb00624a7b9ceea457de392ad8f3d cleanup: failed to delete container from containerd: no such container&quot;</span><br><span class="line">Jul 23 11:26:10 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:10.877896618+08:00&quot; level&#x3D;error msg&#x3D;&quot;f5867657025bd7c3951cbd3e08ad97338cf69df2a97967a419e0e78eda869b73 cleanup: failed to delete container from containerd: no such container&quot;</span><br><span class="line">Jul 23 11:26:11 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:11.143661583+08:00&quot; level&#x3D;info msg&#x3D;&quot;Default bridge (docker0) is assigned with an IP address 172.17.0.0&#x2F;16. Daemon option --bip can be used to set a preferred IP address&quot;</span><br><span class="line">Jul 23 11:26:11 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:11.198200760+08:00&quot; level&#x3D;info msg&#x3D;&quot;Loading containers: done.&quot;</span><br><span class="line">Jul 23 11:26:11 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:11.219959208+08:00&quot; level&#x3D;info msg&#x3D;&quot;Docker daemon&quot; commit&#x3D;42e35e61f3 graphdriver(s)&#x3D;overlay2 version&#x3D;19.03.11</span><br><span class="line">Jul 23 11:26:11 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:11.220049865+08:00&quot; level&#x3D;info msg&#x3D;&quot;Daemon has completed initialization&quot;</span><br><span class="line">Jul 23 11:26:11 k8s-m1 dockerd[15974]: time&#x3D;&quot;2020-07-23T11:26:11.232373131+08:00&quot; level&#x3D;info msg&#x3D;&quot;API listen on &#x2F;var&#x2F;run&#x2F;docker.sock&quot;</span><br><span class="line">Jul 23 11:26:11 k8s-m1 systemd[1]: Started Docker Application Container Engine.</span><br></pre></td></tr></table></figure><p>etcd启动也失败，journal 查看下 etcd 状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# journalctl -xe -u etcd</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: Loading server configuration from &quot;&#x2F;etc&#x2F;etcd&#x2F;etcd.config.yml&quot;</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: etcd Version: 3.3.20</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: Git SHA: 9fd7e2b80</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: Go Version: go1.12.17</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: setting maximum number of CPUs to 16, total number of available CPUs is 16</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: found invalid file&#x2F;dir wal under data dir &#x2F;var&#x2F;lib&#x2F;etcd (Ignore this if you are upgrading etcd)</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: the server is already initialized as member before, starting as etcd member...</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: ignoring peer auto TLS since certs given</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: peerTLS: cert &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.crt, key &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.key, ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, trusted-ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, client-cert-auth &#x3D; fals&gt;</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: listening for peers on https:&#x2F;&#x2F;10.252.146.104:2380</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: ignoring client auto TLS since certs given</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: pprof is enabled under &#x2F;debug&#x2F;pprof</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while peer key&#x2F;cert files are presented. Ignored key&#x2F;cert files.</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while client cert auth (--client-cert-auth) is enabled. Ignored client cert auth for this url.</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: listening for client requests on 127.0.0.1:2379</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: listening for client requests on 10.252.146.104:2379</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: skipped unexpected non snapshot file 000000000000002e-000000000052f2be.snap.broken</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: recovered store from snapshot at index 5426092</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: restore compact to 3967425</span><br><span class="line">Jul 23 11:26:15 k8s-m1 etcd[18129]: cannot unmarshal event: proto: KeyValue: illegal tag 0 (wire type 0)</span><br><span class="line">Jul 23 11:26:15 k8s-m1 systemd[1]: etcd.service: Main process exited, code&#x3D;exited, status&#x3D;1&#x2F;FAILURE</span><br><span class="line">Jul 23 11:26:15 k8s-m1 systemd[1]: etcd.service: Failed with result &#39;exit-code&#39;.</span><br><span class="line">Jul 23 11:26:15 k8s-m1 systemd[1]: Failed to start Etcd Service.</span><br><span class="line">[root@k8s-m1 ~]# ll &#x2F;var&#x2F;lib&#x2F;etcd&#x2F;member&#x2F;snap&#x2F;</span><br><span class="line">total 8560</span><br><span class="line">-rw-r--r-- 1 root root   13499 Jul 20 13:36 000000000000002e-000000000052cbac.snap</span><br><span class="line">-rw-r--r-- 2 root root  128360 Jul 20 13:01 000000000000002e-000000000052f2be.snap.broken</span><br><span class="line">-rw------- 1 root root 8617984 Jul 23 11:26 db</span><br></pre></td></tr></table></figure><p>这套集群是使用我的ansible部署，求star的，自带了备份脚本，但是是三天前坏的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# ll &#x2F;opt&#x2F;etcd_bak&#x2F;</span><br><span class="line">total 41524</span><br><span class="line">-rw-r--r-- 1 root root 8618016 Jul 17 02:00 etcd-2020-07-17-02:00:01.db</span><br><span class="line">-rw-r--r-- 1 root root 8618016 Jul 18 02:00 etcd-2020-07-18-02:00:01.db</span><br><span class="line">-rw-r--r-- 1 root root 8323104 Jul 19 02:00 etcd-2020-07-19-02:00:01.db</span><br><span class="line">-rw-r--r-- 1 root root 8618016 Jul 20 02:00 etcd-2020-07-20-02:00:01.db</span><br></pre></td></tr></table></figure><p>有恢复剧本，但是前提是etcd的v2和v3不能共存，否则无法恢复备份，我们线上都是把v2的存储关闭了的。主要是这个tasks里的26到42行步骤，这里复制了其他机器master上的 07/23 号的etcd备份文件，然后改了下host跑了下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# cd Kubernetes-ansible</span><br><span class="line">[root@k8s-m1 Kubernetes-ansible]# ansible-playbook restoreETCD.yml -e &#39;db&#x3D;&#x2F;opt&#x2F;etcd_bak&#x2F;etcd-bak.db&#39;</span><br><span class="line"></span><br><span class="line">PLAY [10.252.146.104] **********************************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] *********************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : fail] ******************************************************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 检测备份文件存在否] *************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : fail] ******************************************************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : set_fact] **************************************************************************************************************************************************************************************************************</span><br><span class="line">skipping: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : set_fact] **************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 停止etcd] ****************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 删除etcd数据目录] ************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104] &#x3D;&gt; (item&#x3D;&#x2F;var&#x2F;lib&#x2F;etcd)</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 分发备份文件] ****************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 恢复备份] ******************************************************************************************************************************************************************************************************************</span><br><span class="line">changed: [10.252.146.104]</span><br><span class="line"></span><br><span class="line">TASK [restoreETCD : 启动etcd] ****************************************************************************************************************************************************************************************************************</span><br><span class="line">fatal: [10.252.146.104]: FAILED! &#x3D;&gt; &#123;&quot;changed&quot;: false, &quot;msg&quot;: &quot;Unable to start service etcd: Job for etcd.service failed because the control process exited with error code.\nSee \&quot;systemctl status etcd.service\&quot; and \&quot;journalctl -xe\&quot; for details.\n&quot;&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************************************************************************************************************</span><br><span class="line">10.252.146.104             : ok&#x3D;7    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;1    skipped&#x3D;3    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>查看下日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# journalctl -xe -u etcd</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: Loading server configuration from &quot;&#x2F;etc&#x2F;etcd&#x2F;etcd.config.yml&quot;</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: etcd Version: 3.3.20</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: Git SHA: 9fd7e2b80</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: Go Version: go1.12.17</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: setting maximum number of CPUs to 16, total number of available CPUs is 16</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: the server is already initialized as member before, starting as etcd member...</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: ignoring peer auto TLS since certs given</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: peerTLS: cert &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.crt, key &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.key, ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, trusted-ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, client-cert-auth &#x3D; fals&gt;</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: listening for peers on https:&#x2F;&#x2F;10.252.146.104:2380</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: ignoring client auto TLS since certs given</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: pprof is enabled under &#x2F;debug&#x2F;pprof</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while peer key&#x2F;cert files are presented. Ignored key&#x2F;cert files.</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while client cert auth (--client-cert-auth) is enabled. Ignored client cert auth for this url.</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: listening for client requests on 127.0.0.1:2379</span><br><span class="line">Jul 23 11:27:46 k8s-m1 etcd[58954]: listening for client requests on 10.252.146.104:2379</span><br><span class="line">Jul 23 11:27:47 k8s-m1 etcd[58954]: member ac2dcf6aed12e8f1 has already been bootstrapped</span><br><span class="line">Jul 23 11:27:47 k8s-m1 systemd[1]: etcd.service: Main process exited, code&#x3D;exited, status&#x3D;1&#x2F;FAILURE</span><br><span class="line">Jul 23 11:27:47 k8s-m1 systemd[1]: etcd.service: Failed with result &#39;exit-code&#39;.</span><br><span class="line">Jul 23 11:27:47 k8s-m1 systemd[1]: Failed to start Etcd Service.</span><br></pre></td></tr></table></figure><p>这个member xxxx has already been bootstrapped解决办法就是把配置文件的下面修改，后面启动完记得改回来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initial-cluster-state: &#39;new&#39; 改成 initial-cluster-state: &#39;existing&#39;</span><br></pre></td></tr></table></figure><p>然后成功启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# systemctl start etcd</span><br><span class="line">[root@k8s-m1 Kubernetes-ansible]# journalctl -xe -u etcd</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: Loading server configuration from &quot;&#x2F;etc&#x2F;etcd&#x2F;etcd.config.yml&quot;</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: etcd Version: 3.3.20</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: Git SHA: 9fd7e2b80</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: Go Version: go1.12.17</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: Go OS&#x2F;Arch: linux&#x2F;amd64</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: setting maximum number of CPUs to 16, total number of available CPUs is 16</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: found invalid file&#x2F;dir wal under data dir &#x2F;var&#x2F;lib&#x2F;etcd (Ignore this if you are upgrading etcd)</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: the server is already initialized as member before, starting as etcd member...</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: ignoring peer auto TLS since certs given</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: peerTLS: cert &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.crt, key &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;peer.key, ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, trusted-ca &#x3D; &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt, client-cert-auth &#x3D; fals&gt;</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: listening for peers on https:&#x2F;&#x2F;10.252.146.104:2380</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: ignoring client auto TLS since certs given</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: pprof is enabled under &#x2F;debug&#x2F;pprof</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while peer key&#x2F;cert files are presented. Ignored key&#x2F;cert files.</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: The scheme of client url http:&#x2F;&#x2F;127.0.0.1:2379 is HTTP while client cert auth (--client-cert-auth) is enabled. Ignored client cert auth for this url.</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: listening for client requests on 127.0.0.1:2379</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: listening for client requests on 10.252.146.104:2379</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: recovered store from snapshot at index 5952463</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: restore compact to 4369703</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: name &#x3D; etcd-001</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: data dir &#x3D; &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: member dir &#x3D; &#x2F;var&#x2F;lib&#x2F;etcd&#x2F;member</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: dedicated WAL dir &#x3D; &#x2F;var&#x2F;lib&#x2F;etcd&#x2F;wal</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: heartbeat &#x3D; 100ms</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: election &#x3D; 1000ms</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: snapshot count &#x3D; 5000</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: advertise client URLs &#x3D; https:&#x2F;&#x2F;10.252.146.104:2379</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: restarting member ac2dcf6aed12e8f1 in cluster 367e2aebc6430cbe at commit index 5952491</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: ac2dcf6aed12e8f1 became follower at term 47</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: newRaft ac2dcf6aed12e8f1 [peers: [1e713be314744d53,8b1621b475555fd9,ac2dcf6aed12e8f1], term: 47, commit: 5952491, applied: 5952463, lastindex: 5952491, lastterm: 47]</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: enabled capabilities for version 3.3</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: added member 1e713be314744d53 [https:&#x2F;&#x2F;10.252.146.105:2380] to cluster 367e2aebc6430cbe from store</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: added member 8b1621b475555fd9 [https:&#x2F;&#x2F;10.252.146.106:2380] to cluster 367e2aebc6430cbe from store</span><br><span class="line">Jul 23 11:27:55 k8s-m1 etcd[59889]: added member ac2dcf6aed12e8f1 [https:&#x2F;&#x2F;10.252.146.104:2380] to cluster 367e2aebc6430cbe from store</span><br></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# etcd-ha</span><br><span class="line">+-----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|          ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+-----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| https:&#x2F;&#x2F;10.252.146.104:2379 | ac2dcf6aed12e8f1 |  3.3.20 |  8.3 MB |     false |        47 |    5953557 |</span><br><span class="line">| https:&#x2F;&#x2F;10.252.146.105:2379 | 1e713be314744d53 |  3.3.20 |  8.6 MB |     false |        47 |    5953557 |</span><br><span class="line">| https:&#x2F;&#x2F;10.252.146.106:2379 | 8b1621b475555fd9 |  3.3.20 |  8.3 MB |      true |        47 |    5953557 |</span><br><span class="line">+-----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><p>然后给kube-apiserver三个组件和kubelet起来后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# kubectl get node -o wide</span><br><span class="line">NAME             STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME</span><br><span class="line">10.252.146.104   Ready    &lt;none&gt;   30d   v1.16.9   10.252.146.104   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br><span class="line">10.252.146.105   Ready    &lt;none&gt;   30d   v1.16.9   10.252.146.105   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br><span class="line">10.252.146.106   Ready    &lt;none&gt;   30d   v1.16.9   10.252.146.106   &lt;none&gt;        CentOS Linux 8 (Core)   4.18.0-193.6.3.el8_2.x86_64   docker:&#x2F;&#x2F;19.3.11</span><br></pre></td></tr></table></figure><p>pod也在慢慢自愈了</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p><br><br><code style="font-size: 20px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: red">特别声明 <br>原文作者：Zhangguanzhang <br>本文原链：http://zhangguanzhang.github.io/2020/07/23/fs-error-fix-k8s-master/ <br>本文转载如有侵权，请联系我，谢谢 <br></code>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Kubernetes之实战服务注册与发现</title>
    <link href="http://www.damon8.cn/2020/07/23/spring-cloud-k8s-discovery/"/>
    <id>http://www.damon8.cn/2020/07/23/spring-cloud-k8s-discovery/</id>
    <published>2020-07-23T01:38:22.000Z</published>
    <updated>2020-07-23T01:41:37.403Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好久没写文章了，本文主讲利用 k8s 来实现服务的注册与发现，甚至负载均衡，简称 LB，完美无坑版！</p><p>环境：</p><pre><code>ubuntu16.04docker18.04k8s1.13.x +maven3.5.3java1.8 +springboot 2.1.1spring-cloud-kubernetes：1.0.1.RELEASE</code></pre><p>Relax</p><ol><li>前提</li></ol><p>Ubuntu下安装docker18.04 or 其它较高版本，k8s1.13.x及以上，jvm环境等。</p><ol start="2"><li>创建项目</li></ol><p>我们都知道，涉及到微服务，那必体现六个字，”高内聚，低耦合”，所以针对不同业务或应用场景，服务模块化很重要，这个不再赘述了。咱们先来创建服务提供方，同样，利用eclipse或IDEA创建一个项目，此处略了。</p><p>创建好项目之后，首先引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-kubernetes-config&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>其他数据库，中间件等，可根据项目自行添加。</p><p>同样，我们需要配置初始化bean，这就涉及到配置文件bootstrap.yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># we enable some of the management endpoints to make it possible to restart the application</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line"></span><br><span class="line">  endpoint:</span><br><span class="line"></span><br><span class="line">    restart:</span><br><span class="line"></span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">    health:</span><br><span class="line"></span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">    info:</span><br><span class="line"></span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line"></span><br><span class="line">    name: edge-cas</span><br><span class="line"></span><br><span class="line">  cloud:</span><br><span class="line"></span><br><span class="line">    kubernetes:</span><br><span class="line"></span><br><span class="line">      reload:</span><br><span class="line"></span><br><span class="line">        #自动更新配置的开关设置为打开</span><br><span class="line"></span><br><span class="line">        enabled: true</span><br><span class="line"></span><br><span class="line">        #更新配置信息的模式：polling是主动拉取，event是事件通知</span><br><span class="line"></span><br><span class="line">        mode: event</span><br><span class="line"></span><br><span class="line">        #主动拉取的间隔时间是500毫秒</span><br><span class="line"></span><br><span class="line">        #period: 500</span><br><span class="line"></span><br><span class="line">      config:</span><br><span class="line"></span><br><span class="line">        sources:</span><br><span class="line"></span><br><span class="line">        - name: $&#123;spring.application.name&#125;</span><br><span class="line"></span><br><span class="line">          namespace: default</span><br><span class="line"></span><br><span class="line">      discovery:</span><br><span class="line"></span><br><span class="line">        all-namespaces: true</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line"></span><br><span class="line">    encoding:</span><br><span class="line"></span><br><span class="line">      charset: UTF-8</span><br><span class="line"></span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">      force: true</span><br><span class="line"></span><br><span class="line">  mvc:</span><br><span class="line"></span><br><span class="line">    throw-exception-if-no-handler-found: true</span><br><span class="line"></span><br><span class="line">  main:</span><br><span class="line"></span><br><span class="line">    allow-bean-definition-overriding: true # 当遇到同样名称时，是否允许覆盖注册</span><br></pre></td></tr></table></figure><p>接下来就是application.yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line"></span><br><span class="line">  port: 1000</span><br><span class="line"></span><br><span class="line">  undertow:</span><br><span class="line"></span><br><span class="line">    accesslog:</span><br><span class="line"></span><br><span class="line">      enabled: false</span><br><span class="line"></span><br><span class="line">      pattern: combined</span><br><span class="line"></span><br><span class="line">  servlet:</span><br><span class="line"></span><br><span class="line">    session:</span><br><span class="line"></span><br><span class="line">      timeout: PT120M</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line"></span><br><span class="line">  path: &#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">client:</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line"></span><br><span class="line">    request:</span><br><span class="line"></span><br><span class="line">      connectTimeout: 8000</span><br><span class="line"></span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line"></span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line"></span><br><span class="line">  typeAliasesPackage: com.gemantic.*.model</span><br></pre></td></tr></table></figure><p>到这，基本的配置即完成，同样，我们也引入了k8s的configmap功能，可以新建configmap的yaml文件来创建其configmap。</p><p>然后最重要的一点，就是我们需要创建service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line"></span><br><span class="line">kind: Service</span><br><span class="line"></span><br><span class="line">metadata:</span><br><span class="line"></span><br><span class="line">  name: demo-cas-service</span><br><span class="line"></span><br><span class="line">  namespace: default</span><br><span class="line"></span><br><span class="line">spec:</span><br><span class="line"></span><br><span class="line">  ports:</span><br><span class="line"></span><br><span class="line">  - name: cas01</span><br><span class="line"></span><br><span class="line">    port: 1000</span><br><span class="line"></span><br><span class="line">    targetPort: cas01</span><br><span class="line"></span><br><span class="line">  selector:</span><br><span class="line"></span><br><span class="line">    app: demo-cas</span><br></pre></td></tr></table></figure><p>这一点很关键，即实现了服务的注册。</p><p>然后服务提供者的项目架子搭建好了，自己可以添加一些内容，比如我把它作为微服务架构的统一鉴权中心CAS。</p><p>接下来创建服务消费者的项目，同样引入依赖，但这一次不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-kubernetes-config&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;io.kubernetes&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;client-java&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;$&#123;kubernetes-client-version&#125;&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line"></span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.squareup.okio&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;okio&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;exclusion&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;exclusions&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- springcloud-k8s-discovery --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-kubernetes-core&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-kubernetes-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-kubernetes-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>以上是服务消费者的必须依赖，其他的可根据项目自行添加，比如：在线文档swagger，数据库，json解析，权限管理shiro等。</p><p>同样，我们也需要配置初始化bean，这就涉及到配置文件bootstrap.yaml：如上</p><p>接下来需要配置服务消费者的消费逻辑以及实现负载均衡的策略(application.yaml)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line"></span><br><span class="line">  port: 1002</span><br><span class="line"></span><br><span class="line">  undertow:</span><br><span class="line"></span><br><span class="line">    accesslog:</span><br><span class="line"></span><br><span class="line">      enabled: false</span><br><span class="line"></span><br><span class="line">      pattern: combined</span><br><span class="line"></span><br><span class="line">  servlet:</span><br><span class="line"></span><br><span class="line">    session:</span><br><span class="line"></span><br><span class="line">      timeout: PT120M</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line"></span><br><span class="line">  path: &#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">client:</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line"></span><br><span class="line">    request:</span><br><span class="line"></span><br><span class="line">      connectTimeout: 8000</span><br><span class="line"></span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line"></span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line"></span><br><span class="line">  typeAliasesPackage: com.gemantic.*.model</span><br></pre></td></tr></table></figure><p>#这是针对所有的提供者服务的消费策略：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">backend:</span><br><span class="line"></span><br><span class="line">  ribbon:</span><br><span class="line"></span><br><span class="line">    eureka:</span><br><span class="line"></span><br><span class="line">      enabled: false</span><br><span class="line"></span><br><span class="line">    client:</span><br><span class="line"></span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">    ServerListRefreshInterval: 5000</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">ribbon:</span><br><span class="line"></span><br><span class="line">  ConnectTimeout: 3000</span><br><span class="line"></span><br><span class="line">  # 设置全局默认的ribbon的读超时</span><br><span class="line"></span><br><span class="line">  ReadTimeout: 1000</span><br><span class="line"></span><br><span class="line">  eager-load:</span><br><span class="line"></span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">    clients: demo-cas-service,cloud-admin-service</span><br><span class="line"></span><br><span class="line">  MaxAutoRetries: 1 #对第一次请求的服务的重试次数</span><br><span class="line"></span><br><span class="line">  MaxAutoRetriesNextServer: 1 #要重试的下一个服务的最大数量（不包括第一个服务）</span><br><span class="line"></span><br><span class="line">  #listOfServers: localhost:5556,localhost:5557</span><br><span class="line"></span><br><span class="line">  #ServerListRefreshInterval: 2000</span><br><span class="line"></span><br><span class="line">  OkToRetryOnAllOperations: true</span><br><span class="line"></span><br><span class="line"> NFLoadBalancerRuleClassName:com.netflix.loadbalancer.RoundRobinRule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#这个是针对某个指定服务来进行配置负载均衡的策略</span><br><span class="line">#demo-cas-service:</span><br><span class="line"></span><br><span class="line">#  ribbon:</span><br><span class="line"></span><br><span class="line">#    ConnectTimeout: 3000</span><br><span class="line"></span><br><span class="line">#    ReadTimeout: 60000</span><br><span class="line"></span><br><span class="line">#    MaxAutoRetries: 1 #对第一次请求的服务的重试次数</span><br><span class="line"></span><br><span class="line">#    MaxAutoRetriesNextServer: 1 #要重试的下一个服务的最大数量（不包括第一个服务）</span><br><span class="line"></span><br><span class="line">#    listOfServers: localhost:5556,localhost:5557</span><br><span class="line"></span><br><span class="line">#    ServerListRefreshInterval: 2000</span><br><span class="line"></span><br><span class="line">#    OkToRetryOnAllOperations: true</span><br><span class="line"></span><br><span class="line">#NFLoadBalancerRuleClassName:com.netflix.loadbalancer.RoundRobinRule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix.command.BackendCall.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line"></span><br><span class="line">hystrix.threadpool.BackendCallThread.coreSize: 5</span><br></pre></td></tr></table></figure><p>这样，服务提供者与服务消费者就都新建成功了，接下来就需要丰满自己的业务应用逻辑了，同样，消费者也可以创建configmap来配置管理自己的配置。</p><p>接下来就是亲测：</p><p>这里，消费者调用提供者，提供者是个cas服务，则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">MultiValueMap&lt;String, String&gt; map &#x3D; new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.add(&quot;username&quot;, username);</span><br><span class="line"></span><br><span class="line">map.add(&quot;password&quot;, password);</span><br><span class="line"></span><br><span class="line">logger.info(&quot;CAS URL: &#123;&#125;&quot;, envConfig.getCas_url());</span><br><span class="line"></span><br><span class="line">String respBody &#x3D; HttpRequestUtil.doPostForm(restTemplate, envConfig.getCas_url(), map);</span><br><span class="line"></span><br><span class="line">if (StringUtils.isNotBlank(respBody)) &#123;</span><br><span class="line"></span><br><span class="line">JSONObject pobj &#x3D; JSON.parseObject(respBody);</span><br><span class="line"></span><br><span class="line">Object object &#x3D; pobj.get(&quot;message&quot;);</span><br><span class="line"></span><br><span class="line">Integer code &#x3D; JSON.parseObject(object.toString()).getInteger(&quot;code&quot;);</span><br><span class="line"></span><br><span class="line">if (code &#x3D;&#x3D; LoginEnum.LOGIN_SUCCESS.getSeq()) &#123;</span><br><span class="line"></span><br><span class="line">Object data &#x3D; pobj.get(&quot;data&quot;);</span><br><span class="line"></span><br><span class="line">SysUserDto sysUser &#x3D; JSON.parseObject(data.toString(), SysUserDto.class);</span><br><span class="line"></span><br><span class="line">return sysUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的环境变量即使configmap提供，值：cas_url: <a href="http://demo-cas-service/login，这样我们就完成了调用的逻辑。" target="_blank" rel="noopener">http://demo-cas-service/login，这样我们就完成了调用的逻辑。</a></p><p>亲测有效：</p><p>接下来我们如果需要测试LB，需要添加一条脚本：</p><p>增加pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas&#x3D;2 deployment demo-cas-deployment</span><br></pre></td></tr></table></figure><p>这样，我们既看到两个demo-cas-deployment的pod：</p><p>同样测试，根据策略轮询调用的方式，这次会请求到该pod上，这里不贴截图了，大家可以试试。</p><p>以上，即是分享了k8s带来的第二大优点：</p><p>通过service的方式提供了服务的注册与发现，而且单机的k8s本身也不重，所以操作起来也非常之简单。避免了springboot原生提供的eureka、阿里的nacos、zk来作分布式的服务注册与发现要简单的多。减轻系统的繁重，以及避免了系统的冗余。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>k8s部署手册</title>
    <link href="http://www.damon8.cn/2020/07/23/k8s/"/>
    <id>http://www.damon8.cn/2020/07/23/k8s/</id>
    <published>2020-07-23T01:06:27.000Z</published>
    <updated>2020-07-23T01:08:09.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、-K8S-的由来"><a href="#1、-K8S-的由来" class="headerlink" title="1、 K8S 的由来"></a>1、 K8S 的由来</h2><h4 id="K8S-是-kubernetes-的英文缩写，是用-8-代替-8-个字符-“ubernete”-而成的缩写。"><a href="#K8S-是-kubernetes-的英文缩写，是用-8-代替-8-个字符-“ubernete”-而成的缩写。" class="headerlink" title="K8S 是 kubernetes 的英文缩写，是用 8 代替 8 个字符 “ubernete” 而成的缩写。"></a>K8S 是 kubernetes 的英文缩写，是用 8 代替 8 个字符 “ubernete” 而成的缩写。</h4><br><br><h2 id="2、-K8S-单机版实战"><a href="#2、-K8S-单机版实战" class="headerlink" title="2、 K8S 单机版实战"></a>2、 K8S 单机版实战</h2><h5 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h5><ul><li><p>ubuntu 16.04</p></li><li><p>gpu 驱动 418.56</p></li><li><p>docker 18.06</p></li><li><p>k8s 1.13.5</p></li></ul><h3 id="一、设置环境"><a href="#一、设置环境" class="headerlink" title="一、设置环境"></a>一、设置环境</h3><p>首先备份一下源配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.cp</span><br></pre></td></tr></table></figure><p>编辑，替换为阿里源:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"></span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu xenial main restricted</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted multiverse universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted multiverse universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;xenial-backports main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted multiverse universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security multiverse</span><br></pre></td></tr></table></figure><p>更新源:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>自动修复安装出现 broken 的 package:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt --fix-broken install</span><br></pre></td></tr></table></figure><p>升级，对于 gpu 机器可不执行，否则可能升级 gpu 驱动导致问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><p>关闭防火墙:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw disable</span><br></pre></td></tr></table></figure><p>安装 selinux:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install selinux-utils</span><br></pre></td></tr></table></figure><p>selinux 防火墙配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">vim&#x2F;etc&#x2F;selinux&#x2F;conifg</span><br><span class="line"></span><br><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure><p>设置网络:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">​</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>查看 ipv4 与 v6 配置是否生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>配置 iptables:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;rc.local</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><p>永久关闭 swap 分区:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure><h3 id="二、安装-docker"><a href="#二、安装-docker" class="headerlink" title="二、安装 docker"></a>二、安装 docker</h3><p>执行下面的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">​</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | apt-key add -</span><br><span class="line">​</span><br><span class="line">add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot; apt-get update</span><br><span class="line">​</span><br><span class="line">apt-get purge docker-ce docker docker-engine docker.io  &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br><span class="line"></span><br><span class="line">apt-get autoremove docker-ce docker docker-engine docker.io</span><br><span class="line">​</span><br><span class="line">apt-get install -y docker-ce&#x3D;18.06.3~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure><p>启动 docker 并设置开机自重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p>Docker 配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line"> &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line"> &quot;log-opts&quot;: &#123;</span><br><span class="line">   &quot;max-size&quot;: &quot;100m&quot;,</span><br><span class="line">   &quot;max-file&quot;: &quot;10&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;insecure-registries&quot;: [&quot;http:&#x2F;&#x2F;k8s.gcr.io&quot;],</span><br><span class="line"> &quot;data-root&quot;: &quot;&quot;,</span><br><span class="line"> &quot;default-runtime&quot;: &quot;nvidia&quot;,</span><br><span class="line"> &quot;runtimes&quot;: &#123;</span><br><span class="line">     &quot;nvidia&quot;: &#123;</span><br><span class="line">         &quot;path&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;nvidia-container-runtime&quot;,</span><br><span class="line">         &quot;runtimeArgs&quot;: []</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是含 GPU 的配置，不含 GPU 的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[</span><br><span class="line">&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;</span><br><span class="line">],</span><br><span class="line">&quot;storage-driver&quot;:&quot;overlay2&quot;,</span><br><span class="line">&quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class="line">&quot;log-opts&quot;:&#123;</span><br><span class="line">&quot;max-size&quot;:&quot;100m&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;exec-opts&quot;:[</span><br><span class="line">&quot;native.cgroupdriver&#x3D;systemd&quot;</span><br><span class="line">],</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;http:&#x2F;&#x2F;k8s.gcr.io&quot;],</span><br><span class="line">&quot;live-restore&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务并设置开机自动重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; docker info</span><br></pre></td></tr></table></figure><h3 id="三、安装-k8s"><a href="#三、安装-k8s" class="headerlink" title="三、安装 k8s"></a>三、安装 k8s</h3><p>拉取镜像前的设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">​</span><br><span class="line">curl -s https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add -</span><br><span class="line">​</span><br><span class="line">tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt kubernetes-xenial main</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get purge kubelet&#x3D;1.13.5-00 kubeadm&#x3D;1.13.5-00 kubectl&#x3D;1.13.5-00</span><br><span class="line">apt-get autoremove kubelet&#x3D;1.13.5-00 kubeadm&#x3D;1.13.5-00 kubectl&#x3D;1.13.5-00</span><br><span class="line">apt-get install -y kubelet&#x3D;1.13.5-00 kubeadm&#x3D;1.13.5-00 kubectl&#x3D;1.13.5-00</span><br><span class="line">apt-mark hold kubelet&#x3D;1.13.5-00 kubeadm&#x3D;1.13.5-00 kubectl&#x3D;1.13.5-00</span><br></pre></td></tr></table></figure><p>启动服务并设置开机自动重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable kubelet &amp;&amp; sudo systemctl start kubelet</span><br></pre></td></tr></table></figure><p>安装 k8s 相关镜像，由于 gcr.io 网络访问不了，从 registry.cn-hangzhou.aliyuncs.com 镜像地址下载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-apiserver:v1.13.5</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-controller-manager:v1.13.5</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-scheduler:v1.13.5</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-proxy:v1.13.5</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;pause:3.1</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;etcd:3.2.24</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;coredns:1.2.6</span><br></pre></td></tr></table></figure><p>打标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-apiserver:v1.13.5 k8s.gcr.io&#x2F;kube-apiserver:v1.13.5</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-controller-manager:v1.13.5 k8s.gcr.io&#x2F;kube-controller-manager:v1.13.5</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-scheduler:v1.13.5 k8s.gcr.io&#x2F;kube-scheduler:v1.13.5</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;gg-gcr-io&#x2F;kube-proxy:v1.13.5 k8s.gcr.io&#x2F;kube-proxy:v1.13.5</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;pause:3.1 k8s.gcr.io&#x2F;pause:3.1</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;etcd:3.2.24 k8s.gcr.io&#x2F;etcd:3.2.24</span><br><span class="line"></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;kuberimages&#x2F;coredns:1.2.6 k8s.gcr.io&#x2F;coredns:1.2.6</span><br></pre></td></tr></table></figure><h3 id="四、kubeadm-初始化"><a href="#四、kubeadm-初始化" class="headerlink" title="四、kubeadm 初始化"></a>四、kubeadm 初始化</h3><p>利用 kubeadm 初始化 k8s，其中主机 IP 根据自己的实际情况输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version&#x3D;v1.13.5 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --service-cidr&#x3D;10.16.0.0&#x2F;16 --apiserver-advertise-address&#x3D;$&#123;masterIp&#125; | tee kubeadm-init.log</span><br></pre></td></tr></table></figure><p>此时，如果未知主机 IP，也可利用 yaml 文件动态初始化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">10.10.5.100 k8s.api.server</span><br><span class="line"></span><br><span class="line">vi kube-init.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.13.5</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - &quot;k8s.api.server&quot;</span><br><span class="line">controlPlaneEndpoint: &quot;k8s.api.server:6443&quot;</span><br><span class="line">networking:</span><br><span class="line">  serviceSubnet: &quot;10.1.0.0&#x2F;16&quot;</span><br><span class="line">  podSubnet: &quot;10.244.0.0&#x2F;16&quot;</span><br></pre></td></tr></table></figure><p>HA 版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.13.5</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - &quot;api.k8s.com&quot;</span><br><span class="line">controlPlaneEndpoint: &quot;api.k8s.com:6443&quot;</span><br><span class="line">etcd:</span><br><span class="line">    external:</span><br><span class="line">        endpoints:</span><br><span class="line">        - https:&#x2F;&#x2F;ETCD_0_IP:2379</span><br><span class="line">        - https:&#x2F;&#x2F;ETCD_1_IP:2379</span><br><span class="line">        - https:&#x2F;&#x2F;ETCD_2_IP:2379</span><br><span class="line">networking:</span><br><span class="line">  serviceSubnet: 10.1.0.0&#x2F;16</span><br><span class="line">  podSubnet: 10.244.0.0&#x2F;16</span><br></pre></td></tr></table></figure><p>注意: apiVersion 中用 kubeadm，因为需要用 kubeadm 来初始化，最后执行下面来初始化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config&#x3D;kube-init.yaml</span><br></pre></td></tr></table></figure><p>出现问题，解决后，reset 后再执行，如果需要更多，执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm --help</span><br></pre></td></tr></table></figure><h3 id="五、部署出现问题"><a href="#五、部署出现问题" class="headerlink" title="五、部署出现问题"></a>五、部署出现问题</h3><p>先删除 node 节点(集群版)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">​</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure><p>清空 init 配置在需要删除的节点上执行（注意，当执行 init 或者 join 后出现任何错误，都可以使用此命令返回）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h3 id="六、查问题"><a href="#六、查问题" class="headerlink" title="六、查问题"></a>六、查问题</h3><p>初始化后出现问题，可以通过以下命令先查看其容器状态以及网络情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a | grep kube | grep -v pause</span><br><span class="line">​</span><br><span class="line">sudo docker logs CONTAINERID</span><br><span class="line">​</span><br><span class="line">sudo docker images &amp;&amp; systemctl status -l kubelet</span><br><span class="line">​</span><br><span class="line">netstat -nlpt</span><br><span class="line">​</span><br><span class="line">kubectl describe ep kubernetes</span><br><span class="line"></span><br><span class="line">kubectl describe svc kubernetes</span><br><span class="line">​</span><br><span class="line">kubectl get svc kubernetes</span><br><span class="line">​</span><br><span class="line">kubectl get ep</span><br><span class="line">​</span><br><span class="line">netstat -nlpt | grep apiser</span><br><span class="line"></span><br><span class="line">vi &#x2F;var&#x2F;log&#x2F;syslog</span><br></pre></td></tr></table></figure><h3 id="七、给当前用户配置-k8s-apiserver-访问公钥"><a href="#七、给当前用户配置-k8s-apiserver-访问公钥" class="headerlink" title="七、给当前用户配置 k8s apiserver 访问公钥"></a>七、给当前用户配置 k8s apiserver 访问公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p $HOME&#x2F;.kube</span><br><span class="line">​</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">​</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h3 id="八、网络插件"><a href="#八、网络插件" class="headerlink" title="八、网络插件"></a>八、网络插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;rbac-kdd.yaml</span><br><span class="line">​</span><br><span class="line">wget https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.3&#x2F;getting-started&#x2F;kubernetes&#x2F;installation&#x2F;hosted&#x2F;kubernetes-datastore&#x2F;calico-networking&#x2F;1.7&#x2F;calico.yaml</span><br><span class="line"></span><br><span class="line">vi calico.yaml</span><br><span class="line"></span><br><span class="line">- name: CALICO_IPV4POOL_IPIP</span><br><span class="line"> value:&quot;off&quot;</span><br><span class="line">- name: CALICO_IPV4POOL_CIDR</span><br><span class="line"> value: &quot;10.244.0.0&#x2F;16</span><br><span class="line">​</span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><p>单机下允许 master 节点部署 pod 命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io&#x2F;master-</span><br></pre></td></tr></table></figure><p>禁止 master 部署 pod:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes k8s node-role.kubernetes.io&#x2F;master&#x3D;true:NoSchedule</span><br></pre></td></tr></table></figure><p>以上单机版部署结束，如果你的项目中，交付的是软硬件结合的一体机，那么到此就结束了。记得<code>单机下要允许 master 节点部署</code>哟！</p><h5 id="接下来，集群版本上线咯！"><a href="#接下来，集群版本上线咯！" class="headerlink" title="接下来，集群版本上线咯！"></a>接下来，集群版本上线咯！</h5><p>以上面部署的机器为例，作为 master 节点，继续执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scp &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $nodeUser@$nodeIp:&#x2F;home&#x2F;$nodeUser</span><br><span class="line">​</span><br><span class="line">scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;* $nodeUser@$nodeIp:&#x2F;home&#x2F;$nodeUser&#x2F;etcd</span><br><span class="line">​</span><br><span class="line">kubeadm token generate</span><br><span class="line">​</span><br><span class="line">kubeadm token create $token_name --print-join-command --ttl&#x3D;0</span><br><span class="line">​</span><br><span class="line">kubeadm join $masterIP:6443 --token  $token_name --discovery-token-ca-cert-hash $hash</span><br></pre></td></tr></table></figure><p>Node 机器执行时，如果需要 cuda ，可以参考以下资料:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.nvidia.com&#x2F;cuda&#x2F;cuda-installation-guide-linux&#x2F;index.html#ubuntu-installation</span><br><span class="line">​https:&#x2F;&#x2F;blog.csdn.net&#x2F;u012235003&#x2F;article&#x2F;details&#x2F;54575758</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_39670011&#x2F;article&#x2F;details&#x2F;90404111</span><br></pre></td></tr></table></figure><p>正式执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist-nouveau.conf</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset&#x3D;0</span><br><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启 ubuntu 查看是否禁用成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br><span class="line"></span><br><span class="line">apt-get remove --purge nvidia*</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;developer.nvidia.com&#x2F;cuda-downloads</span><br><span class="line">​</span><br><span class="line">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure><p>安装 cuda:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​accept</span><br><span class="line">select &quot;Install&quot; &#x2F; Enter</span><br><span class="line">select &quot;Yes&quot;</span><br><span class="line">sh cuda_10.1.168_418.67_linux.run</span><br><span class="line">​</span><br><span class="line">echo &#39;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;bin:$PATH&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">echo &#39;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;NsightCompute-2019.3:$PATH&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">echo &#39;export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;lib64:$LD_LIBRARY_PATH&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>重启机器，检查 cuda 是否安装成功。</p><p>查看是否有“nvidia*”的设备:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;dev &amp;&amp; ls -al</span><br></pre></td></tr></table></figure><p>如果没有，创建一个 nv.sh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vi nv.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash &#x2F;sbin&#x2F;modprobe nvidia</span><br><span class="line">if [ &quot;$?&quot; -eq 0 ];</span><br><span class="line">then</span><br><span class="line">NVDEVS&#x3D;&#96;lspci |</span><br><span class="line"> grep -i NVIDIA</span><br><span class="line">&#96;</span><br><span class="line">N3D&#x3D;&#96;</span><br><span class="line">echo</span><br><span class="line">&quot;$NVDEVS&quot;</span><br><span class="line">| grep &quot;3D controller&quot; |</span><br><span class="line"> wc -l</span><br><span class="line">&#96;</span><br><span class="line">NVGA&#x3D;&#96;</span><br><span class="line">echo</span><br><span class="line">&quot;$NVDEVS&quot;</span><br><span class="line">| grep &quot;VGA compatible controller&quot; |</span><br><span class="line"> wc -l</span><br><span class="line">&#96;</span><br><span class="line">N&#x3D;&#96;</span><br><span class="line">expr $N3D + $NVGA -</span><br><span class="line">1</span><br><span class="line">&#96;</span><br><span class="line">for i in &#96;</span><br><span class="line">seq</span><br><span class="line">0</span><br><span class="line"> $N</span><br><span class="line">&#96;; do</span><br><span class="line">    mknod -m 666 &#x2F;dev&#x2F;nvidia$i c 195 $i</span><br><span class="line">done</span><br><span class="line">    mknod -m 666 &#x2F;dev&#x2F;nvidiactl c 195 255</span><br><span class="line">else</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">​</span><br><span class="line">chmod +x nv.sh &amp;&amp; bash nv.sh</span><br></pre></td></tr></table></figure><p>再次重启机器查看 cuda 版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>编译:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;samples &amp;&amp;  make</span><br><span class="line"></span><br><span class="line">cd  &#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;samples&#x2F;bin&#x2F;x86_64&#x2F;linux&#x2F;release .&#x2F;deviceQuery</span><br></pre></td></tr></table></figure><p>以上如果输出：“Result = PASS” 代表 cuda 安装成功。</p><p>安装 nvdocker:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;runtimes&quot;:&#123;</span><br><span class="line">    &quot;nvidia&quot;:&#123;</span><br><span class="line">         &quot;path&quot;:&quot;nvidia-container-runtime&quot;,</span><br><span class="line">          &quot;runtimeArgs&quot;:[]</span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;],</span><br><span class="line">&quot;storage-driver&quot;:&quot;overlay2&quot;,</span><br><span class="line">&quot;default-runtime&quot;:&quot;nvidia&quot;,</span><br><span class="line">&quot;log-driver&quot;:&quot;json-file&quot;,</span><br><span class="line">&quot;log-opts&quot;:&#123;</span><br><span class="line"> &quot;max-size&quot;:&quot;100m&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],</span><br><span class="line">&quot;insecure-registries&quot;: [$harborRgistry],</span><br><span class="line">&quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 docker:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker &amp;&amp; docker info</span><br></pre></td></tr></table></figure><p>检查 nvidia-docker 安装是否成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --runtime&#x3D;nvidia --rm nvidia&#x2F;cuda:9.0-base nvidia-smi</span><br></pre></td></tr></table></figure><p>在节点机器进入 su 模式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su $nodeUser</span><br></pre></td></tr></table></figure><p>给当前节点用户配置 k8s apiserver 访问公钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">​</span><br><span class="line">cp -i  admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">​</span><br><span class="line">chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">​</span><br><span class="line">mkdir -p $HOME&#x2F;etcd</span><br><span class="line">​</span><br><span class="line">sudo rm -rf &#x2F;etc&#x2F;kubernetes</span><br><span class="line">​</span><br><span class="line">sudo mkdir -p &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</span><br><span class="line">​</span><br><span class="line">sudo cp &#x2F;home&#x2F;$nodeUser&#x2F;etcd&#x2F;* &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</span><br><span class="line">​</span><br><span class="line">sudo kubeadm join $masterIP:6443 --token  $token_name --discovery-token-ca-cert-hash $hash</span><br></pre></td></tr></table></figure><p>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm join 192.168.8.116:6443 --token vyi4ga.foyxqr2iz9i391q3 --discovery-token-ca-cert-hash sha256:929143bcdaa3e23c6faf20bc51ef6a57df02edf9df86cedf200320a9b4d3220a</span><br></pre></td></tr></table></figure><p>检查 node 是否加入 master:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure><h6 id="以上介绍了单机的-k8s-部署，以及-HA-的-master-节点的部署安装。"><a href="#以上介绍了单机的-k8s-部署，以及-HA-的-master-节点的部署安装。" class="headerlink" title="以上介绍了单机的 k8s 部署，以及 HA 的 master 节点的部署安装。"></a>以上介绍了单机的 k8s 部署，以及 HA 的 master 节点的部署安装。</h6><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅入Spring Cloud架构</title>
    <link href="http://www.damon8.cn/2020/07/23/micro-service03/"/>
    <id>http://www.damon8.cn/2020/07/23/micro-service03/</id>
    <published>2020-07-23T01:00:09.000Z</published>
    <updated>2020-07-23T01:13:34.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、-微服务简介"><a href="#1、-微服务简介" class="headerlink" title="1、 微服务简介"></a>1、 微服务简介</h2><br><br><h3 id="1-1-什么是微服务"><a href="#1-1-什么是微服务" class="headerlink" title="1.1 什么是微服务"></a>1.1 什么是微服务</h3><p>&emsp;&emsp;所谓微服务，就是把一个比较大的单个应用程序或服务拆分为若干个独立的、粒度很小的服务或组件。</p><br><h3 id="1-2-为什么使用微服务"><a href="#1-2-为什么使用微服务" class="headerlink" title="1.2 为什么使用微服务"></a>1.2 为什么使用微服务</h3><p>&emsp;&emsp;微服务的拆解业务，这一策略，可扩展单个组件，而不需要整个的应用程序堆栈做修改，从而满足服务等级协议。微服务带来的好处是，它们更快且更容易更新。当开发者对一个传统的单体应用程序进行变更时，他们必须做详细、完整的 QA 测试，以确保变更不会影响其他特性或功能。但有了微服务，开发者可以更新应用程序的单个组件，而不会影响其他的部分。测试微服务应用程序仍然是必需的，但使得其更容易被识别和隔离，从而加快开发速度并支持 DevOps 和持续应用程序开发。</p><br><h3 id="1-3-微服务的架构组成"><a href="#1-3-微服务的架构组成" class="headerlink" title="1.3 微服务的架构组成"></a>1.3 微服务的架构组成</h3><p>&emsp;&emsp;这几年的快速发展，微服务已经变得越来越流行。其中，Spring Cloud 一直在更新，并被大部分公司所使用。代表性的有 Alibaba，2018 年 11 月左右，Spring Cloud 联合创始人 Spencer Gibb 在 Spring 官网的博客页面宣布：阿里巴巴开源 Spring Cloud Alibaba，并发布了首个预览版本。随后，Spring Cloud 官方 Twitter 也发布了此消息。Spring Cloud 的版本也很多:</p><br><table><thead><tr><th>Spring Cloud</th><th>Spring Cloud Alibaba</th><th>Spring Boot</th></tr></thead><tbody><tr><td>Spring Cloud Hoxton</td><td>2.2.0.RELEASE</td><td>2.2.X.RELEASE</td></tr><tr><td>Spring Cloud Greenwich</td><td>2.1.1.RELEASE</td><td>2.1.X.RELEASE</td></tr><tr><td>Spring Cloud Finchley</td><td>2.0.1.RELEASE</td><td>2.0.X.RELEASE</td></tr><tr><td>Spring Cloud Edgware</td><td>1.5.1.RELEASE</td><td>1.5.X.RELEASE</td></tr></tbody></table><br><p>以 Spring Boot1.x 为例，主要包括 Eureka、Zuul、Config、Ribbon、Hystrix 等。而在 Spring Boot2.x 中，网关采用了自己的 Gateway。当然在 Alibaba 版本中，其组件更是丰富：使用 Alibaba 的 Nacos 作为注册中心和配置中心。使用自带组件 Sentinel 作为限流、熔断神器。</p><br><br><br><h2 id="2、-微服务之网关"><a href="#2、-微服务之网关" class="headerlink" title="2、 微服务之网关"></a>2、 微服务之网关</h2><br><br><h3 id="2-1-常见的几种网关"><a href="#2-1-常见的几种网关" class="headerlink" title="2.1 常见的几种网关"></a>2.1 常见的几种网关</h3><p>&emsp;&emsp;目前，在 Spring Boot1.x 中，用到的比较多的网关就是 Zuul。Zuul 是 Netflix 公司开源的一个网关服务，而 Spring Boot2.x 中，采用了自家推出的 Spring Cloud Gateway。</p><br><h3 id="2-2-API-网关的作用"><a href="#2-2-API-网关的作用" class="headerlink" title="2.2 API 网关的作用"></a>2.2 API 网关的作用</h3><p>&emsp;&emsp;API 网关的主要作用是反向路由、安全认证、负载均衡、限流熔断、日志监控。在 Zuul 中，我们可以通过注入 Bean 的方式来配置路由，也可以在直接通过配置文件来配置:<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zuul.routes.api-d.sensitiveHeaders&#x3D;&quot;*&quot;</span><br><span class="line">zuul.routes.api-d.path&#x3D;&#x2F;business&#x2F;api&#x2F;**</span><br><span class="line">zuul.routes.api-d.serviceId&#x3D;business-web</span><br></pre></td></tr></table></figure><br>我们可以通过网关来做一些安全的认证：如统一鉴权。在 Zuul 中：<br>Zuul 的工作原理<br><ul><li>过滤器机制</li></ul><p>&emsp;&emsp;zuul 的核心是一系列的 filters, 其作用可以类比 Servlet 框架的 Filter，或者 AOP。zuul 把 Request route 到用户处理逻辑的过程中，这些 filter 参与一些过滤处理，比如 Authentication，Load Shedding 等。几种标准的过滤器类型：<br><br></p><p>&emsp;&emsp;(1) PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。<br><br></p><p>&emsp;&emsp;(2) ROUTING：这种过滤器用于构建发送给微服务的请求，并使用 Apache HttpClient 或 Netfilx Ribbon 请求微服务。<br><br></p><p>&emsp;&emsp;(3) POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。<br><br></p><p>&emsp;&emsp;(4) ERROR：在其他阶段发生错误时执行该过滤器。<br><br></p><ul><li>过滤器的生命周期</li></ul><p>&emsp;&emsp;filterOrder：通过 int 值来定义过滤器的执行顺序，越小优先级越高。<br><br></p><p>&emsp;&emsp;shouldFilter：返回一个 boolean 类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回 true，所以该过滤器总是生效。<br><br></p><p>&emsp;&emsp;run：过滤器的具体逻辑。需要注意，这里我们通过 ctx.setSendZuulResponse(false) 令 zuul 过滤该请求，不对其进行路由，然后通过 ctx.setResponseStatusCode(401) 设置了其返回的错误码。<br><br></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AccessFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisCacheConfiguration redisCacheConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EnvironmentConfig env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] PASS_PATH_ARRAY = &#123; <span class="string">"/login"</span>, <span class="string">"openProject"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">HttpServletRequest request = ctx.getRequest();</span><br><span class="line">HttpServletResponse response = ctx.getResponse();</span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setHeader(<span class="string">"content-type"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"&#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL());</span><br><span class="line"><span class="keyword">for</span> (String path : PASS_PATH_ARRAY) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.contains(request.getRequestURL().toString(), path)) &#123;</span><br><span class="line">logger.debug(<span class="string">"request path: &#123;&#125; is pass"</span>, path);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">logger.warn(<span class="string">"access token is empty"</span>);</span><br><span class="line">ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">ctx.setResponseStatusCode(<span class="number">404</span>);</span><br><span class="line">ctx.setResponseBody(JSONObject.toJSONString(</span><br><span class="line">Response.error(<span class="number">200</span>, -<span class="number">3</span>, <span class="string">"header param error"</span>, <span class="keyword">null</span>)));</span><br><span class="line"><span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JedisPool jedisPool = redisCacheConfiguration.getJedisPool();</span><br><span class="line">jedis = jedisPool.getResource();</span><br><span class="line">logger.debug(<span class="string">"zuul gateway service get redisResource success"</span>);</span><br><span class="line">String key = env.getPrefix() + token;</span><br><span class="line">String value = jedis.get(key);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(value)) &#123;</span><br><span class="line">ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">ctx.setResponseBody(JSONObject.toJSONString(Response.error(<span class="number">200</span>, -<span class="number">1</span>, <span class="string">"login timeout"</span>,<span class="keyword">null</span>)));</span><br><span class="line"><span class="keyword">return</span> ctx;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"access token ok"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">"get redisResource failed"</span>);</span><br><span class="line">logger.error(e.getMessage(), e);</span><br><span class="line">ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">ctx.setResponseStatusCode(<span class="number">500</span>);</span><br><span class="line">ctx.setResponseBody(JSONObject.toJSONString(</span><br><span class="line">Response.error(<span class="number">200</span>, -<span class="number">8</span>, <span class="string">"redis connect failed"</span>, <span class="keyword">null</span>)));</span><br><span class="line"><span class="keyword">return</span> ctx;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">jedis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><br><h2 id="3、-微服务之服务注册与发现"><a href="#3、-微服务之服务注册与发现" class="headerlink" title="3、 微服务之服务注册与发现"></a>3、 微服务之服务注册与发现</h2><br><br><h3 id="3-1-常见的几种注册中心"><a href="#3-1-常见的几种注册中心" class="headerlink" title="3.1 常见的几种注册中心"></a>3.1 常见的几种注册中心</h3><p>&emsp;&emsp;目前常见的几种注册中心有：Eureka、Consul、Nacos，但其实 Kubernetes 也可以实现服务的注册与发现功能，且听下面讲解。</p><br><h4 id="Eureka-的高可用"><a href="#Eureka-的高可用" class="headerlink" title="Eureka 的高可用"></a>Eureka 的高可用</h4><br>&emsp;&emsp;在注册中心部署时，有可能出现节点问题，我们先看看 Eureka 集群如何实现高可用，首先配置基础的 Eureka 配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-server</span><br><span class="line">server.port&#x3D;1111</span><br><span class="line"></span><br><span class="line">spring.profiles.active&#x3D;dev</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname&#x3D;localhost</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;</span><br><span class="line"></span><br><span class="line">logging.path&#x3D;&#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">eureka.server.enable-self-preservation&#x3D;false</span><br><span class="line">eureka.client.register-with-eureka&#x3D;false</span><br><span class="line">eureka.client.fetch-registry&#x3D;false</span><br><span class="line"></span><br><span class="line">eureka.server.eviction-interval-timer-in-ms&#x3D;5000</span><br><span class="line">eureka.server.responseCacheUpdateInvervalMs&#x3D;60000</span><br><span class="line"></span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds&#x3D;10</span><br><span class="line"></span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds&#x3D;3</span><br><span class="line"></span><br><span class="line">eureka.server.responseCacheAutoExpirationInSeconds&#x3D;180</span><br><span class="line"></span><br><span class="line">server.undertow.accesslog.enabled&#x3D;false</span><br><span class="line">server.undertow.accesslog.pattern&#x3D;combined</span><br></pre></td></tr></table></figure><br>配置好后，新建一个 application-peer1.properties 文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-server</span><br><span class="line">server.port&#x3D;1111</span><br><span class="line">eureka.instance.hostname&#x3D;peer1</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;peer2:1112&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><p>application-peer2.properties 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;eureka-server</span><br><span class="line">server.port&#x3D;1112</span><br><span class="line">eureka.instance.hostname&#x3D;peer2</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;peer1:1111&#x2F;eureka&#x2F;</span><br></pre></td></tr></table></figure><br><p>这样通过域名 peer1、peer2 的形式来实现高可用，那么如何配置域名呢？有几种方式：</p><ul><li>通过 hosts 来配置域名，vi /etc/hosts:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.12.3.2 peer1</span><br><span class="line">10.12.3.5 peer2</span><br></pre></td></tr></table></figure><br><ul><li>通过 kubernetes 部署服务时来配置域名：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostAliases:</span><br><span class="line">- ip: &quot;10.12.3.2&quot;</span><br><span class="line">  hostnames:</span><br><span class="line">  - &quot;peer1&quot;</span><br><span class="line">- ip: &quot;10.12.3.5&quot;</span><br><span class="line">  hostnames:</span><br><span class="line">  - &quot;peer2&quot;</span><br></pre></td></tr></table></figure><br><h4 id="Nacos-实现服务注册、发现"><a href="#Nacos-实现服务注册、发现" class="headerlink" title="Nacos 实现服务注册、发现"></a>Nacos 实现服务注册、发现</h4><br>&emsp;&emsp;Nacos 是 Alibaba 推出来的，目前最新版本是 v1.2.1。其功能可以实现服务的注册、发现，也可以作为配置管理来提供配置服务。可以手动去官网下载安装，Nacos 地址：https://github.com/alibaba/nacos/releases。<br>执行，Linux/Unix/Mac：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd startup.cmd -m standalone</span><br></pre></td></tr></table></figure><br><p>当我们引入 Nacos 相关配置时，即可使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><br><h5 id="注意：下面这个配置文件需要是-bootstrap，否则可能失败，至于为什么，大家可以自己试试。"><a href="#注意：下面这个配置文件需要是-bootstrap，否则可能失败，至于为什么，大家可以自己试试。" class="headerlink" title="注意：下面这个配置文件需要是 bootstrap，否则可能失败，至于为什么，大家可以自己试试。"></a>注意：下面这个配置文件需要是 bootstrap，否则可能失败，至于为什么，大家可以自己试试。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: oauth-cas</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br></pre></td></tr></table></figure><br><p>配置完成后，完成 main：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.damon;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class CasApp &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(CasApp.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>完成以上，我们运行启动类，我们打开 Nacos 登录后，打开服务列表，即可看到：</p><p><img src="https://images.gitbook.cn/b9eb76d0-7df4-11ea-b59d-2db101c69ebc" alt="在这里插入图片描述"></p><br><h4 id="Kubernetes-服务注册与发现"><a href="#Kubernetes-服务注册与发现" class="headerlink" title="Kubernetes 服务注册与发现"></a>Kubernetes 服务注册与发现</h4><br>&emsp;&emsp;接下来，请允许我为大家引入 Kubernetes 的服务注册与发现功能，spring-cloud-kubernetes 的 DiscoveryClient 服务将 Kubernetes 中的 "Service" 资源与 Spring Cloud 中的服务对应起来了，有了这个 DiscoveryClient，我们在 Kubernetes 环境下就不需要 Eureka 等来做注册发现了，而是直接使用 Kubernetes 的服务机制。<br><br><p>在 pom.xml 中，有对 spring-cloud-kubernetes 框架的依赖配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-kubernetes-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-kubernetes-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><p>为何 spring-cloud-kubernetes 可以完成服务注册发现呢？首先，创建一个 Spring Boot 项目的启动类，且引入服务发现注解 @EnableDiscoveryClient，同时需要开启服务发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: edge-admin</span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br></pre></td></tr></table></figure><br><br>开启后，我们打开spring-cloud-kubernetes-discovery的源码，地址是：https://github.com/spring-cloud/spring-cloud-kubernetes/tree/master/spring-cloud-kubernetes-discovery，看到内容：<p><img src="https://images.gitbook.cn/d2b1ce30-7bb0-11ea-8940-6df1558f5aa2" alt="在这里插入图片描述"><br><br><br>为什么要看这个文件呢？因为 spring 容器启动时，会寻找 classpath 下所有 spring.factories 文件(包括 jar 文件中的)，spring.factories 中配置的所有类都会实例化，我们在开发 springboot 时常用到的***-starter.jar 就用到了这个技术，效果是一旦依赖了某个 starter.jar 很多功能就在 spring 初始化时候自动执行。</p><br><p>spring.factories 文件中有两个类：KubernetesDiscoveryClientAutoConfiguration 和 KubernetesDiscoveryClientConfigClientBootstrapConfiguration 都会被实例化。先看 KubernetesDiscoveryClientConfigClientBootstrapConfiguration，KubernetesAutoConfiguration 和 KubernetesDiscoveryClientAutoConfiguration 这两个类会被实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> * Copyright <span class="number">2013</span>-<span class="number">2019</span> the original author or authors.</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.cloud.kubernetes.discovery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.kubernetes.KubernetesAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(<span class="string">"spring.cloud.config.discovery.enabled"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123; KubernetesAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">KubernetesDiscoveryClientAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">KubernetesDiscoveryClientConfigClientBootstrapConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>再看 KubernetesAutoConfiguration 的源码，会实例化一个重要的类 DefaultKubernetesClient，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KubernetesClient <span class="title">kubernetesClient</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultKubernetesClient(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后我们再看 KubernetesDiscoveryClientAutoConfiguration 源码，注意 kubernetesDiscoveryClient 方法，这里面是接口实现的重点，还要重点关注的地方是 KubernetesClient 参数的值，是上面提到的 DefaultKubernetesClient 对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.cloud.kubernetes.discovery.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> KubernetesDiscoveryClient <span class="title">kubernetesDiscoveryClient</span><span class="params">(KubernetesClient client,</span></span></span><br><span class="line"><span class="function"><span class="params">KubernetesDiscoveryProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">KubernetesClientServicesFunction kubernetesClientServicesFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">DefaultIsServicePortSecureResolver isServicePortSecureResolver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> KubernetesDiscoveryClient(client, properties, kubernetesClientServicesFunction, isServicePortSecureResolver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>接下来，我们看 spring-cloud-kubernetes 中的 KubernetesDiscoveryClient.java，看方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; getServices(Predicate&lt;Service&gt; filter) &#123;</span><br><span class="line">return this.kubernetesClientServicesFunction.apply(this.client).list().getItems()</span><br><span class="line">.stream().filter(filter).map(s -&gt; s.getMetadata().getName())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>在 apply(this.client).list()，可以看到数据源其实就是 this.client，并且 KubernetesClientServicesFunction 实例化时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public KubernetesClientServicesFunction servicesFunction(</span><br><span class="line">KubernetesDiscoveryProperties properties) &#123;</span><br><span class="line">  if (properties.getServiceLabels().isEmpty()) &#123;</span><br><span class="line">    return KubernetesClient::services;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (client) -&gt; client.services().withLabels(properties.getServiceLabels());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>调用其 services 方法的返回结果，KubernetesDiscoveryClient.getServices 方法中的 this.client 是什么呢？在前面的分析时已经提到了，就是 DefaultKubernetesClient 类的实例，所以，此时要去去看 DefaultKubernetesClient.services 方法，发现 client 是  ServiceOperationsImpl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public MixedOperation&lt;Service, ServiceList, DoneableService, ServiceResource&lt;Service, DoneableService&gt;&gt; services() &#123;</span><br><span class="line">    return new ServiceOperationsImpl(httpClient, getConfiguration(), getNamespace());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><p>接着我们在实例 ServiceOperationsImpl 中看其 list 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public L list() throws KubernetesClientException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      HttpUrl.Builder requestUrlBuilder &#x3D; HttpUrl.get(getNamespacedUrl()).newBuilder();</span><br><span class="line"></span><br><span class="line">      String labelQueryParam &#x3D; getLabelQueryParam();</span><br><span class="line">      if (Utils.isNotNullOrEmpty(labelQueryParam)) &#123;</span><br><span class="line">        requestUrlBuilder.addQueryParameter(&quot;labelSelector&quot;, labelQueryParam);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      String fieldQueryString &#x3D; getFieldQueryParam();</span><br><span class="line">      if (Utils.isNotNullOrEmpty(fieldQueryString)) &#123;</span><br><span class="line">        requestUrlBuilder.addQueryParameter(&quot;fieldSelector&quot;, fieldQueryString);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Request.Builder requestBuilder &#x3D; new Request.Builder().get().url(requestUrlBuilder.build());</span><br><span class="line">      L answer &#x3D; handleResponse(requestBuilder, listType);</span><br><span class="line">      updateApiVersion(answer);</span><br><span class="line">      return answer;</span><br><span class="line">    &#125; catch (InterruptedException | ExecutionException | IOException e) &#123;</span><br><span class="line">      throw KubernetesClientException.launderThrowable(forOperationType(&quot;list&quot;), e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><p>接着展开上面代码的 handleResponse 函数，可见里面是一次 http 请求，至于请求的地址，可以展开 getNamespacedUrl() 方法，里面调用的 getRootUrl 方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public URL getRootUrl() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      if (apiGroup !&#x3D; null) &#123;</span><br><span class="line">        return new URL(URLUtils.join(config.getMasterUrl().toString(), &quot;apis&quot;, apiGroup, apiVersion));</span><br><span class="line">      &#125;</span><br><span class="line">      return new URL(URLUtils.join(config.getMasterUrl().toString(), &quot;api&quot;, apiVersion));</span><br><span class="line">    &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">      throw KubernetesClientException.launderThrowable(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><p>我们看到逻辑中，貌似了解到其结果是这样的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&#x2F;api&#x2F;version 或 xxx&#x2F;apis&#x2F;xxx&#x2F;version</span><br></pre></td></tr></table></figure><p>看到这样的结果，感觉比较像访问 kubernetes 的 API Server 时用的 URL 标准格式，有关 API Server 服务的详情请参考官方文档，地址是: <a href="https://kubernetes.io/docs/reference/using-api/api-concepts/。" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/using-api/api-concepts/。</a></p><br>弄清楚以上，我们发现了其实最终是向 kubernetes 的 API Server  发起 http 请求，获取 Service 资源的数据列表。因此，我们在最后还得在 k8s 底层新建 Service 资源来让其获取：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-web-service</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: admin-web01</span><br><span class="line">    port: 2001</span><br><span class="line">    targetPort: admin-web01</span><br><span class="line">  selector:</span><br><span class="line">    app: admin-web</span><br></pre></td></tr></table></figure><br>当然，在部署时，不管是以 Deployment 形式，还是以 DaemonSet 来部署，其最后还是 pod，如果要实现单个服务的多节点部署，可以用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas&#x3D;2 deployment admin-web-deployment</span><br></pre></td></tr></table></figure><br><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><br><h5 id="spring-cloud-kubernetes-这个组件的服务发现目的就是获取-Kubernetes-中一个或者多个-Namespace-下的所有服务列表，且在过滤列表时候设置过滤的端口号-，这样获取到服务列表后就能让依赖它们的-Spring-Boot-或其它框架的应用完成服务发现工作，让服务能够通过-http-serviceName-这种方式进行访问。"><a href="#spring-cloud-kubernetes-这个组件的服务发现目的就是获取-Kubernetes-中一个或者多个-Namespace-下的所有服务列表，且在过滤列表时候设置过滤的端口号-，这样获取到服务列表后就能让依赖它们的-Spring-Boot-或其它框架的应用完成服务发现工作，让服务能够通过-http-serviceName-这种方式进行访问。" class="headerlink" title="spring-cloud-kubernetes 这个组件的服务发现目的就是获取 Kubernetes 中一个或者多个 Namespace 下的所有服务列表，且在过滤列表时候设置过滤的端口号 ，这样获取到服务列表后就能让依赖它们的 Spring Boot 或其它框架的应用完成服务发现工作，让服务能够通过 http://serviceName 这种方式进行访问。"></a>spring-cloud-kubernetes 这个组件的服务发现目的就是获取 Kubernetes 中一个或者多个 Namespace 下的所有服务列表，且在过滤列表时候设置过滤的端口号 ，这样获取到服务列表后就能让依赖它们的 Spring Boot 或其它框架的应用完成服务发现工作，让服务能够通过 <a href="http://serviceName" target="_blank" rel="noopener">http://serviceName</a> 这种方式进行访问。</h5><br><br><br><h2 id="4、-微服务之配置管理"><a href="#4、-微服务之配置管理" class="headerlink" title="4、 微服务之配置管理"></a>4、 微服务之配置管理</h2><br><br><h3 id="4-1-常见的配置中心"><a href="#4-1-常见的配置中心" class="headerlink" title="4.1 常见的配置中心"></a>4.1 常见的配置中心</h3><br><p>&emsp;&emsp;目前常见的几种配置中心有：Spring Cloud Config、Apollo、Nacos，但其实 Kubernetes 组件 configMap 就可以实现服务的配置管理。并且，在 Spring Boot2.x 中，就已经引入使用了。</p><br><h4 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos 配置中心"></a>Nacos 配置中心</h4><br><p>&emsp;&emsp;在上面注册中心中，我们讲到 Nacos，作为注册中心，其实也可以作为配置来管理服务的环境变量。</p><br>同样，引入其以依赖：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><br><p>同样，注意：下面这个配置文件需要是 bootstrap，否则可能失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: oauth-cas</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br></pre></td></tr></table></figure><br>启动类在上面的注册中心已经讲过了，现在看其配置类:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">public class EnvConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.driverClassName:&#125;&quot;)</span><br><span class="line">    private String jdbc_driverClassName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.url:&#125;&quot;)</span><br><span class="line">    private String jdbc_url;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.username:&#125;&quot;)</span><br><span class="line">    private String jdbc_username;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.password:&#125;&quot;)</span><br><span class="line">    private String jdbc_password;</span><br><span class="line"></span><br><span class="line">public String getJdbc_driverClassName() &#123;</span><br><span class="line">return jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_driverClassName(String jdbc_driverClassName) &#123;</span><br><span class="line">this.jdbc_driverClassName &#x3D; jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_url() &#123;</span><br><span class="line">return jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_url(String jdbc_url) &#123;</span><br><span class="line">this.jdbc_url &#x3D; jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_username() &#123;</span><br><span class="line">return jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_username(String jdbc_username) &#123;</span><br><span class="line">this.jdbc_username &#x3D; jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_password() &#123;</span><br><span class="line">return jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_password(String jdbc_password) &#123;</span><br><span class="line">this.jdbc_password &#x3D; jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过注解 <code>@Component</code>、<code>@RefreshScope</code>，来实现其配置可被获取。<strong>注意 <code>@Value(&quot;${jdbc.username:}&quot;)</code>最后需要冒号的，否则启动后会报错的。</strong></p><br>接下来可以配置属性值来，点击配置管理，查看配置：<p><img src="https://images.gitbook.cn/c5e26b80-7bc7-11ea-9792-81939fbf7f0c" alt="在这里插入图片描述"></p><br>如果首次打开没有配置，可以新建配置：<p><img src="https://images.gitbook.cn/07105d10-7bc8-11ea-b2e6-fdc2f968c34f" alt="在这里插入图片描述"><br><br><br>编辑配置：</p><p><img src="https://images.gitbook.cn/21327ab0-7df4-11ea-aeaa-0141df86c50d" alt="在这里插入图片描述"><br><br><br>新建完之后，可以编辑，也可以删除，这里就不操作了。</p><br><h4 id="ConfigMap-作为配置管理"><a href="#ConfigMap-作为配置管理" class="headerlink" title="ConfigMap 作为配置管理"></a>ConfigMap 作为配置管理</h4><br>&emsp;&emsp;spring-cloud-kubernetes 在上面提供了服务发现的功能，其实它还很强大，也提供了服务的配置管理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-actuator-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-cloud-starter-kubernetes-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><br><p>在初始化时，引入注解来自动注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.damon;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import com.damon.config.EnvConfig;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableConfigurationProperties(EnvConfig.class)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class AdminApp &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AdminApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，EnvConfig 类来配置环境变量配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;damon&quot;)</span><br><span class="line">public class EnvConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String message &#x3D; &quot;This is a dummy message&quot;;</span><br><span class="line"></span><br><span class="line">    private String spring_mq_host;</span><br><span class="line">    private String spring_mq_port;</span><br><span class="line">    private String spring_mq_user;</span><br><span class="line">    private String spring_mq_pwd;</span><br><span class="line">    private String jdbc_driverClassName &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">    private String jdbc_url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;data_test?zeroDateTimeBehavior&#x3D;convertToNull&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false&quot;;</span><br><span class="line">    private String jdbc_username &#x3D; &quot;root&quot;;</span><br><span class="line">    private String jdbc_password &#x3D; &quot;wwww&quot;;</span><br><span class="line">    private String spring_redis_host;</span><br><span class="line">    private String spring_redis_port;</span><br><span class="line">    private String spring_redis_pwd;</span><br><span class="line">    private String base_path;</span><br><span class="line">    private String chunk_size;</span><br><span class="line">    private Long expire_time&#x3D; 600000L;</span><br><span class="line"></span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return this.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message &#x3D; message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getSpring_mq_host() &#123;</span><br><span class="line">return spring_mq_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_host(String spring_mq_host) &#123;</span><br><span class="line">this.spring_mq_host &#x3D; spring_mq_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_port() &#123;</span><br><span class="line">return spring_mq_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_port(String spring_mq_port) &#123;</span><br><span class="line">this.spring_mq_port &#x3D; spring_mq_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_user() &#123;</span><br><span class="line">return spring_mq_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_user(String spring_mq_user) &#123;</span><br><span class="line">this.spring_mq_user &#x3D; spring_mq_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_pwd() &#123;</span><br><span class="line">return spring_mq_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_pwd(String spring_mq_pwd) &#123;</span><br><span class="line">this.spring_mq_pwd &#x3D; spring_mq_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_driverClassName() &#123;</span><br><span class="line">return jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_driverClassName(String jdbc_driverClassName) &#123;</span><br><span class="line">this.jdbc_driverClassName &#x3D; jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_url() &#123;</span><br><span class="line">return jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_url(String jdbc_url) &#123;</span><br><span class="line">this.jdbc_url &#x3D; jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_username() &#123;</span><br><span class="line">return jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_username(String jdbc_username) &#123;</span><br><span class="line">this.jdbc_username &#x3D; jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_password() &#123;</span><br><span class="line">return jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_password(String jdbc_password) &#123;</span><br><span class="line">this.jdbc_password &#x3D; jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_host() &#123;</span><br><span class="line">return spring_redis_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_host(String spring_redis_host) &#123;</span><br><span class="line">this.spring_redis_host &#x3D; spring_redis_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_port() &#123;</span><br><span class="line">return spring_redis_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_port(String spring_redis_port) &#123;</span><br><span class="line">this.spring_redis_port &#x3D; spring_redis_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_pwd() &#123;</span><br><span class="line">return spring_redis_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_pwd(String spring_redis_pwd) &#123;</span><br><span class="line">this.spring_redis_pwd &#x3D; spring_redis_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getBase_path() &#123;</span><br><span class="line">return base_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setBase_path(String base_path) &#123;</span><br><span class="line">this.base_path &#x3D; base_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getChunk_size() &#123;</span><br><span class="line">return chunk_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setChunk_size(String chunk_size) &#123;</span><br><span class="line">this.chunk_size &#x3D; chunk_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Long getExpire_time() &#123;</span><br><span class="line">return expire_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setExpire_time(Long expire_time) &#123;</span><br><span class="line">this.expire_time &#x3D; expire_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样，在部署时，我们新建 ConfigMap 类型的资源，同时，会配置其属性值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-web</span><br><span class="line">data:</span><br><span class="line">  application.yaml: |-</span><br><span class="line">    damon:</span><br><span class="line">      message: Say Hello to the World</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: dev</span><br><span class="line">    damon:</span><br><span class="line">      message: Say Hello to the Developers</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: test</span><br><span class="line">    damon:</span><br><span class="line">      message: Say Hello to the Test</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: prod</span><br><span class="line">    damon:</span><br><span class="line">      message: Say Hello to the Prod</span><br></pre></td></tr></table></figure><br>并且结合配置，来实现动态更新：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: admin-web</span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br><span class="line">      reload:</span><br><span class="line">        enabled: true</span><br><span class="line">        mode: polling</span><br><span class="line">        period: 500</span><br><span class="line">      config:</span><br><span class="line">        sources:</span><br><span class="line">        - name: $&#123;spring.application.name&#125;</span><br><span class="line">          namespace: default</span><br></pre></td></tr></table></figure><br>这里是实现自动 500ms 拉取配置，也可以通过事件触发的形式来动态获取最新配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: admin-web</span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      config:</span><br><span class="line">        sources:</span><br><span class="line">         - name: $&#123;spring.application.name&#125;</span><br><span class="line">           namespace: default</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br><span class="line">      reload:</span><br><span class="line">        enabled: true</span><br><span class="line">        mode: event</span><br><span class="line">        period: 500</span><br></pre></td></tr></table></figure><br><br><br><h2 id="5、-微服务模块划分"><a href="#5、-微服务模块划分" class="headerlink" title="5、 微服务模块划分"></a>5、 微服务模块划分</h2><br><br><h3 id="5-1-如何划分微服务"><a href="#5-1-如何划分微服务" class="headerlink" title="5.1 如何划分微服务"></a>5.1 如何划分微服务</h3><br><p>&emsp;&emsp;微服务架构设计中，服务拆分的问题很突出，第一种，按照纵向的业务拆分，第二种，横向的功能拆分。</p><br><p>&emsp;&emsp;以电商业务为例，首先按照业务领域的纵向拆分，分为用户微服务、商品微服务、交易微服务、订单微服务等等。</p><br><p>&emsp;&emsp;思考一下： 在纵向拆分仅仅按照业务领域进行拆分是否满足所有的业务场景？结果肯定是否定的。例如用户服务分为用户注册（写）和登录（读）等。写请求的重要性总是大于读请求的，在高并发下，读写比例 10:1，甚至更高的情况下，从而导致了大量的读请求往往会直接影响写请求。为了避免大量的读对写的请求干扰，需要对服务进行读写分离，即用户注册为一个微服务，登录为另一个微服务。此时按照 API 的细粒度继续进行纵向的业务拆分。</p><br><p>&emsp;&emsp;在横向上，按照所请求的功能进行拆分，即对一个请求的生命周期继续进行拆分。请求从用户端发出，首先接受到请求的是网关服务（这里不考虑 nginx 代理网关分发过程），网关服务对请求进行鉴权、参数合法性检查、路由转发等。接下来业务逻辑服务对请求进行业务逻辑的编排处理。对业务数据进行存储和查询就需要数据访问服务，数据访问服务提供了基本的 CRUD 原子操作，并负责海量数据的分库分表，以及屏蔽底层存储的差异性等功能。最后是数据持久化和缓存服务，比如可以采用 MQ、Kafka、Redis Cluster 等。</p><br><p>&emsp;&emsp;微服务架构通过业务的纵向拆分以及功能的横向拆分，服务演化成更小的颗粒度，各服务之间相互解耦，每个服务都可以快速迭代和持续交付（CI/CD），从而在公司层面能够达到降本增效的终极目标。但是服务粒度越细，服务之间的交互就会越来越多，更多的交互会使得服务之间的治理更复杂。服务之间的治理包括服务间的发现、通信、路由、负载均衡、重试机制、限流降级、熔断、链路跟踪等。</p><br><h3 id="5-2-微服务划分的粒度"><a href="#5-2-微服务划分的粒度" class="headerlink" title="5.2 微服务划分的粒度"></a>5.2 微服务划分的粒度</h3><br><p>&emsp;&emsp;微服务划分粒度，其最核心的六个字可能就是：“高内聚、低耦合”。高内聚：就是说每个服务处于同一个网络或网域下，而且相对于外部，整个的是一个封闭的、安全的盒子，宛如一朵玫瑰花。盒子对外的接口是不变的，盒子内部各模块之间的接口也是不变的，但是各模块内部的内容可以更改。模块只对外暴露最小限度的接口，避免强依赖关系。增删一个模块，应该只会影响有依赖关系的相关模块，无关的不应该受影响。</p><br><p>&emsp;&emsp;那么低耦合，这就涉及到我们业务系统的设计了。所谓低耦合：就是要每个业务模块之间的关系降低，减少冗余、重复、交叉的复杂度，模块功能划分也尽可能单一。这样，才能达到低耦合的目的。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba 实战</title>
    <link href="http://www.damon8.cn/2020/07/23/springcloud-alibaba01/"/>
    <id>http://www.damon8.cn/2020/07/23/springcloud-alibaba01/</id>
    <published>2020-07-23T00:50:27.000Z</published>
    <updated>2020-07-23T00:59:02.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>2018年11月左右，Springcloud 联合创始人Spencer Gibb在Spring官网的博客页面宣布：阿里巴巴开源 Spring Cloud Alibaba，并发布了首个预览版本。随后，Spring Cloud 官方Twitter也发布了此消息。</code></p><p>一、环境准备</p><p>Spring Boot: 2.1.8</p><p>Spring Cloud: Greenwich.SR3</p><p>Spring Cloud Alibaba: 0.9.0.RELEASE</p><p>Maven: 3.5.4</p><p>Java 1.8 +</p><p>Oauth2 (Spring Security 5.1.6 +)</p><p>二、实战</p><p>项目模块</p><p>主要分为：鉴权中心、服务提供者、服务消费者、网关</p><p>实战代码</p><p>鉴权中心，依赖pom.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.damon&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;oauth-cas&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;name&gt;oauth-cas&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;swagger.version&gt;2.6.1&lt;&#x2F;swagger.version&gt;</span><br><span class="line">    &lt;xstream.version&gt;1.4.7&lt;&#x2F;xstream.version&gt;</span><br><span class="line">    &lt;pageHelper.version&gt;4.1.6&lt;&#x2F;pageHelper.version&gt;</span><br><span class="line">    &lt;fastjson.version&gt;1.2.51&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">    &lt;!-- &lt;springcloud.version&gt;2.1.8.RELEASE&lt;&#x2F;springcloud.version&gt; --&gt;</span><br><span class="line">    &lt;springcloud.version&gt;Greenwich.SR3&lt;&#x2F;springcloud.version&gt;</span><br><span class="line">    &lt;springcloud.kubernetes.version&gt;1.1.1.RELEASE&lt;&#x2F;springcloud.kubernetes.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;5.1.46&lt;&#x2F;mysql.version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alibaba-cloud.version&gt;2.1.1.RELEASE&lt;&#x2F;alibaba-cloud.version&gt;</span><br><span class="line">    &lt;springcloud.alibaba.version&gt;0.9.0.RELEASE&lt;&#x2F;springcloud.alibaba.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;!-- &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;$&#123;alibaba-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">          &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">      &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.6.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;19.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- swagger --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;swagger.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;swagger.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--分页插件--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;pageHelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- datasource pool--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 对redis支持,引入的话项目缓存就支持redis了,所以必须加上redis的相关配置,否则操作相关缓存会报异常 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.11.3&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;&#x2F;finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;jvmArguments&gt;-Dfile.encoding&#x3D;UTF-8&lt;&#x2F;jvmArguments&gt;</span><br><span class="line">          &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.jacoco&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jacoco-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.7.8&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;prepare-agent&lt;&#x2F;goal&gt;</span><br><span class="line">              &lt;goal&gt;report&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">          &lt;&#x2F;execution&gt;</span><br><span class="line">        &lt;&#x2F;executions&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>本例中，用到了 Nacos 作为注册中心、配置中心，估需要引入其依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>Oauth2 的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>同时利用 redis 来处理鉴权的信息存储：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>接下来需要准备配置文件 yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    restart:</span><br><span class="line">      enabled: true</span><br><span class="line">    health:</span><br><span class="line">      enabled: true</span><br><span class="line">    info:</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: oauth-cas</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br><span class="line"></span><br><span class="line">  redis: #redis相关配置</span><br><span class="line">    database: 8</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    password: qwqwsq</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 10000ms</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      enabled: true</span><br><span class="line">      force: true</span><br><span class="line">  mvc:</span><br><span class="line">    throw-exception-if-no-handler-found: true</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true # 当遇到同样名称时，是否允许覆盖注册</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  path: &#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br></pre></td></tr></table></figure><p>注意，这个配置文件需要是 bootstrap，否则可能失败，至于为什么，大家可以自己试试。</p><p>接下来就是 application：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 2000</span><br><span class="line">  undertow:</span><br><span class="line">    accesslog:</span><br><span class="line">      enabled: false</span><br><span class="line">      pattern: combined</span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      timeout: PT120M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client:</span><br><span class="line">  http:</span><br><span class="line">    request:</span><br><span class="line">      connectTimeout: 8000</span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line">  typeAliasesPackage: com.damon.*.model</span><br></pre></td></tr></table></figure><p>配置完成后，完成 main：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.damon;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * 配置最多的就是认证服务端，验证账号、密码，存储 token，检查 token ,刷新 token 等都是认证服务端的工作</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年1月13日 下午2:29:42</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class CasApp &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(CasApp.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是配置几个 Oauth2 服务端的几个配置类：AuthorizationServerConfig、ResourceServerConfig、SecurityConfig、RedisTokenStoreConfig、MyRedisTokenStore、UserOAuth2WebResponseExceptionTranslator、AuthenticationEntryPointHandle 等。在 Springcloud Oauth2 进阶篇、Springcloud Oauth2 HA篇 等几篇中已经讲过了。对于相关代码可以关注我的公众号和我互动。</p><p>其中最重要的就是登录时的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.login.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line">import org.springframework.security.oauth2.common.OAuth2AccessToken;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.ConsumerTokenServices;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.damon.commons.Response;</span><br><span class="line">import com.damon.constant.Constant;</span><br><span class="line">import com.damon.constant.LoginEnum;</span><br><span class="line">import com.damon.exception.InnerErrorException;</span><br><span class="line">import com.damon.login.dao.UserMapper;</span><br><span class="line">import com.damon.login.model.SysUser;</span><br><span class="line">import com.damon.login.service.LoginService;</span><br><span class="line">import com.damon.utils.IpUtil;</span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author wangshoufa</span><br><span class="line"> * @date 2018年11月15日 下午12:01:53</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service</span><br><span class="line">public class LoginServiceImpl implements LoginService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Logger logger &#x3D; LoggerFactory.getLogger(LoginServiceImpl.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;private List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">  private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private HttpServletRequest req;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Auth</span><br><span class="line">     * 登录认证</span><br><span class="line">     * 实际中从数据库获取信息</span><br><span class="line">     * 这里为了做演示，把用户名、密码和所属角色都写在代码里了，正式环境中，这里应该是从数据库或者其他地方根据用户名将加密后的密码及所属角色查出来的。账号 damon ，</span><br><span class="line">     * 密码123456，稍后在换取 token 的时候会用到。并且给这个用户设置 &quot;ROLE_ADMIN&quot; 角色。</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">      logger.info(&quot;clientIp is: &#123;&#125; ,username: &#123;&#125;&quot;, IpUtil.getClientIp(req), username);</span><br><span class="line">    logger.info(&quot;serverIp is: &#123;&#125;&quot;, IpUtil.getCurrentIp());</span><br><span class="line">    &#x2F;&#x2F; 查询数据库操作</span><br><span class="line">    try &#123;</span><br><span class="line">      SysUser user &#x3D; userMapper.getUserByUsername(username);</span><br><span class="line">      if (user &#x3D;&#x3D; null) &#123;</span><br><span class="line">        logger.error(&quot;user not exist&quot;);</span><br><span class="line">        throw new UsernameNotFoundException(&quot;username is not exist&quot;);</span><br><span class="line">        &#x2F;&#x2F;throw new UsernameNotFoundException(&quot;the user is not found&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        &#x2F;&#x2F; 用户角色也应在数据库中获取，这里简化</span><br><span class="line">        String role &#x3D; &quot;&quot;;</span><br><span class="line">        if(user.getIsAdmin() &#x3D;&#x3D; 1) &#123;</span><br><span class="line">          role &#x3D; &quot;admin&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities &#x3D; Lists.newArrayList();</span><br><span class="line">        authorities.add(new SimpleGrantedAuthority(role));</span><br><span class="line">        &#x2F;&#x2F;String password &#x3D; passwordEncoder.encode(&quot;123456&quot;);&#x2F;&#x2F; 123456是密码</span><br><span class="line">        &#x2F;&#x2F;return new User(username, password, authorities);</span><br><span class="line">        &#x2F;&#x2F; 线上环境应该通过用户名查询数据库获取加密后的密码</span><br><span class="line">        return new User(username, user.getPassword(), authorities);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      logger.error(&quot;database collect failed&quot;);</span><br><span class="line">      logger.error(e.getMessage(), e);</span><br><span class="line">      throw new UsernameNotFoundException(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 loadUserByUsername 需要验证数据库的密码，并且给用户授权角色。</p><p>到此，鉴权中心服务端完成。上面说的利用了 Nacos 来作为注册中心被客户端服务发现，并提供配置管理。</p><p>下载 Nacos 地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>版本：v1.2.1</p><p>执行：</p><p>Linux/Unix/Mac：sh startup.sh -m standalone</p><p>Windows：cmd startup.cmd -m standalone</p><p>启动完成之后，访问：<a href="http://127.0.0.1:8848/nacos/，可以进入Nacos的服务管理页面，具体如下：" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos/，可以进入Nacos的服务管理页面，具体如下：</a></p><p>默认用户名与密码都是nacos。</p><p>登陆后打开服务管理，可以看到注册到 Nacos 的服务列表：</p><p>可以点击配置管理，查看配置：</p><p>如果没有配置任何服务的配置，可以新建：</p><p>上面讲述了Nacos 如何作为注册中心与配置中心的，很简单吧。</p><p>接下来我们讲解服务提供者代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.damon&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;provider-service&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;name&gt;provider-service&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;swagger.version&gt;2.6.1&lt;&#x2F;swagger.version&gt;</span><br><span class="line">    &lt;xstream.version&gt;1.4.7&lt;&#x2F;xstream.version&gt;</span><br><span class="line">    &lt;pageHelper.version&gt;4.1.6&lt;&#x2F;pageHelper.version&gt;</span><br><span class="line">    &lt;fastjson.version&gt;1.2.51&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">    &lt;!-- &lt;springcloud.version&gt;2.1.8.RELEASE&lt;&#x2F;springcloud.version&gt; --&gt;</span><br><span class="line">    &lt;springcloud.version&gt;Greenwich.SR3&lt;&#x2F;springcloud.version&gt;</span><br><span class="line">    &lt;springcloud.kubernetes.version&gt;1.1.1.RELEASE&lt;&#x2F;springcloud.kubernetes.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;5.1.46&lt;&#x2F;mysql.version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alibaba-cloud.version&gt;2.1.1.RELEASE&lt;&#x2F;alibaba-cloud.version&gt;</span><br><span class="line">    &lt;springcloud.alibaba.version&gt;0.9.0.RELEASE&lt;&#x2F;springcloud.alibaba.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;!-- &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;$&#123;alibaba-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">          &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">      &lt;&#x2F;exclusions&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- swagger --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;swagger.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;swagger.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--分页插件--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;pageHelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- datasource pool--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 对redis支持,引入的话项目缓存就支持redis了,所以必须加上redis的相关配置,否则操作相关缓存会报异常 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;19.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;&#x2F;finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;jvmArguments&gt;-Dfile.encoding&#x3D;UTF-8&lt;&#x2F;jvmArguments&gt;</span><br><span class="line">          &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.jacoco&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jacoco-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.7.8&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;prepare-agent&lt;&#x2F;goal&gt;</span><br><span class="line">              &lt;goal&gt;report&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">          &lt;&#x2F;execution&gt;</span><br><span class="line">        &lt;&#x2F;executions&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 自动生成代码 插件 begin --&gt;</span><br><span class="line">      &lt;!-- &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">          &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">          &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">          &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt; --&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>一如既往的引入依赖。</p><p>配置 bootstrap 文件；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    restart:</span><br><span class="line">      enabled: true</span><br><span class="line">    health:</span><br><span class="line">      enabled: true</span><br><span class="line">    info:</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider-service</span><br><span class="line"></span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      enabled: true</span><br><span class="line">      force: true</span><br><span class="line">  mvc:</span><br><span class="line">    throw-exception-if-no-handler-found: true</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true #当遇到同样名称时，是否允许覆盖注册</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  path: &#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cas-server-url: http:&#x2F;&#x2F;oauth-cas #http:&#x2F;&#x2F;localhost:2000#设置可以访问的地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  oauth2: #与cas对应的配置</span><br><span class="line">    client:</span><br><span class="line">      client-id: provider-service</span><br><span class="line">      client-secret: provider-service-123</span><br><span class="line">      user-authorization-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;authorize #是授权码认证方式需要的</span><br><span class="line">      access-token-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;token #是密码模式需要用到的获取 token 的接口</span><br><span class="line">    resource:</span><br><span class="line">      loadBalanced: true</span><br><span class="line">      #jwt: #jwt存储token时开启</span><br><span class="line">        #key-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;token_key</span><br><span class="line">        #key-value: test_jwt_sign_key</span><br><span class="line">      id: provider-service</span><br><span class="line">      #指定用户信息地址</span><br><span class="line">      user-info-uri: $&#123;cas-server-url&#125;&#x2F;api&#x2F;user #指定user info的URI，原生地址后缀为&#x2F;auth&#x2F;user</span><br><span class="line">      prefer-token-info: false</span><br><span class="line">      #token-info-uri:</span><br><span class="line">    authorization:</span><br><span class="line">      check-token-access: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;check_token #当此web服务端接收到来自UI客户端的请求后，需要拿着请求中的 token 到认证服务端做 token 验证，就是请求的这个接口</span><br><span class="line">application 文件；</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 2001</span><br><span class="line">  undertow:</span><br><span class="line">    accesslog:</span><br><span class="line">      enabled: false</span><br><span class="line">      pattern: combined</span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      timeout: PT120M</span><br><span class="line">      cookie:</span><br><span class="line">        name: PROVIDER-SERVICE-SESSIONID #防止Cookie冲突，冲突会导致登录验证不通过</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client:</span><br><span class="line">  http:</span><br><span class="line">    request:</span><br><span class="line">      connectTimeout: 8000</span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line">  typeAliasesPackage: com.damon.*.model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backend:</span><br><span class="line">  ribbon:</span><br><span class="line">    client:</span><br><span class="line">      enabled: true</span><br><span class="line">    ServerListRefreshInterval: 5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 3000</span><br><span class="line">  # 设置全局默认的ribbon的读超时</span><br><span class="line">  ReadTimeout: 1000</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true</span><br><span class="line">    clients: oauth-cas,consumer-service</span><br><span class="line">  MaxAutoRetries: 1 #对第一次请求的服务的重试次数</span><br><span class="line">  MaxAutoRetriesNextServer: 1 #要重试的下一个服务的最大数量（不包括第一个服务）</span><br><span class="line">  #listOfServers: localhost:5556,localhost:5557</span><br><span class="line">  #ServerListRefreshInterval: 2000</span><br><span class="line">  OkToRetryOnAllOperations: true</span><br><span class="line">  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix.command.BackendCall.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line">hystrix.threadpool.BackendCallThread.coreSize: 5</span><br></pre></td></tr></table></figure><p>接下来启动类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.damon;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年1月13日 下午3:23:06</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">public class ProviderApp &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：注解 @EnableDiscoveryClient、@EnableOAuth2Sso 都需要。</p><p>这时，同样需要配置 ResourceServerConfig、SecurityConfig。</p><p>如果需要数据库，可以加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import org.apache.ibatis.plugin.Interceptor;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">import org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line">import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line">import com.github.pagehelper.PageHelper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">* created by wangshoufa</span><br><span class="line">* 2018年5月23日 下午7:39:37</span><br><span class="line">*</span><br><span class="line">*&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@MapperScan(&quot;com.damon.*.dao&quot;)</span><br><span class="line">public class MybaitsConfig &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private EnvConfig envConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">  private Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">    public DataSource getDataSource() throws Exception &#123;</span><br><span class="line">        Properties props &#x3D; new Properties();</span><br><span class="line">        props.put(&quot;driverClassName&quot;, envConfig.getJdbc_driverClassName());</span><br><span class="line">        props.put(&quot;url&quot;, envConfig.getJdbc_url());</span><br><span class="line">        props.put(&quot;username&quot;, envConfig.getJdbc_username());</span><br><span class="line">        props.put(&quot;password&quot;, envConfig.getJdbc_password());</span><br><span class="line">        return DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">  public SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;dataSource&quot;) DataSource dataSource) throws Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SqlSessionFactoryBean fb &#x3D; new SqlSessionFactoryBean();</span><br><span class="line">    &#x2F;&#x2F; 指定数据源(这个必须有，否则报错)</span><br><span class="line">    fb.setDataSource(dataSource);</span><br><span class="line">    &#x2F;&#x2F; 下边两句仅仅用于*.xml文件，如果整个持久层操作不需要使用到xml文件的话（只用注解就可以搞定），则不加</span><br><span class="line">    fb.setTypeAliasesPackage(env.getProperty(&quot;mybatis.typeAliasesPackage&quot;));&#x2F;&#x2F; 指定基包</span><br><span class="line">    fb.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(env.getProperty(&quot;mybatis.mapperLocations&quot;)));&#x2F;&#x2F; 指定xml文件位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 分页插件</span><br><span class="line">    PageHelper pageHelper &#x3D; new PageHelper();</span><br><span class="line">    Properties props &#x3D; new Properties();</span><br><span class="line">    &#x2F;&#x2F; 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页</span><br><span class="line">        &#x2F;&#x2F;禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据</span><br><span class="line">    props.setProperty(&quot;reasonable&quot;, &quot;true&quot;);</span><br><span class="line">    &#x2F;&#x2F;指定数据库</span><br><span class="line">    props.setProperty(&quot;dialect&quot;, &quot;mysql&quot;);</span><br><span class="line">    &#x2F;&#x2F;支持通过Mapper接口参数来传递分页参数</span><br><span class="line">    props.setProperty(&quot;supportMethodsArguments&quot;, &quot;true&quot;);</span><br><span class="line">    &#x2F;&#x2F;总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page</span><br><span class="line">    props.setProperty(&quot;returnPageInfo&quot;, &quot;check&quot;);</span><br><span class="line">    props.setProperty(&quot;params&quot;, &quot;count&#x3D;countSql&quot;);</span><br><span class="line">    pageHelper.setProperties(props);</span><br><span class="line">    &#x2F;&#x2F; 添加插件</span><br><span class="line">    fb.setPlugins(new Interceptor[] &#123; pageHelper &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      return fb.getObject();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 配置事务管理器</span><br><span class="line">     * @param dataSource</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSourceTransactionManager transactionManager(DataSource dataSource) throws Exception &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来新写一个 controller 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.user.controller;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.damon.commons.Response;</span><br><span class="line">import com.damon.user.service.UserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年1月13日 下午3:31:07</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">  private static final Logger logger &#x3D; LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;getCurrentUser&quot;)</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&#39;admin&#39;)&quot;)</span><br><span class="line">    public Object getCurrentUser(Authentication authentication) &#123;</span><br><span class="line">      logger.info(&quot;test password mode&quot;);</span><br><span class="line">        return authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&#39;admin&#39;)&quot;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;auth&#x2F;admin&quot;)</span><br><span class="line">    public Object adminAuth() &#123;</span><br><span class="line">      logger.info(&quot;test password mode&quot;);</span><br><span class="line">        return &quot;Has admin auth!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value &#x3D; &quot;&#x2F;get&quot;)</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&#39;admin&#39;)&quot;)</span><br><span class="line">    &#x2F;&#x2F;@PreAuthorize(&quot;hasRole(&#39;admin&#39;)&quot;)&#x2F;&#x2F;无效</span><br><span class="line">    public Object get(Authentication authentication)&#123;</span><br><span class="line">        &#x2F;&#x2F;Authentication authentication &#x3D; SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        authentication.getCredentials();</span><br><span class="line">        OAuth2AuthenticationDetails details &#x3D; (OAuth2AuthenticationDetails)authentication.getDetails();</span><br><span class="line">        String token &#x3D; details.getTokenValue();</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;getUserInfo&quot;)</span><br><span class="line">    @PreAuthorize(&quot;hasAuthority(&#39;admin&#39;)&quot;)</span><br><span class="line">    public Response&lt;Object&gt; getUserInfo(Authentication authentication) &#123;</span><br><span class="line">      logger.info(&quot;test password mode&quot;);</span><br><span class="line">      Object principal &#x3D; authentication.getPrincipal();</span><br><span class="line">      if(principal instanceof String) &#123;</span><br><span class="line">        String username &#x3D; (String) principal;</span><br><span class="line">        return userService.getUserByUsername(username);</span><br><span class="line">      &#125;</span><br><span class="line">    return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上一个代码就完成了。接下来测试一下：</p><p>认证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST -d &quot;username&#x3D;admin&amp;password&#x3D;123456&amp;grant_type&#x3D;password&amp;client_id&#x3D;provider-service&amp;client_secret&#x3D;provider-service-123&quot; http:&#x2F;&#x2F;localhost:5555&#x2F;oauth-cas&#x2F;oauth&#x2F;token</span><br></pre></td></tr></table></figure><p>拿到token后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H &quot;Accept: application&#x2F;json&quot; -H &quot;Authorization:bearer f4a42baa-a24a-4342-a00b-32cb135afce9&quot; -X GET http:&#x2F;&#x2F;localhost:5555&#x2F;provider-service&#x2F;api&#x2F;user&#x2F;getCurrentUser</span><br></pre></td></tr></table></figure><p>这里用到了 5555 端口，这是一个网关服务，好吧，既然提到这个，我们接下来看网关吧，引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.damon&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;alibaba-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;name&gt;alibaba-gateway&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;swagger.version&gt;2.6.1&lt;&#x2F;swagger.version&gt;</span><br><span class="line">    &lt;xstream.version&gt;1.4.7&lt;&#x2F;xstream.version&gt;</span><br><span class="line">    &lt;pageHelper.version&gt;4.1.6&lt;&#x2F;pageHelper.version&gt;</span><br><span class="line">    &lt;fastjson.version&gt;1.2.51&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">    &lt;!-- &lt;springcloud.version&gt;2.1.8.RELEASE&lt;&#x2F;springcloud.version&gt; --&gt;</span><br><span class="line">    &lt;springcloud.version&gt;Greenwich.SR3&lt;&#x2F;springcloud.version&gt;</span><br><span class="line">    &lt;springcloud.kubernetes.version&gt;1.1.1.RELEASE&lt;&#x2F;springcloud.kubernetes.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;5.1.46&lt;&#x2F;mysql.version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alibaba-cloud.version&gt;2.1.1.RELEASE&lt;&#x2F;alibaba-cloud.version&gt;</span><br><span class="line">    &lt;springcloud.alibaba.version&gt;0.9.0.RELEASE&lt;&#x2F;springcloud.alibaba.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">      &lt;!-- &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;$&#123;alibaba-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">          &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;springcloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">        &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;!-- 不要依赖spring-boot-starter-web，会和spring-cloud-starter-gateway冲突，启动时异常 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--基于 reactive stream 的redis --&gt;</span><br><span class="line">    &lt;!-- &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;fastjson.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;19.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;&#x2F;finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;jvmArguments&gt;-Dfile.encoding&#x3D;UTF-8&lt;&#x2F;jvmArguments&gt;</span><br><span class="line">          &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.jacoco&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jacoco-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.7.8&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;prepare-agent&lt;&#x2F;goal&gt;</span><br><span class="line">              &lt;goal&gt;report&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">          &lt;&#x2F;execution&gt;</span><br><span class="line">        &lt;&#x2F;executions&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 自动生成代码 插件 begin --&gt;</span><br><span class="line">      &lt;!-- &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">          &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">          &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">          &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">          &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt; --&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>同样利用 Nacos 来发现服务。</p><p>相关配置在 Spring Cloud Kubernetes之实战三网关Gateway 一文中有讲过，这里的注册配置改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true #并且我们并没有给每一个服务单独配置路由 而是使用了服务发现自动注册路由的方式</span><br><span class="line">          lowerCaseServiceId: true</span><br><span class="line"></span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br></pre></td></tr></table></figure><p>前面用的是 kubernetes。</p><p>好了，网关配置好后，启动在 Nacos dashboard可以看到该服务，表示注册服务成功。接下来就可以利用其来调用其他服务了。具体 curl 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H &quot;Accept: application&#x2F;json&quot; -H &quot;Authorization:bearer f4a42baa-a24a-4342-a00b-32cb135afce9&quot; -X GET http:&#x2F;&#x2F;localhost:5555&#x2F;consumer-service&#x2F;api&#x2F;order&#x2F;getUserInfo</span><br></pre></td></tr></table></figure><p>Ok，到此鉴权中心、服务提供者、服务消费者、服务的注册与发现、配置中心等功能已完成。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>微服务架构设计之解耦合</title>
    <link href="http://www.damon8.cn/2020/07/23/micro-service02/"/>
    <id>http://www.damon8.cn/2020/07/23/micro-service02/</id>
    <published>2020-07-23T00:47:27.000Z</published>
    <updated>2020-07-23T00:48:38.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>背景<br>在各个 IT 行业的公司，我们会有大大小小的业务需求。当每个产品的业务功能越来越繁重时，也许用户的需求其实很简单，就想 One Click。但是，其实这一个按钮背后可能有很多的系统交互的操作在进行，这就涉及到业务数据操作的事务，涉及到每个系统的交互逻辑、先后顺序以及数据的一致性。这些都需要在设计的时候，需要考虑到的问题。</p><p>浅谈解耦合<br>业务系统的设计有多重要<br>在 今天被问微服务，这几点，让面试官刮目相看 一文中，我们讲过微服务设计时的方方面面。其中核心的六个字可能就是：“高内聚，低耦合”。高内聚，我们在那篇文章中已经讲的很清楚了。那么低耦合，这就涉及到我们业务系统的设计了。所谓低耦合，就是要每个业务模块之间的关系降低，减少冗余、重复、交叉的复杂度，模块功能划分也尽可能单一。这样，才能达到低耦合的目的。</p><p>在电商行业，主要的功能就是购物，至于其他的，都是为购物作铺垫、营销手段：直播、促销、发优惠券等。从用户的角度来说，其实网上 shopping 的逻辑很简单：选中想要买的，支付 money 就 OK 了。但对于网站，或者说运营服务平台来说，其逻辑远没有那么简单。下面是一个简单的购物流程图：</p><p>在这里，我们看到，就这个简单的购物流程，对于用户来说，可能操作很简单：打开网站，登录后选择商品和选中收货地址支付，坐等收货。对于平台，其实它也不简单，包括了很多系统：用户系统、商品系统、仓库系统、订单系统、支付系统、物流系统等等。</p><p>不能仅仅因为客户的需求，只是下了一个订单，买了一件商品，那系统就设计一个就认为能解决所有事情，这种认识，可能一开始就是错的。这样的业务设计后，不但导致业务系统的逻辑很笨重，也会导致代码的 code review 非常之复杂。我曾经就亲自目睹过：好几个事情都是一个代码块来处理，甚至都写到几千行，甚至上万行。这样的思路，虽然可以实现暂时的需求。但是从长远角度，这是一个很要命的事情：这样的设计不仅仅说 code review 很吃力，兼容新功能也是很麻烦的，让后来者无法下手。而且长期下去，会导致表的死锁，甚至进入系统瘫痪状态。</p><p>如何解耦合<br>业务的复杂性，其实根本原因是没有把其给拆解化。如果把整个的大业务拆解成若干个小的需求，那对于实现，就显得即一目了然，又能完美兼容其他任何问题。咱们还是拿购物说事，为什么每个购物 app 的系统设计都是这样的套路：选中商品后必须先加入购物车，选好地址信息，然后再统一去提交订单，最后才去支付 money 呢？难道系统直接简单点，选中后就支付不就解决了吗？那么网站何必搞得这么的麻烦，浪费时间、金钱，是为了折腾人？统统都不是。其实这也是网站开发最初想的事情，并不是说一件事情一口气能解决，就鲁莽的直接一口气解决。也许到时候，时间久了，人的精力没那么旺盛，变得虚弱的时候，那一口气就无法完成了。网站也是，一个需求也许可以简单的设计，就能完成。但是如果仅仅想着，现在简单的就完成，那是对以后的不负责任。以后可能会出现一些难以想象的事情，并且难以解决。</p><p>上面扯远了，回归到解耦合，解耦合其实有很多办法。比如 Java 中就有很多解决低耦合的方法：监听、观察模式、异步回调、定时任务、消息中间件等等。</p><p>1.1 监听<br>在Java 里，有很多设计模式：工厂模式、单例模式、建造者模式、代理模式、解释器模式、监听模式、观察者模式等等。其中，监听模式是低耦合解决的方案之一。</p><p>所谓监听模式：事件源经过事件的封装传给监听器，当事件源触发事件后，监听器接收到事件对象可以回调事件的方法。这其中涉及到三个信息：事件源、事件、监听器。</p><p>For example : 模拟某个服务启动后，发送通知信息。</p><p>事件源：</p><p>package com.damon.event;</p><p>import java.util.ArrayList;<br>import java.util.List;</p><p>public class Context {<br>  private static List<Listener> list=new ArrayList<Listener>();<br>  public static void addListener(Listener listener){<br>    list.add(listener);<br>  }<br>  public static void removeListener(Listener listener){<br>    list.remove(listener);<br>  }<br>  public static void sendMsg(Event event){<br>    for(Listener listener:list){<br>      listener.onChange(event);<br>    }<br>  }<br>}<br>事件：</p><p>package com.damon.event;</p><p>public class Event {<br>  public static final int INSTALLED = 1;<br>  public static final int STARTED = 2;<br>  public static final int RESOLVED = 3;<br>  public static final int STOPPED = 4;</p><p>  private int type;<br>  private Object source;</p><p>  public Event(int type, Object source) {<br>    this.type = type;<br>    this.source = source;<br>  }<br>  public int getType() {<br>    return type;<br>  }<br>  public Object getSource() {<br>    return source;<br>  }<br>}<br>监听器：</p><p>package com.damon.event;</p><p>public class MyListener implements Listener {</p><p>  @Override<br>  public void onChange(Event event) {<br>    switch(event.getType()){<br>      case Event.STARTED :<br>        System.out.println(“started…”);<br>        break;<br>      case Event.RESOLVED :<br>        System.out.println(“resolved…”);<br>        break;<br>      case Event.STOPPED :<br>        System.out.println(“stopped…”);<br>        break;<br>      default:<br>        throw new IllegalArgumentException();<br>    }<br>  }</p><p>}<br>测试：</p><p>package com.damon.event;</p><p>public class EventTest {</p><p>  public static void main(String[] args) {<br>    Listener listener = new MyListener();<br>    //加入监听者<br>    Context.addListener(listener);<br>    //启动完毕事件触发<br>    Context.sendMsg(new Event(Event.STARTED, new MyBundle()));<br>  }<br>}<br>在服务启动的操作中，我们不需要等待或者去处理，而是继续其他的逻辑，等到服务启动后，事件监听器监听后会进行相应的操作。这样，就不会在服务启动的过程中，需要等待其启动，因为其启动的时间是无法估量的。所以就很好的解决其耦合性的问题。避免用户在等待过程中，浪费了大量不应该由用户承担的时间成本。毕竟，对于用户来说，时间就是金钱。</p><p>1.2 观察者模式<br>观察者模式，听着跟上面讲的监听模式有点像。但是，还是有区别的。所谓观察者模式：观察者相当于事件监听者，被观察者相当于事件源和事件，执行逻辑时通知观察者即可触发其 update，同时可传被观察者和其参数。看着是不是像简化了事件监听机制的实现。其又可以叫发布-订阅模式，只有两个角色。</p><p>For example : 微信群里发布了一条公告：下午三点开会，有些在群里的人接收到了消息去开会，但是有些人未在群里，未收到公告，被领导主动喊去开会。</p><p>观察者：</p><p>public abstract class Observer {</p><pre><code>protected String name;protected Subject subject;public Observer(String name, Subject subject) {    this.name = name;    this.subject = subject;}public abstract void update();</code></pre><p>}<br>通知者：</p><p>public interface Subject {<br>    //增加<br>    public void attach(Observer observer);<br>    //删除<br>    public void detach(Observer observer);<br>    //通知<br>    public void notifyObservers();</p><pre><code>//状态public void setAction(String action);public String getAction();</code></pre><p>}<br>具体人：群管理员</p><p>public class WechatManager implements Subject {</p><pre><code>//同事好友列表private List&lt;Observer&gt; observers = new LinkedList&lt;&gt;();private String action;//添加@Overridepublic void attach(Observer observer) {    observers.add(observer);}//删除@Overridepublic void detach(Observer observer) {    observers.remove(observer);}//通知@Overridepublic void notifyObservers() {    for(Observer observer : observers) {        observer.update();    }}//状态@Overridepublic String getAction() {    return action;}@Overridepublic void setAction(String action) {    this.action = action;}</code></pre><p>}</p><p>具体观察者：群内人员与群外人员</p><p>public class InWechatRoomObserver extends Observer {</p><pre><code>public InWechatRoomObserver(String name, Subject subject) {    super(name, subject);}@Overridepublic void update() {    System.out.println(subject.getAction() + &quot;\n&quot; + name + &quot;收到公告，去开会了&quot;);}</code></pre><p>}<br>Test：</p><p>public class Test {<br>    public static void main(String[] args) {<br>        //群管理员为通知者<br>        WechatManager ma = new WechatManager();</p><pre><code>    InWechatRoomObserver in = new InWechatRoomObserver(&quot;tom&quot;, ma);    OutWechatRoomObserver out = new OutWechatRoomObserver(&quot;damon&quot;, ma);    //群管理员通知    ma.attach(out);    ma.attach(in);    //damon没在群内，未被通知到，所以被领导发现    ma.detach(out);    //老板回来了    ma.setAction(&quot;下午三点，大家在大会议室开会&quot;);    //发通知    ma.notifyObservers();}</code></pre><p>}<br>可以看到：当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象有待改变的时候，可考虑使用观察者模式。</p><p>即使用观察者模式的动机在于：在保证相关业务数据的一致性，我们不希望为了维持一致性而使各个逻辑紧密耦合，这样会给维护、扩展和重用都带来不便，而观察者模式所做的工作就是在解除耦合。</p><p>1.3 异步<br>异步，对于一个系统来说，异步操作可以很好的解耦合，因为每一步操作不需要等待结果即可继续往下进行，不论中间操作是否成功。在 Java 中，常见的异步注解：@Async，解决相应如果需要很多操作，或者操作时耗时很长，而异步进行处理来解决相关问题。有时需要注解 @EnableAsync 配合，然后弄一个异步线程池，来进行线程异步调度管理。</p><p>异步线程池初始化 bean ：</p><p>package com.damon.task;</p><p>import java.util.concurrent.Executor;<br>import java.util.concurrent.ThreadPoolExecutor;</p><p>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.scheduling.annotation.EnableAsync;<br>import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;<br>/**</p><ul><li>异步任务执行bean</li><li></li><li>@author Damon</li><li></li><li>/<br>@EnableAsync<br>@Configuration<br>public class TaskPoolConfig {</li></ul><pre><code>@Bean(&quot;taskExecutor&quot;)public Executor taskExecutor() {    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();    executor.setCorePoolSize(10);    executor.setMaxPoolSize(20);    executor.setQueueCapacity(200);    executor.setKeepAliveSeconds(60);    executor.setThreadNamePrefix(&quot;taskExecutor-&quot;);    executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());    return executor;}</code></pre><p>}<br>异步调度方法类：</p><p>package com.damon.task;</p><p>import org.apache.commons.lang.StringUtils;<br>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;</p><p>import org.springframework.http.*;<br>import org.springframework.scheduling.annotation.Async;<br>import org.springframework.stereotype.Component;</p><p>import java.math.BigDecimal;<br>import java.text.DecimalFormat;<br>import java.util.ArrayList;<br>import java.util.List;<br>import java.util.Random;<br>/**<br> *</p><ul><li>远程业务调用封装类</li><li></li><li>@author Damon</li><li>@date 2019年3月19日 下午3:29:45</li><li></li><li>/<br>@Component<br>public class TaskService {</li></ul><p>  private Logger logger = LoggerFactory.getLogger(getClass());</p><p>  public static Random random = new Random();</p><pre><code>/** * @description 异步任务计算耗时 * @param start 开始时间 * @param userId 用户id * @throws Exception */</code></pre><p>  @Async(“taskExecutor”)<br>  public void doTaskOne(long start, String userId) throws Exception {<br>    logger.info(“ 开始做任务一 to {}”, start);<br>    Thread.sleep(random.nextInt(10000));<br>    long end = System.currentTimeMillis();<br>    logger.info(“完成任务一，耗时：” + (end - start) + “毫秒”);<br>  }<br>}<br>异步可以常见于很多业务，比如异步发送短讯告诉用户，支付成功，异步发送日志到 ELK 系统等。</p><p>1.4 定时任务<br>对于定时任务，就是指制定系统的某个时刻或每隔一段时间去触发一些逻辑执行，这样来保证业务数据的一致性，消息的一致性，或者数据的实时性。</p><p>我们常在 Java 里用 @EnableScheduling 来引入定时器，然后定义一个异步定时调度 bean：</p><p>package com.damon.task;</p><p>import java.util.concurrent.Executor;<br>import java.util.concurrent.ThreadPoolExecutor;</p><p>import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.scheduling.annotation.AsyncConfigurer;<br>import org.springframework.scheduling.annotation.EnableAsync;<br>import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</p><p>/**<br> *</p><ul><li>异步任务执行bean</li><li>@author Damon</li><li>@date 2019年7月17日 上午10:35:56</li><li></li><li>/<br>@EnableAsync<br>@Configuration<br>public class TaskPoolConfig implements AsyncConfigurer {</li></ul><pre><code>@Bean(&quot;asyncTask&quot;)public Executor taskExecutor() {    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();    //线程池维护线程的最少数量    executor.setCorePoolSize(10);    //线程池维护线程的最大数量    executor.setMaxPoolSize(20);    //  缓存队列    executor.setQueueCapacity(200);    //允许的空闲时间    executor.setKeepAliveSeconds(60);    executor.setThreadNamePrefix(&quot;asyncTask-&quot;);    //对拒绝task的处理策略    executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());    return executor;}</code></pre><p>  @Override<br>  public Executor getAsyncExecutor() {<br>    return null;<br>  }</p><p>  @Override<br>  public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {<br>    return null;<br>  }<br>}<br>同时，定义一个执行类：</p><p>/**<br> *</p><ul><li>执行调度</li><li>@author Damon</li><li>@date 2019年3月19日 下午3:29:45</li><li></li><li>/<br>@Component<br>public class TaskSchedule {</li></ul><p>  private Logger logger = LoggerFactory.getLogger(TaskSchedule.class);</p><p>  @Autowired<br>  private RestTemplate restTemplate;</p><p>  @Autowired<br>    private Environment env;</p><p>  //@Scheduled(cron = “0 0/1 * * * ?”)//每分钟<br>  @Scheduled(cron = “0 * * * * ?”)//每分钟<br>  public void dynamicResourceListener() {<br>    logger.info(“resourceLimitHandle timer start”);<br>    String namespace = env.getProperty(“INFERENCE_JOB_NAMESPACE”);<br>    resourceListenerCallBack(namespace);<br>  }<br>  private void resourceListenerCallBack(String namespace) {</p><p>  }<br>}<br>其中，cron 从左到右（用空格隔开）：</p><p>秒 分 小时 月份中的日期 月份 星期中的日期 年份</p><p>上面的逻辑是每分钟去执行某个逻辑，这样的业务我们也可能存在，For example：股票系统中，建模等数据一般都是用 Oracle 来存储的，有时候业务可能是用 Mysql，这时，需要一个定时任务来跑数据，常见的叫 ETL，所以 ETL 的由来，就是这样来的。这样的操作肯定不能在发生业务操作时来进行，否则会因为业务数据的海量读取，导致 IO 的性能，甚至内存、CPU 都会飙升。再如统计某个业务场景的数据，都可以通过这种解耦合的方式来处理。</p><p>1.5 消息中间件<br>消息中间件的话，这个也是很多的，比如：redis、rocketmq、rabbitmq、zk等等。这些中间件技术都可以再一个复杂的业务流程起到至关重要得作用。</p><p>当我们需要做一个秒杀的功能时，可以用 redis 来作分布式锁，这个能起到缓冲系统压力的作用，同时可以做到秒杀锁。</p><p>当我们需要在处理一些业务逻辑时，需要告知其他方，这时候可以用 MQ 来作消息处理，防止处理流程的断续。</p><p>当我们需要发送一些消息给外部时，但又不希望耽误当前的业务处理，这时候，可以用 MQ 或 redis 来处理消息。</p><p>当我们。。。任何时候，都可以用消息中间件来作降低系统间的耦合。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅谈 Java 集合 | 底层源码解析</title>
    <link href="http://www.damon8.cn/2020/07/23/core-java02/"/>
    <id>http://www.damon8.cn/2020/07/23/core-java02/</id>
    <published>2020-07-23T00:41:01.000Z</published>
    <updated>2020-07-23T00:42:11.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Java 中，我们经常会使用到一些处理缓存数据的集合类，这些集合类都有自己的特点，今天主要分享下 Java 集合中几种经常用的 Map、List、Set。</p><p>目录</p><p>1、Map</p><p>一、背景</p><p>二、Map家族</p><p>三、HashMap、Hashtable等</p><p>四、HashMap 底层数据结构</p><p>2、List</p><p>一、List 包括的子类</p><p>二、ArrayList</p><p>三、ArrayList 源码分析</p><p>四、LinkedList</p><p>五、LinkedList 源码分析</p><p>3、Set</p><p>一、Set的实质</p><p>二、HashSet</p><p>三、TreeSet</p><p>01</p><p>集合 1：Map</p><p>背景</p><p>如果一个海量的数据中，需要查询某个指定的信息，这时候，可能会犹如大海捞针，这时候，可以使用 Map 来进行一个获取。因为 Map 是键值对集合。Map这种键值（key-value）映射表的数据结构，作用就是通过key能够高效、快速查找value。</p><p>举一个例子：</p><p>import java.util.HashMap;<br>import java.util.Map;<br>import java.lang.Object;</p><p>public class Test {<br>    public static void main(String[] args) {<br>        Object o = new Object();<br>        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();<br>        map.put(“aaa”, o); //将”aaa”和 Object实例映射并关联<br>        Student target = map.get(“aaa”); //通过key查找并返回映射的Obj实例<br>        System.out.println(target == o); //true，同一个实例<br>        Student another = map.get(“bbb”); //通过另一个key查找<br>        System.out.println(another); //未找到则返回null<br>    }<br>}<br>Map&lt;K, V&gt;是一种键-值映射表，当我们调用put(K key, V value)方法时，就把key和value做了映射并放入Map。当我们调用V get(K key)时，就可以通过key获取到对应的value。如果key不存在，则返回null。和List类似，Map也是一个接口，最常用的实现类是HashMap。</p><p>在 Map&lt;K, V&gt; 中，如果遍历的时候，其 key 是无序的，如何理解：</p><p>import java.util.HashMap;<br>import java.util.Map;<br>public class Test {<br>    public static void main(String[] args) {<br>        Map&lt;String, String&gt; map = new HashMap&lt;&gt;();<br>        map.put(“dog”, “a”);<br>        map.put(“pig”, “b”);<br>        map.put(“cat”, “c”);<br>        for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) {<br>            String key = entry.getKey();<br>            Integer value = entry.getValue();<br>            System.out.println(key + “ = “ + value);<br>        }<br>    }<br>}</p><p>//print<br>cat = c<br>dog = a<br>pig = b<br>从上面的打印结果来看，其是无序的，有序的答案可以在下面找到。<br>接下来我们分析下 Map ，首先我们先看看 Map 家族：</p><p>它的子孙下面有我们常用的 HashMap、LinkedHashMap，也有 TreeMap，另外还有继承 Dictionary、实现 Map 接口的 Hashtable。</p><p>下面针对各个实现类的特点来说明：</p><p>（1）HashMap：它根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有高效的访问速度，但遍历顺序却是不确定的。HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap 非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections 的静态方法 synchronizedMap 方法使 HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap(分段加锁)。</p><p>（2）LinkedHashMap：LinkedHashMap 是 HashMap 的一个子类，替 HashMap 完成了输入顺序的记录功能，所以要想实现像输出同输入顺序一致，应该使用 LinkedHashMap。</p><p>（3）TreeMap：TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用 TreeMap 时，key 必须实现Comparable 接口或者在构造 TreeMap 传入自定义的 Comparator，否则会在运行时抛出 ClassCastException 类型的异常。</p><p>（4）Hashtable：Hashtable继承 Dictionary 类，实现 Map 接口，很多映射的常用功能与 HashMap 类似，Hashtable 采用”拉链法”实现哈希表，不同的是它来自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，但并发性不如 ConcurrentHashMap，因为ConcurrentHashMap 引入了分段锁。Hashtable 使用 synchronized 来保证线程安全，在线程竞争激烈的情况下 HashTable 的效率非常低下。不建议在新代码中使用，不需要线程安全的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换。Hashtable 并不是像 ConcurrentHashMap 对数组的每个位置加锁，而是对操作加锁，性能较差。 </p><p>上面讲到了 HashMap、Hashtable、ConcurrentHashMap，接下来先看看 HashMap 的源码实现：</p><p>public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;<br>    implements Map&lt;K,V&gt;, Cloneable, Serializable {</p><pre><code>private static final long serialVersionUID = 362498820763181265L;/**  * 默认大小 16  */  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;  /**  * 最大容量是必须是2的幂30  */  static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;  /**  * 负载因子默认为0.75，hashmap每次扩容为原hashmap的2倍  */  static final float DEFAULT_LOAD_FACTOR = 0.75f;  /**  * 链表的最大长度为8，当超过8时会将链表装换为红黑树进行存储  */  static final int TREEIFY_THRESHOLD = 8;  /**   * The table, initialized on first use, and resized as   * necessary. When allocated, length is always a power of two.   * (We also tolerate length zero in some operations to allow   * bootstrapping mechanics that are currently not needed.)   */  transient Node&lt;K,V&gt;[] table;  static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {    final int hash;    final K key;    V value;    Node&lt;K,V&gt; next;    Node(int hash, K key, V value, Node&lt;K,V&gt; next) {        this.hash = hash;        this.key = key;        this.value = value;        this.next = next;    }    public final K getKey()        { return key; }    public final V getValue()      { return value; }    public final String toString() { return key + &quot;=&quot; + value; }    public final int hashCode() {        return Objects.hashCode(key) ^ Objects.hashCode(value);    }    public final V setValue(V newValue) {        V oldValue = value;        value = newValue;        return oldValue;    }    public final boolean equals(Object o) {        if (o == this)            return true;        if (o instanceof Map.Entry) {            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;            if (Objects.equals(key, e.getKey()) &amp;&amp;                Objects.equals(value, e.getValue()))                return true;        }        return false;    }}</code></pre><p>从上面看到，HashMap 主要是数组 + 链表结构组成。HashMap 扩容是成倍的扩容。为什么是成倍，而不是1.5或其他的倍数呢？既然 HashMap 在进行 put 的时候针对 key 做了一些列的 hash 以及与运算就是为了减少碰撞的一个概率，如果扩容后的大小不是2的n次幂的话，之前做的不是白费了吗？</p><p>else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>                newThr = oldThr &lt;&lt; 1;<br>扩容后会重新把原来的所有的数据 key 的 hash 重新计算放入扩容后的数组里面去。为什么要这样做？因为不同的数组大小通过 key 的 hash 出来的下标是不一样的。还有，数组长度保持2的次幂，length-1的低位都为1，会使得获得的数组索引 index 更加均匀。</p><p>为何说 Hashmap 是非线程安全的呢？原因：当多线程并发时，检测到总数量超过门限值的时候就会同时调用 resize 操作，各自生成新的数组并rehash 后赋给底层数组，结果最终只有最后一个线程生成的新数组被赋给table 变量，其他线程均会丢失。而且当某些线程已经完成赋值而其他线程刚开始的时候，就会用已经被赋值的 table 作为原始数组，这样也是有问题滴。</p><p>疑问：</p><p> HashMap 中某个 entry 链过长，查询时间达到最大限度，如何处理呢？这个在 Jdk1.8，当链表过长，把链表转成红黑树(TreeNode)实现了更高的时间复杂度的查找。</p><p>HashMap中哈希算法实现？我们使用put(key,value)方法往HashMap中添加元素时，先计算得到key的 Hash 值，然后通过Key高16位与低16位相异或（高16位不变），然后与数组大小-1相与，得到了该元素在数组中的位置，流程：</p><p>延伸：如果一个对象中，重写了equals()而不重写hashcode()会发生什么样的问题？尽管我们在进行 get 和 put 操作的时候，使用的key从逻辑上讲是等值的（通过equals比较是相等的），但由于没有重写hashCode()，所以put操作时，key(hashcode1)–&gt;hash–&gt;indexFor–&gt;index，而通过key取出value的时候 key(hashcode2)–&gt;hash–&gt;indexFor–&gt;index，由于hashcode1不等于hashcode2，导致没有定位到一个数组位置而返回逻辑上错误的值null。所以，在重写equals()的时候，必须注意重写hashCode()，同时还要保证通过equals()判断相等的两个对象，调用hashCode方法要返回同样的整数值。而如果equals判断不相等的两个对象，其hashCode也可以相同的（只不过会发生哈希冲突，应尽量避免）。（1. hash相同，但key不一定相同：key1、key2产生的hash很有可能是相同的，如果key真的相同，就不会存在散列链表了，散列链表是很多不同的键算出的hash值和index相同的 2. key相同，经过两次hash，其hash值一定相同）</p><p>ConcurrentHashMap 采用了分段锁技术来将数据分成一段段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><p>02</p><p>集合 2：List</p><p>集合 List 是接口 Collection 的子接口，也是大家经常用到的数据缓存。List 进行了元素排序，且允许存放相同的元素，即有序，可重复。我们先看看有哪些子类：</p><p>可以看到，其中包括比较多的子类，我们常用的是 ArrayList、LinkedList:</p><p>ArrayList：</p><p>优点：操作读取操作效率高，基于数组实现的，可以为null值，可以允许重复元素，有序，异步。</p><p>缺点：由于它是由动态数组实现的，不适合频繁的对元素的插入和删除操作，因为每次插入和删除都需要移动数组中的元素。</p><p>LinkedList：</p><p>优点：LinkedList由双链表实现，增删由于不需要移动底层数组数据，其底层是链表实现的，只需要修改链表节点指针，对元素的插入和删除效率较高。</p><p>缺点：遍历效率较低。HashMap和双链表也有关系。</p><p>ArrayList 底层是一个变长的数组，基本上等同于Vector，但是ArrayList对writeObjec() 和 readObject()方法实现了同步。</p><p>transient Object[] elementData;</p><p>/**</p><ul><li>Constructs an empty list with an initial capacity of ten.</li><li>/<br>public ArrayList() {<br>  this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>}<br>If multiple threads access an <tt>ArrayList</tt> instance<br>concurrently, and at least one of the threads modifies<br>the list structurally, it <i>must</i> be synchronized externally.<br>(A structural modification is any operation that adds or deletes one or more elements, or explicitly resizes the backing array; merely setting the value of an element is not a structural modification.)<br>This is typically accomplished by synchronizing<br>on some object that naturally encapsulates the list.<br>从注释，我们知道 ArrayList 是线程不安全的，多线程环境下要通过外部的同步策略后使用，比如List list = Collections.synchronizedList(new ArrayList(…))。</li></ul><p>源码实现：</p><p>private void writeObject(java.io.ObjectOutputStream s)<br>  throws java.io.IOException{<br>  // Write out element count, and any hidden stuff<br>  int expectedModCount = modCount;<br>  s.defaultWriteObject();</p><p>  // Write out size as capacity for behavioural compatibility with clone()<br>  s.writeInt(size);</p><p>  // Write out all elements in the proper order.<br>  for (int i=0; i&lt;size; i++) {<br>    s.writeObject(elementData[i]);<br>  }</p><p>  if (modCount != expectedModCount) {<br>    throw new ConcurrentModificationException();<br>  }<br>}</p><p>/**</p><ul><li><p>Reconstitute the <tt>ArrayList</tt> instance from a stream (that is,</p></li><li><p>deserialize it).</p></li><li><p>/<br>private void readObject(java.io.ObjectInputStream s)<br>throws java.io.IOException, ClassNotFoundException {<br>elementData = EMPTY_ELEMENTDATA;</p><p>// Read in size, and any hidden stuff<br>s.defaultReadObject();</p><p>// Read in capacity<br>s.readInt(); // ignored</p><p>if (size &gt; 0) {<br>  // be like clone(), allocate array based upon size not capacity<br>  int capacity = calculateCapacity(elementData, size);<br>  SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);<br>  ensureCapacityInternal(size);</p><p>  Object[] a = elementData;<br>  // Read in all elements in the proper order.<br>  for (int i=0; i&lt;size; i++) {</p><pre><code>a[i] = s.readObject();</code></pre><p>  }<br>}<br>}<br>当调用add函数时，会调用ensureCapacityInternal函数进行扩容，每次扩容为原来大小的1.5倍，但是当第一次添加元素或者列表中元素个数小于10的话，列表容量默认为10。</p></li></ul><p>/**</p><ul><li>Default initial capacity.</li><li>/<br>private static final int DEFAULT_CAPACITY = 10;</li></ul><p>/**</p><ul><li>Shared empty array instance used for empty instances.</li><li>/<br>private static final Object[] EMPTY_ELEMENTDATA = {};</li></ul><p>/**</p><ul><li>Shared empty array instance used for default sized empty instances.</li><li>/<br>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</li></ul><p>/**</p><ul><li>The array buffer into which the elements of the ArrayList are stored.</li><li>/<br>transient Object[] elementData; // non-private to simplify nested class access</li></ul><p>/**</p><ul><li>The size of the ArrayList (the number of elements it contains).</li><li>/<br>private int size;<br>扩容原理：根据当前数组的大小，判断是否小于默认值10，如果大于，则需要扩容至当前数组大小的1.5倍，重新将新扩容的数组数据copy只当前elementData，最后将传入的元素赋值给size++位置。</li></ul><p>private void ensureCapacityInternal(int minCapacity) {<br>  ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>}</p><p>private void ensureExplicitCapacity(int minCapacity) {<br>  modCount++;</p><p>  // overflow-conscious code<br>  if (minCapacity - elementData.length &gt; 0)<br>    grow(minCapacity);<br>}</p><p>/**</p><ul><li>The maximum size of array to allocate.</li><li>Some VMs reserve some header words in an array.</li><li>Attempts to allocate larger arrays may result in</li><li>OutOfMemoryError: Requested array size exceeds VM limit</li><li>/<br>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</li></ul><p>/**</p><ul><li>Increases the capacity to ensure that it can hold at least the</li><li>number of elements specified by the minimum capacity argument.</li><li></li><li>@param minCapacity the desired minimum capacity</li><li>/<br>private void grow(int minCapacity) {<br>// overflow-conscious code<br>int oldCapacity = elementData.length;<br>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);<br>if (newCapacity - minCapacity &lt; 0)<br>  newCapacity = minCapacity;<br>if (newCapacity - MAX_ARRAY_SIZE &gt; 0)<br>  newCapacity = hugeCapacity(minCapacity);<br>// minCapacity is usually close to size, so this is a win:<br>elementData = Arrays.copyOf(elementData, newCapacity);<br>}</li></ul><p>private static int hugeCapacity(int minCapacity) {<br>  if (minCapacity &lt; 0) // overflow<br>    throw new OutOfMemoryError();<br>  return (minCapacity &gt; MAX_ARRAY_SIZE) ?<br>    Integer.MAX_VALUE :<br>    MAX_ARRAY_SIZE;<br>}<br>接下来我们分析为什么 ArrayList 增删很慢，查询很快呢？</p><p>public boolean add(E e) {<br>  ensureCapacityInternal(size + 1);  // Increments modCount!!<br>  elementData[size++] = e;<br>  return true;<br>}<br>根据源码可知，当调用add函数时，首先要调用ensureCapacityInternal(size + 1)，该函数是进行自动扩容的，效率低的原因也就是在这个扩容上了，每次新增都要对现有的数组进行一次1.5倍的扩大，数组间值的copy等，最后等扩容完毕，有空间位置了，将数组size+1的位置放入元素e，实现新增。</p><p>删除时源码：</p><p>/**</p><ul><li><p>Removes the element at the specified position in this list.</p></li><li><p>Shifts any subsequent elements to the left (subtracts one from their</p></li><li><p>indices).</p></li><li></li><li><p>@param index the index of the element to be removed</p></li><li><p>@return the element that was removed from the list</p></li><li><p>@throws IndexOutOfBoundsException {@inheritDoc}</p></li><li><p>/<br>public E remove(int index) {<br>rangeCheck(index);</p><p>modCount++;<br>E oldValue = elementData(index);</p><p>int numMoved = size - index - 1;<br>if (numMoved &gt; 0)<br>  System.arraycopy(elementData, index+1, elementData, index,</p><pre><code>numMoved);</code></pre><p>elementData[–size] = null;</p><p>return oldValue;<br>}<br>在删除index位置的元素时，要先调用 rangeCheck(index) 进行 index 的check，index 要超过当前个数，则判定越界，抛出异常，throw new IndexOutOfBoundsException(outOfBoundsMsg(index))，其他函数也有用到如：get(int index)，set(int index, E element) 等后面删除重点在于计算删除的index是末尾还是中间位置，末尾直接–，然后置空完事，如果是中间位置，那就要进行一个数组间的copy，重新组合数组数据了，这一就比较耗性能了。</p></li></ul><p>而查询：</p><p>/**</p><ul><li><p>Returns the element at the specified position in this list.</p></li><li></li><li><p>@param  index index of the element to return</p></li><li><p>@return the element at the specified position in this list</p></li><li><p>@throws IndexOutOfBoundsException {@inheritDoc}</p></li><li><p>/<br>public E get(int index) {<br>rangeCheck(index);</p><p>return elementData(index);<br>}<br>获取指定index的元素，首先调用rangeCheck(index)进行index的check，通过后直接获取数组的下标index获取数据，没有任何多余操作，高效。</p></li></ul><p>LinkedList 继承AbstractSequentialList和实现List接口，新增接口如下：</p><p>addFirst(E e):将指定元素添加到刘表开头</p><p>addLast(E e):将指定元素添加到列表末尾</p><p>descendingIterator():以逆向顺序返回列表的迭代器</p><p>element():获取但不移除列表的第一个元素</p><p>getFirst():返回列表的第一个元素</p><p>getLast():返回列表的最后一个元素</p><p>offerFirst(E e):在列表开头插入指定元素</p><p>offerLast(E e):在列表尾部插入指定元素</p><p>peekFirst():获取但不移除列表的第一个元素</p><p>peekLast():获取但不移除列表的最后一个元素</p><p>pollFirst():获取并移除列表的最后一个元素</p><p>pollLast():获取并移除列表的最后一个元素</p><p>pop():从列表所表示的堆栈弹出一个元素</p><p>push(E e);将元素推入列表表示的堆栈</p><p>removeFirst():移除并返回列表的第一个元素</p><p>removeLast():移除并返回列表的最后一个元素</p><p>removeFirstOccurrence(E e):从列表中移除第一次出现的指定元素</p><p>removeLastOccurrence(E e):从列表中移除最后一次出现的指定元素<br>LinkedList 的实现原理：LinkedList 的实现是一个双向链表。在 Jdk 1.6中是一个带空头的循环双向链表，而在 Jdk1.7+ 中则变为不带空头的双向链表，这从源码中可以看出：</p><p>//jdk 1.6<br>private transient Entry<E> header = new Entry<E>(null, null, null);<br>private transient int size = 0;</p><p>//jdk 1.7<br>transient int size = 0;</p><p>transient Node<E> first;</p><p>transient Node<E> last;<br>从源码注释看，LinkedList不是线程安全的，多线程环境下要通过外部的同步策略后使用，比如List list = Collections.synchronizedList(new LinkedList(…))：</p><p> If multiple threads access a linked list concurrently,<br> and at least one of the threads modifies the list structurally,<br>  it <i>must</i> be synchronized externally.<br>  (A structural modification is any operation that adds or<br>  deletes one or more elements; merely setting the value of<br>  an element is not a structural modification.)<br>  This is typically accomplished by synchronizing on some object<br>   that naturally encapsulates the list.<br>为什么说 LinkedList 增删很快呢？</p><p>/**</p><ul><li>Appends the specified element to the end of this list.</li><li></li><li><p>This method is equivalent to {@link #addLast}.</li><li></li><li>@param e element to be appended to this list</li><li>@return {@code true} (as specified by {@link Collection#add})</li><li>/<br>public boolean add(E e) {<br>linkLast(e);<br>return true;<br>}<br>/**</li><li>Links e as last element.</li><li>/<br>void linkLast(E e) {<br>final Node<E> l = last;<br>final Node<E> newNode = new Node&lt;&gt;(l, e, null);<br>last = newNode;<br>if (l == null)<br>  first = newNode;<br>else<br>  l.next = newNode;<br>size++;<br>modCount++;<br>}<br>从注释看，add函数实则是将元素append至list的末尾，具体过程是：新建一个Node节点，其中将后面的那个节点last作为新节点的前置节点，后节点为null；将这个新Node节点作为整个list的后节点，如果之前的后节点l为null，将新建的Node作为list的前节点，否则，list的后节点指针指向新建Node，最后size+1，当前llist操作数modCount+1。</li></ul><p>在add一个新元素时，LinkedList 所关心的重要数据，一共两个变量，一个first，一个last，这大大提升了插入时的效率，且默认是追加至末尾，保证了顺序。</p><p>再看删除一个元素：</p><p>/**</p><ul><li>Removes the element at the specified position in this list.  Shifts any</li><li>subsequent elements to the left (subtracts one from their indices).</li><li>Returns the element that was removed from the list.</li><li></li><li>@param index the index of the element to be removed</li><li>@return the element previously at the specified position</li><li>@throws IndexOutOfBoundsException {@inheritDoc}</li><li>/<br>public E remove(int index) {<br>checkElementIndex(index);<br>return unlink(node(index));<br>}</li></ul><p>/**</p><ul><li><p>Unlinks non-null node x.</p></li><li><p>/<br>E unlink(Node<E> x) {<br>// assert x != null;<br>final E element = x.item;<br>final Node<E> next = x.next;<br>final Node<E> prev = x.prev;</p><p>if (prev == null) {<br>  first = next;<br>} else {<br>  prev.next = next;<br>  x.prev = null;<br>}</p><p>if (next == null) {<br>  last = prev;<br>} else {<br>  next.prev = prev;<br>  x.next = null;<br>}</p><p>x.item = null;<br>size–;<br>modCount++;<br>return element;<br>}<br>删除指定index的元素，删除之前要调用checkElementIndex(index)去check一下index是否存在元素，如果不存在抛出throw new IndexOutOfBoundsException(outOfBoundsMsg(index));越界错误，同样这个check方法也是很多方法用到的，如：get(int index)，set(int index, E element)等。</p></li></ul><p>注释讲，删除的是非空的节点，这里的node节点也是通过node(index)获取的，分别根据当前Node得到链表上的关节要素：element、next、prev，分别对 prev 和 next 进行判断，以便对当前 list 的前后节点进行重新赋值，frist和last，最后将节点的element置为null，个数-1，操作数+1。根据以上分析，remove节点关键的变量，是Node实例本身的局部变量 next、prev、item 重新构建内部变量指针指向，以及list的局部变量first和last保证节点相连。这些变量的操作使得其删除动作也很高效。</p><p>而对于查询：</p><p>/**</p><ul><li>Returns the element at the specified position in this list.</li><li></li><li>@param index index of the element to return</li><li>@return the element at the specified position in this list</li><li>@throws IndexOutOfBoundsException {@inheritDoc}</li><li>/<br>public E get(int index) {<br>checkElementIndex(index);<br>return node(index).item;<br>}<br>获取指定index位置的node，获取之前还是调用checkElementIndex(index)进行检查元素，之后通过node(index)获取元素，上文有提到，node的获取是遍历得到的元素，所以相对性能效率会低一些。</li></ul><p>03</p><p>集合 3：Set</p><p>Set 集合在我们日常中，用到的也比较多。用于存储不重复的元素集合，它主要提供下面几种方法：</p><p>将元素添加进Set<E>：add(E e)</p><p>将元素从Set<E>删除：remove(Object e)</p><p>判断是否包含元素：contains(Object e)</p><p>这几种方法返回结果都是 boolean值，即返回是否正确或成功。Set 相当于只存储key、不存储value的Map。我们经常用 Set 用于去除重复元素，因为 重复add同一个 key 时，会返回 false。</p><p>public HashSet() {<br>    map = new HashMap&lt;&gt;();<br>}</p><p>public TreeSet() {<br>    this(new TreeMap&lt;E,Object&gt;());<br>}<br>Set 子孙中主要有：HashSet、SortedSet。HashSet是无序的，因为它实现了Set接口，并没有实现SortedSet接口，而TreeSet 实现了SortedSet接口，从而保证元素是有序的。</p><p>HashSet 添加后输出也是无序的：</p><p>public class Test {<br>    public static void main(String[] args) {<br>        Set<String> set = new HashSet&lt;&gt;();<br>        set.add(“2”);<br>        set.add(“6”);<br>        set.add(“44”);<br>        set.add(“5”);<br>        for (String s : set) {<br>            System.out.println(s);<br>        }<br>    }<br>}</p><p>//print<br>44<br>2<br>5<br>6<br>看到输出的顺序既不是添加的顺序，也不是String排序的顺序，在不同版本的JDK中，这个顺序也可能是不同的。</p><p>换成TreeSet：</p><p>public static void main(String[] args) {<br>  Set<String> set = new TreeSet&lt;&gt;();<br>      set.add(“2”);<br>      set.add(“6”);<br>      set.add(“44”);<br>      set.add(“5”);<br>      for (String s : set) {<br>          System.out.println(s);<br>      }<br> }<br>//print<br>2<br>44<br>5<br>6</p><p>在遍历TreeSet时，输出就是有序的，不是添加时的顺序，而是元素的排序顺序。</p><p>注意：添加的元素必须实现Comparable接口，如果没有实现Comparable接口，那么创建TreeSet时必须传入一个Comparator对象。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>大佬整理的mysql规范，分享给大家</title>
    <link href="http://www.damon8.cn/2020/07/23/mysql-norm/"/>
    <id>http://www.damon8.cn/2020/07/23/mysql-norm/</id>
    <published>2020-07-23T00:21:08.000Z</published>
    <updated>2020-07-23T07:50:50.370Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="最近涉及数据库相关操作较多，公司现有规范也不是太全面，就根据网上各路大神的相关规范，整理了一些自用的规范用法，万望指正。"><a href="#最近涉及数据库相关操作较多，公司现有规范也不是太全面，就根据网上各路大神的相关规范，整理了一些自用的规范用法，万望指正。" class="headerlink" title="最近涉及数据库相关操作较多，公司现有规范也不是太全面，就根据网上各路大神的相关规范，整理了一些自用的规范用法，万望指正。"></a>最近涉及数据库相关操作较多，公司现有规范也不是太全面，就根据网上各路大神的相关规范，整理了一些自用的规范用法，万望指正。</h5><h3 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h3><h4 id="dev-开发环境"><a href="#dev-开发环境" class="headerlink" title="dev: 开发环境"></a>dev: 开发环境</h4><p>开发可读写，可修改表结构。开发人员可以修改表结构，可以随意修改其中的数据但是需要保证不影响其他开发同事。</p><h4 id="test-测试环境"><a href="#test-测试环境" class="headerlink" title="test: 测试环境"></a>test: 测试环境</h4><p>开发可读写，开发人员可以通过工具修改表结构。</p><h4 id="online-线上环境"><a href="#online-线上环境" class="headerlink" title="online: 线上环境"></a>online: 线上环境</h4><p>开发人员不允许直接在线上环境进行数据库操作，如果需要操作必须找DBA进行操作并进行相应记录，禁止进行压力测试。<br>重点的问题，各个环境的mysql服务器对应的用户权限，一定要做到权限划分明确，有辨识度，能具体区分业务场景等。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="基本命名规则"><a href="#基本命名规则" class="headerlink" title="基本命名规则"></a>基本命名规则</h4><p>使用有意义的英文词汇，词汇中间以下划线分隔。（不要用拼音）<br>只能使用英文字母，数字，下划线，并以英文字母开头。<br>库、表、字段全部采用小写，不要使用驼峰式命名。<br>避免用ORACLE、MySQL的保留字，如desc，关键字如index。<br>命名禁止超过32个字符，须见名之意，建议使用名词不是动词<br>数据库，数据表一律使用前缀<br>临时库、表名必须以tmp为前缀，并以日期为后缀<br>备份库、表必须以bak为前缀，并以日期为后缀<br>为什么库、表、字段全部采用小写？<br>在 MySQL 中，数据库和表对就于那些目录下的目录和文件。因而，操作系统的敏感性决定数据库和表命名的大小写敏感。<br>Windows下是不区分大小写的。<br>Linux下大小写规则<br>数据库名与表名是严格区分大小写的；<br>表的别名是严格区分大小写的；<br>列名与列的别名在所有的情况下均是忽略大小写的；<br>变量名也是严格区分大小写的；<br>如果已经设置了驼峰式的命名如何解决？需要在MySQL的配置文件my.ini中增加 lower_case_table_names = 1即可。</p><h4 id="表命名"><a href="#表命名" class="headerlink" title="表命名"></a>表命名</h4><p>同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义。所有日志表均以 log_ 开头</p><h4 id="字段命名"><a href="#字段命名" class="headerlink" title="字段命名"></a>字段命名</h4><p>表达其实际含义的英文单词或简写。布尔意义的字段以is_作为前缀，后接动词过去分词。<br>各表之间相同意义的字段应同名。各表之间相同意义的字段，以去掉模块前缀的表名_字段名命名。<br>外键字段用表名_字段名表示其关联关系。<br>表的主键一般都约定成为id，自增类型，是别的表的外键均使用xxx_id的方式来表明。</p><h4 id="索引命名"><a href="#索引命名" class="headerlink" title="索引命名"></a>索引命名</h4><p>非唯一索引必须按照“idx_字段名称_字段名称[_字段名]”进行命名<br>唯一索引必须按照“uniq_字段名称_字段名称[_字段名]”进行命名</p><h4 id="约束命名"><a href="#约束命名" class="headerlink" title="约束命名"></a>约束命名</h4><p>主键约束：pk_表名称。<br>唯一约束：uk_表名称_字段名。（应用中需要同时有唯一性检查逻辑。）</p><h4 id="表设计规范"><a href="#表设计规范" class="headerlink" title="表设计规范"></a>表设计规范</h4><p>表引擎取决于实际应用场景；日志及报表类表建议用myisam，与交易，审核，金额相关的表建议用innodb引擎。如无说明，建表时一律采用innodb引擎<br>默认使用utf8mb4字符集，数据库排序规则使用utf8mb4_general_ci，（由于数据库定义使用了默认，数据表可以不再定义，但为保险起见，建议都写上<br>为什么字符集不选择utf8，排序规则不使用utf8_general_ci<br>采用utf8编码的MySQL无法保存占位是4个字节的Emoji表情。为了使后端的项目，全面支持客户端输入的Emoji表情，升级编码为utf8mb4是最佳解决方案。对于JDBC连接串设置了characterEncoding为utf8或者做了上述配置仍旧无法正常插入emoji数据的情况，需要在代码中指定连接的字符集为utf8mb4。<br>所有表、字段均应用 comment 列属性来描述此表、字段所代表的真正含义，如枚举值则建议将该字段中使用的内容都定义出来。<br>如无说明，表中的第一个id字段一定是主键且为自动增长，禁止在非事务内作为上下文作为条件进行数据传递。禁止使用varchar类型作为主键语句设计。<br>如无说明，表必须包含create_time和modify_time字段，即表必须包含记录创建时间和修改时间的字段<br>如无说明，表必须包含is_del，用来标示数据是否被删除，原则上数据库数据不允许物理删除。<br>用尽量少的存储空间来存数一个字段的数据<br>能用int的就不用char或者varchar<br>能用tinyint的就不用int<br>使用UNSIGNED存储非负数值。<br>不建议使用ENUM、SET类型，使用TINYINT来代替<br>使用短数据类型，比如取值范围为0-80时，使用TINYINT UNSIGNED<br>存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE<br>时间字段，除特殊情况一律采用int来记录unix_timestamp<br>存储年使用YEAR类型。<br>存储日期使用DATE类型。<br>存储时间（精确到秒）建议使用TIMESTAMP类型，因为TIMESTAMP使用4字节，DATETIME使用8个字节。<br>建议使用INT UNSIGNED存储IPV4。<br>尽可能不使用TEXT、BLOB类型<br>禁止在数据库中使用VARBINARY、BLOB存储图片、文件等。建议使用其他方式存储（TFS/SFS），MySQL只保存指针信息。<br>单条记录大小禁止超过8k（列长度(中文)_3(UTF8)+列长度(英文)_1）</p><h5 id="datetime与timestamp有什么不同？"><a href="#datetime与timestamp有什么不同？" class="headerlink" title="datetime与timestamp有什么不同？"></a>datetime与timestamp有什么不同？</h5><p>相同点：<br>TIMESTAMP列的显示格式与DATETIME列相同。显示宽度固定在19字符，并且格式为YYYY-MM-DD HH:MM:SS。</p><p>不同点：<br>TIMESTAMP<br>4个字节储存，时间范围：1970-01-01 08:00:01 ~ 2038-01-19 11:14:07 值以UTC格式保存，涉及时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区。<br>datetime 8个字节储存，时间范围：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59<br>实际格式储存，与时区无关</p><p>如何使用TIMESTAMP的自动赋值属性？<br>将当前时间作为ts的默认值：ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP。当行更新时，更新ts的值：ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP。<br>可以将1和2结合起来：ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP。<br>如何使用INT UNSIGNED存储ip？<br>使用INT UNSIGNED而不是char(15)来存储ipv4地址，通过MySQL函数inet_ntoa和inet_aton来进行转化。Ipv6地址目前没有转化函数，需要使用DECIMAL或者两个bigINT来存储。<br>如无备注，所有字段都设置NOT NULL，并设置默认值；<br>禁止在数据库中存储明文密码<br>如无备注，所有的布尔值字段，如is_hot、is_deleted，都必须设置一个默认值，并设为0；<br>如无备注，排序字段order_id在程序中默认使用降序排列；<br>整形定义中不添加长度，比如使用INT，而不是INT[4]<br>INT[M]，M值代表什么含义？<br>注意数值类型括号后面的数字只是表示宽度而跟存储范围没有关系。很多人他们认为INT(4)和INT(10)其取值范围分别是 (-9999到9999)和(-9999999999到9999999999)，这种理解是错误的。其实对整型中的 M值与 ZEROFILL 属性结合使用时可以实现列值等宽。不管INT[M]中M值是多少，其取值范围还是 (-2147483648到2147483647 有符号时)，(0到4294967295无符号时)。<br>显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示。当结合可选扩展属性ZEROFILL使用时默认补充的空格用零代替。例如：对于声明为INT(5) ZEROFILL的列，值4检索为00004。请注意如果在整数列保存超过显示宽度的一个值，当MySQL为复杂联接生成临时表时会遇到问题，因为在这些情况下MySQL相信数据适合原列宽度，如果为一个数值列指定ZEROFILL, MySQL自动为该列添加UNSIGNED属性。<br>使用VARBINARY存储大小写敏感的变长字符串<br>什么时候用CHAR，什么时候用VARCHAR？<br>CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。CHAR和VARCHAR类型声明的长度表示你想要保存的最大字符数。例如，CHAR(30)可以占用30个字符。<br>CHAR列的长度固定为创建表时声明的长度。长度可以为从0到255的任何值。当保存CHAR值时，在它们的右边填充空格以达到指定的长度。当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换。<br>VARCHAR列中的值为可变长字符串。长度可以指定为0到65,535之间的值。(VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532字节）。同CHAR对比，VARCHAR值保存时只保存需要的字符数，另加一个字节来记录长度(如果列声明的长度超过255，则使用两个字节)。VARCHAR值保存时不进行填充。当值保存和检索时尾部的空格仍保留，符合标准SQL。<br>char适合存储用户密码的MD5哈希值，它的长度总是一样的。对于经常改变的值，char也好于varchar,因为固定长度的行不容易产生碎片，对于很短的列，char的效率也高于varchar。char(1)字符串对于单字节字符集只会占用一个字节，但是varchar(1)则会占用2个字节，因为1个字节用来存储长度信息。</p><h4 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h4><p>MySQL的查询速度依赖良好的索引设计，因此索引对于高性能至关重要。合理的索引会加快查询速度（包括UPDATE和DELETE的速度，MySQL会将包含该行的page加载到内存中，然后进行UPDATE或者DELETE操作），不合理的索引会降低速度。MySQL索引查找类似于新华字典的拼音和部首查找，当拼音和部首索引不存在时，只能通过一页一页的翻页来查找。当MySQL查询不能使用索引时，MySQL会进行全表扫描，会消耗大量的IO。索引的用途：去重、加速定位、避免排序、覆盖索引。</p><h4 id="什么是覆盖索引"><a href="#什么是覆盖索引" class="headerlink" title="什么是覆盖索引"></a>什么是覆盖索引</h4><p>InnoDB存储引擎中，secondary index（非主键索引）中没有直接存储行地址，存储主键值。如果用户需要查询secondary index中所不包含的数据列时，需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引的概念就是查询可以通过在一个索引中完成，覆盖索引效率会比较高，主键查询是天然的覆盖索引。合理的创建索引以及合理的使用查询语句，当使用到覆盖索引时可以获得性能提升。比如SELECT email,uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid,email)，以获得性能提升。</p><h4 id="索引的基本规范"><a href="#索引的基本规范" class="headerlink" title="索引的基本规范"></a>索引的基本规范</h4><p>索引数量控制，单张表中索引数量不超过5个，单个索引中的字段数不超过5个。<br>综合评估数据密度和分布</p><h4 id="考虑查询和更新比例"><a href="#考虑查询和更新比例" class="headerlink" title="考虑查询和更新比例"></a>考虑查询和更新比例</h4><p>为什么一张表中不能存在过多的索引？<br>InnoDB的secondary index使用b+tree来存储，因此在UPDATE、DELETE、INSERT的时候需要对b+tree进行调整，过多的索引会减慢更新的速度。<br>对字符串使用前缀索引，前缀索引长度不超过8个字符，建议优先考虑前缀索引，必要时可添加伪列并建立索引。<br>不要索引blob/text等字段,不要索引大型字段,这样做会让索引占用太多的存储空间</p><h4 id="什么是前缀索引？"><a href="#什么是前缀索引？" class="headerlink" title="什么是前缀索引？"></a>什么是前缀索引？</h4><p>前缀索引说白了就是对文本的前几个字符（具体是几个字符在建立索引时指定）建立索引，这样建立起来的索引更小，所以查询更快。前缀索引能有效减小索引文件的大小，提高索引的速度。但是前缀索引也有它的坏处：MySQL 不能在 ORDER BY 或 GROUP BY 中使用前缀索引，也不能把它们用作覆盖索引(Covering Index)。<br>建立前缀索引的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD KEY(column_name(prefix_length));</span><br></pre></td></tr></table></figure><h4 id="主键准则"><a href="#主键准则" class="headerlink" title="主键准则"></a>主键准则</h4><p>表必须有主键<br>不使用更新频繁的列<br>尽量不选择字符串列<br>不使用UUID MD5 HASH<br>默认使用非空的唯一键<br>建议选择自增或发号器<br>重要的SQL必须被索引，核心SQL优先考虑覆盖索索引<br>UPDATE、DELETE语句的WHERE条件列<br>ORDER BY、GROUP BY、DISTINCT的字段<br>多表JOIN的字段<br>区分度最大的字段放在前面<br>选择筛选性更优的字段放在最前面，比如单号、userid等，type，status等筛选性一般不建议放在最前面<br>索引根据左前缀原则，当建立一个联合索引(a,b,c)，则查询条件里面只有包含(a)或(a,b)或(a,b,c)的时候才能走索引,(a,c)作为条件的时候只能使用到a列索引,所以这个时候要确定a的返回列一定不能太多，不然语句设计就不合理,(b,c)则不能走索引<br>合理创建联合索引（避免冗余），(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)</p><h4 id="索引禁忌"><a href="#索引禁忌" class="headerlink" title="索引禁忌"></a>索引禁忌</h4><p>不在低基数列上建立索引，例如“性别”<br>不在索引列进行数学运算和函数运算<br>不要索引常用的小型表<br>尽量不使用外键<br>外键用来保护参照完整性，可在业务端实现<br>对父表和子表的操作会相互影响，降低可用性<br>INNODB本身对online DDL的限制<br>MYSQL 中索引的限制<br>MYISAM 存储引擎索引长度的总和不能超过 1000 字节<br>BLOB 和 TEXT 类型的列只能创建前缀索引<br>MYSQL 目前不支持函数索引<br>使用不等于 (!= 或者 &lt;&gt;) 的时候, MYSQL 无法使用索引。<br>过滤字段使用函数运算 (如 abs (column)) 后, MYSQL无法使用索引。<br>join语句中join条件字段类型不一致的时候MYSQL无法使用索引<br>使用 LIKE 操作的时候如果条件以通配符开始 (如 ‘%abc…’)时, MYSQL无法使用索引。<br>使用非等值查询的时候, MYSQL 无法使用 Hash 索引。</p><h4 id="语句设计规范"><a href="#语句设计规范" class="headerlink" title="语句设计规范"></a>语句设计规范</h4><p>使用预编译语句<br>只传参数，比传递SQL语句更高效<br>一次解析，多次使用<br>降低SQL注入概率<br>避免隐式转换<br>会导致索引失效<br>充分利用前缀索引<br>必须是最左前缀<br>不可能同时用到两个范围条件<br>不使用%前导的查询，如like “%ab”<br>不使用负向查询，如not in/like<br>无法使用索引，导致全表扫描<br>全表扫描导致buffer pool利用率降低<br>避免使用存储过程、触发器、UDF、events等<br>让数据库做最擅长的事<br>降低业务耦合度，为sacle out、sharding留有余地<br>避开BUG<br>避免使用大表的JOIN<br>MySQL最擅长的是单表的主键/二级索引查询<br>JOIN消耗较多内存，产生临时表<br>避免在数据库中进行数学运算<br>MySQL不擅长数学运算和逻辑判断<br>无法使用索引<br>减少与数据库的交互次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT … ON DUPLICATE KEY UPDATE</span><br><span class="line">REPLACE INTO、INSERT IGNORE 、INSERT INTO VALUES(),(),()</span><br><span class="line">UPDATE … WHERE ID IN(10,20,50,…)</span><br></pre></td></tr></table></figure><h4 id="合理的使用分页"><a href="#合理的使用分页" class="headerlink" title="合理的使用分页"></a>合理的使用分页</h4><p>限制分页展示的页数 只能点击上一页、下一页 采用延迟关联</p><h4 id="如何正确的使用分页？"><a href="#如何正确的使用分页？" class="headerlink" title="如何正确的使用分页？"></a>如何正确的使用分页？</h4><p>假如有类似下面分页语句：SELECT * FROM table ORDER BY id LIMIT 10000, 10 由于MySQL里对LIMIT OFFSET的处理方式是取出OFFSET+LIMIT的所有数据，然后去掉OFFSET，返回底部的LIMIT。所以，在OFFSET数值较大时，MySQL的查询性能会非常低。可以使用id &gt; n 的方式进行解决：<br>使用id &gt; n 的方式有局限性，对于id不连续的问题，可以通过翻页的时候同时传入最后一个id方式来解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;example.com&#x2F;page.php?last&#x3D;100</span><br><span class="line">select * from table where id&lt;100 order by id desc limit 10</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上一页</span><br><span class="line">http:&#x2F;&#x2F;example.com&#x2F;page.php?first&#x3D;110</span><br><span class="line">select * from table where id&gt;110 order by id desc limit 10</span><br></pre></td></tr></table></figure><p>这种方式比较大的缺点是，如果在浏览中有插入/删除操作，翻页不会更新，而总页数可能仍然是根据新的count(*) 来计算，最终可能会产生某些记录访问不到。为了修补这个问题，可以继续引入当前页码以及在上次翻页以后是否有插入/删除等影响总记录数的操作并进行缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table where id &gt;&#x3D; (select id from table order by id limit #offset#, 1)</span><br></pre></td></tr></table></figure><p>拒绝大SQL，拆分成小SQL<br>充分利用QUERY CACHE<br>充分利用多核CPU<br>使用in代替or，in的值不超过1000个<br>禁止使用order by rand()<br>使用EXPLAIN诊断，避免生成临时表</p><p>EXPLAIN语句（在MySQL客户端中执行）可以获得MySQL如何执行SELECT语句的信息。通过对SELECT语句执行EXPLAIN，可以知晓MySQL执行该SELECT语句时是否使用了索引、全表扫描、临时表、排序等信息。尽量避免MySQL进行全表扫描、使用临时表、排序等。详见官方文档。<br>用union all而不是union<br>union all与 union有什么区别？<br>union和union all关键字都是将两个结果集合并为一个，但这两者从使用和效率上来说都有所不同。<br>union在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from test_union1</span><br><span class="line">union select * from test_union2</span><br></pre></td></tr></table></figure><p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。<br>而union all只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么返回的结果集就会包含重复的数据了。<br>从效率上说，union all要比union快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据的话，那么就使用union all，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_union1 union all select * from test_union2</span><br></pre></td></tr></table></figure><p>程序应有捕获SQL异常的处理机制<br>禁止单条SQL语句同时更新多个表<br>不使用select * ，SELECT语句只获取需要的字段<br>消耗CPU和IO、消耗网络带宽<br>无法使用覆盖索引<br>减少表结构变更带来的影响<br>因为大，select/join 可能生成临时表<br>UPDATE、DELETE语句不使用LIMIT<br>INSERT语句必须显式的指明字段名称，不使用INSERT INTO table()<br>INSERT语句使用batch提交（INSERT INTO table VALUES(),(),()……），values的个数不超过500<br>统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1) 备注：仅针对Myisam<br>数据更新建议使用二级索引先查询出主键，再根据主键进行数据更新<br>禁止使用跨库查询<br>禁止使用子查询，建议将子查询转换成关联查询<br>针对varchar类型字段的程序处理，请验证用户输入，不要超出其预设的长度；</p><h4 id="分表规范"><a href="#分表规范" class="headerlink" title="分表规范"></a>分表规范</h4><p>单表一到两年内数据量超过500w或数据容量超过10G考虑分表，需提前考虑历史数据迁移或应用自行删除历史数据，采用等量均衡分表或根据业务规则分表均可。要分表的数据表必须与DBA商量分表策略<br>用HASH进行散表，表名后缀使用十进制数，下标从0开始<br>按日期时间分表需符合YYYY[MM][dd][HH]格式<br>采用合适的分库分表策略。例如千库十表、十库百表等<br>禁止使用分区表，分区表对分区键有严格要，分区表在表变大后执行DDL、SHARDING、单表恢复等都变得更加困难。<br>拆分大字段和访问频率低的字段，分离冷热数据</p><h4 id="行为规范"><a href="#行为规范" class="headerlink" title="行为规范"></a>行为规范</h4><p>批量导入、导出数据必须提前通知DBA协助观察<br>禁止在线上从库执行后台管理和统计类查询<br>禁止有super权限的应用程序账号存在<br>产品出现非数据库导致的故障时及时通知DBA协助排查<br>推广活动或上线新功能必须提前通知DBA进行流量评估<br>数据库数据丢失，及时联系DBA进行恢复<br>对单表的多次alter操作必须合并为一次操作<br>不在MySQL数据库中存放业务逻辑<br>重大项目的数据库方案选型和设计必须提前通知DBA参与<br>对特别重要的库表，提前与DBA沟通确定维护和备份优先级<br>不在业务高峰期批量更新、查询数据库其他规范<br>提交线上建表改表需求，必须详细注明所有相关SQL语句</p><h4 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h4><p>日志类数据不建议存储在MySQL上，优先考虑Hbase或OceanBase，如需要存储请找DBA评估使用压缩表存储。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p><br><br><code style="font-size: 20px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: red">特别声明 <br>原文作者：白程序员的自习室 <br>本文原链：https://www.studytime.xin/article/mysql-internal-specifications.html <br>本文转载如有侵权，请联系我，谢谢 <br></code>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ArrayList、LinkedList 你真的了解吗？</title>
    <link href="http://www.damon8.cn/2020/07/21/hello-world/"/>
    <id>http://www.damon8.cn/2020/07/21/hello-world/</id>
    <published>2020-07-21T00:17:35.442Z</published>
    <updated>2020-07-13T01:11:21.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、-前言"><a href="#1、-前言" class="headerlink" title="1、 前言"></a>1、 前言</h2><br><br><p>经常在面试时，被问到集合的概念，集合 List、Map、Set 等底层设计以及其使用场景与注意细节。但大部分人的回答都是千篇一律，跟网上的答案一模一样，这是致命滴。其实，大家都错了，尤其是网上，更是误导大家，详细原因，且听我来分析。</p><br><br><br><h2 id="2、集合-List"><a href="#2、集合-List" class="headerlink" title="2、集合 List"></a>2、集合 List</h2><br><br><h3 id="2-1-大家心中的-List"><a href="#2-1-大家心中的-List" class="headerlink" title="2.1 大家心中的 List"></a>2.1 大家心中的 List</h3><p>在广大的网友心中，List 是一个缓存数据的容器，是 JDK 为开发者提供的一种集合类型。面试时，被问到最常见的就是 ArrayList 和 LinkedList 的区别。</p><br><p>相信大部分网友都能回答上：ArrayList 是基于数组实现，LinkedList 是基于链表实现。而在使用场景时，我发现大部分网友的答案都是：在新增、删除操作时，LinkedList 的效率要高于 ArrayList，而在查询、遍历操作的时候，ArrayList 的效率要高于 LinkedList。这个答案是否准确呢？今天就带大家验证一哈。</p><br><h3 id="2-2-性能比较"><a href="#2-2-性能比较" class="headerlink" title="2.2 性能比较"></a>2.2 性能比较</h3><p>首先，大家都知道 ArrayList、LinkedList 都继承了 AbstractList 抽象类，而 AbstractList 实现了 List 接口。ArrayList 使用数组实现，而 LinkedList 使用了双向链表实现。接下来，我们就详细地分析下 ArrayList 和 LinkedList 的性能。</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>在源码中，我们知道 ArrayList 除了实现克隆和序列化，还实现了 RandomAccess 接口。大家可能会对这个接口比较陌生，通过代码我们可以发现，这个接口其实是一个空接口，没有实现逻辑，那么 ArrayList 为什么要实现它呢？原来 RandomAccess 接口是一个标志接口，它标志着只要实现该接口，就能实现快速随机访问。</p><br><p>至于 ArrayList、LinkedList 的各种操作方法这里不再说了，大家可以看 <a href="https://mp.weixin.qq.com/s?__biz=MzA5NTE1MjY0NQ==&mid=2648832131&idx=1&sn=27dd4c28a480600cd74f92285a83e781&chksm=8856e7e9bf216effd0c4f78eaab940b2e13ab452e24661df74f4861dadc6cd9161b7f629913b&token=13659584&lang=zh_CN#rd" target="_blank" rel="noopener"></a> 这一篇。</p><br><p>接下来，我们看看一些测试数据，以测试 50000 次为例：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8yNDk3OTgzZC01MzY2LTQ2YWItYjM5YS0zZGU3MmRlNDIzOGEucG5n?x-oss-process=image/format,png" alt=""></p><br><ol><li>ArrayList、LinkedList 新增测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">头部：ArrayList.Time 大于 LinkedList.Time</span><br><span class="line">中间：ArrayList.Time 小于 LinkedList.Time</span><br><span class="line">末尾：ArrayList.Time 小于 LinkedList.Time</span><br></pre></td></tr></table></figure><p>通过这测试，我们可以看到 LinkedList 新增元素的未必要快于 ArrayList。</p><p>由于 ArrayList 是数组实现的，而数组是一块连续的内存空间，在新增元素到数组头部的时候，需要对头部以后的数据进行重排，所以效率很低。而 LinkedList 是基于链表实现，在新增元素的时候，首先会通过循环查找到新增元素的位置，如果要新增的位置处于前半段，就从前往后找；若其位置处于后半段，就从后往前找。故 LinkedList 新增元素到头部是非常高效的。</p><p>在中间位置插入时，ArrayList 同样有部分数据需要重排，效率也不是很高，而 LinkedList 将元素新增到中间，耗时最久的，因为靠近中间位置，在新增元素之前的循环查找是遍历元素最多的操作。</p><p>而在尾部操作时，发现在没有扩容的前提下，ArrayList 的效率要高于 LinkedList。这是因为 ArrayList 在新增元素到尾部的时候，不需要复制、重排，效率非常高。而 LinkedList 虽然也不用循环查找元素，但 LinkedList 中多了 new 对象以及变换指针指向对象的逻辑，所以要耗时多于 ArrayList 的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><BR><ol start="2"><li>ArrayList、LinkedList 删除测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">头部：ArrayList.Time 大于 LinkedList.Time</span><br><span class="line">中间：ArrayList.Time 小于 LinkedList.Time</span><br><span class="line">末尾：ArrayList.Time 小于 LinkedList.Time</span><br></pre></td></tr></table></figure><br><p>大家会发现 ArrayList 和 LinkedList 删除操作的测试结果和新增的结果很接近，这是一样的道理，我就不赘述了。</p><br><ol start="3"><li>ArrayList、LinkedList 遍历测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for循环：ArrayList.Time 小于 LinkedList.Time</span><br><span class="line">迭代器：ArrayList.Time 几乎等于 LinkedList.Time</span><br></pre></td></tr></table></figure><BR><p>我们可以看到，LinkedList 的 for 循环遍历比不上 ArrayList 的 for 循环。这是因为 LinkedList 基于链表实现的，在使用 for 循环的时候，每一次 for 循环都会去遍历大半个 List，所以严重影响了遍历的效率。而 ArrayList 是基于数组实现的，并且实现了 RandomAccess 接口标志，意味着 ArrayList 可以实现快速随机访问，所以 for 循环非常快。LinkedList 的迭代遍历和 ArrayList 的迭代性能差不多，也不会太差，所以在遍历 LinkedList 时，我们要使用迭代循环遍历。</p><br><br><br><h2 id="3、常错点"><a href="#3、常错点" class="headerlink" title="3、常错点"></a>3、常错点</h2><br><br><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>在一次 ArrayList 删除操作的过程中，有下面两种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void removeA(ArrayList&lt;String&gt; l) &#123;</span><br><span class="line">  for (String s : l)&#123;</span><br><span class="line">      if (s.equals(&quot;aaa&quot;)) &#123;</span><br><span class="line">        l.remove(s);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void removeB(ArrayList&lt;String&gt; l) &#123;</span><br><span class="line">    Iterator&lt;String&gt; it &#x3D; l.iterator();</span><br><span class="line">    while (it.hasNext()) &#123;</span><br><span class="line">        String str &#x3D; it.next();</span><br><span class="line">        if (str.equals(&quot;aaa&quot;)) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>第一种写法错误，第二种是正确的，原因是上面的两种写法都有用到 list 内部迭代器Iterator，即遍历时，ArrayList 内部创建了一个内部迭代器 iterator，在使用 next 方法来取下一个元素时，会使用 ArrayList 里保存的一个用来记录 list 修改次数的变量 modCount，与 iterator 保存了一个叫 expectedModCount 的表示期望的修改次数进行比较，如果不相等则会抛出一个叫 ConcurrentModificationException 的异常。且在 for 循环中调用 list 中的 remove 方法，会走到一个 fastRemove 方法，该方法不是 iterator 中的方法，而是 ArrayList 中的方法，在该方法只做了 modCount++，而没有同步到 expectedModCount。所以不一致就抛出了 ConcurrentModificationException 异常了。</code></p><br><p>下面是 ArrayList 自己的remove 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>如果有看过阿里 Java 编程规范就知道，在集合中进行 remove 操作时，不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</code></p><br><br><p><span class="suffix" style="display: none;"></span></h6></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px;"><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; background: #282c34; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch;">https://gitee.com/damon_one/spring-cloud-k8s</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 22px;"><span class="prefix" style="display: none;"></span><span class="content">欢迎关注</span><span class="suffix"></span></h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzIwLzE3MTk1OTEwODYzNTIyMmI?x-oss-process=image/format,png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、-前言&quot;&gt;&lt;a href=&quot;#1、-前言&quot; class=&quot;headerlink&quot; title=&quot;1、 前言&quot;&gt;&lt;/a&gt;1、 前言&lt;/h2&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;经常在面试时，被问到集合的概念，集合 List、Map、Set 等底层设计以及其使用场景与注意
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>首发基于OpenPAI细化部署 Hadoop 集群</title>
    <link href="http://www.damon8.cn/2020/07/18/hadoop-deploy/"/>
    <id>http://www.damon8.cn/2020/07/18/hadoop-deploy/</id>
    <published>2020-07-18T06:34:34.000Z</published>
    <updated>2020-07-23T04:23:57.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ol><li><a href="https://github.com/microsoft/pai/tree/v0.14.0" target="_blank" rel="noopener">https://github.com/microsoft/pai/tree/v0.14.0</a></li><li>Hadoop 2.9.0</li><li>k8s 1.9.4 (高版本未测)</li></ol><br><h5 id="本次讲解的主要是基于-Microsoft-开源的-OpenPAI，向大家通俗易懂的讲解-OpenPAI-是如何快速部署-Hadoop-集群的。便于大家快速部署Hadoop集群。"><a href="#本次讲解的主要是基于-Microsoft-开源的-OpenPAI，向大家通俗易懂的讲解-OpenPAI-是如何快速部署-Hadoop-集群的。便于大家快速部署Hadoop集群。" class="headerlink" title="本次讲解的主要是基于 Microsoft 开源的 OpenPAI，向大家通俗易懂的讲解 OpenPAI 是如何快速部署 Hadoop 集群的。便于大家快速部署Hadoop集群。"></a><code>本次讲解的主要是基于 Microsoft 开源的 OpenPAI，向大家通俗易懂的讲解 OpenPAI 是如何快速部署 Hadoop 集群的。便于大家快速部署Hadoop集群。</code></h5><br><h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubuntu 16.04</span><br><span class="line">docker 18.06</span><br><span class="line">k8s 1.9.4</span><br><span class="line">Hadoop 2.9.0</span><br></pre></td></tr></table></figure><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>以上系统环境准备好，首先克隆 Microsoft 开源的 OpenPAI 的代码: <a href="https://github.com/microsoft/pai，切换到分支" target="_blank" rel="noopener">https://github.com/microsoft/pai，切换到分支</a> v0.14.0。</p><p>由于我的目录在 /home/damon 下，所以直接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;damon&#x2F;pai</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p>可以看到有如下目录:</p><p><img src="https://imgkr.cn-bj.ufileos.com/5bfd92d4-fc47-4561-840f-fd73d30027cc.png" alt=""></p><p>其中，src 目录下都是一些代码目录以及脚本：</p><p><img src="https://imgkr.cn-bj.ufileos.com/195545aa-013f-473b-a372-eda5167d9bc2.png" alt=""></p><br><br><p>我们再看看与 src 同一级的 deployment 目录:</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qnzibd6OnPzZaqqB53kN3ZukBLFiaHKIZ14ohkxbyyrY7sZQdLtxOapfJsDcicfgZTnTpLREGBNoe64LHJyL51bJA/0?wx_fmt=jpeg" alt=""></p><p>看着很多，其实我们只要看 quick-start 下的几个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi deployment&#x2F;quick-start&#x2F;quick-start-example.yaml #配置master节点信息</span><br><span class="line">sudo vi deployment&#x2F;quick-start&#x2F;kubernetes-configuration.yaml.template  #不作大改</span><br><span class="line">sudo vi deployment&#x2F;quick-start&#x2F;layout.yaml.template  #增加机器相关信息</span><br><span class="line">sudo vi deployment&#x2F;quick-start&#x2F;services-configuration.yaml.template #配置docker相关信息</span><br></pre></td></tr></table></figure><br><br><p>第一个配置文件主要是关于 master 节点。第二个配置主要是配置 k8s 的基本信息，因为 OpenPAI 不仅可以部署 Hadoop，还可以基于 Docker、python 来部署 k8s。第三个配置主要是增加机器的信息，我们需要修改的是配置 master 节点的信息，至于 node 节点，我们可以通过打标签的方式来。第四个配置主要是配置 docker 信息，存储 image 的各种 tag 形式。</p><br><br><h5 id="根据配置模板生成配置文件"><a href="#根据配置模板生成配置文件" class="headerlink" title="根据配置模板生成配置文件"></a>根据配置模板生成配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python paictl.py config generate -i deployment&#x2F;quick-start&#x2F;quick-start-example.yaml -o ~&#x2F;damon&#x2F;pai-config -f</span><br></pre></td></tr></table></figure><br><br><h5 id="把生成的本地配置文件推送到远程-k8s-集群"><a href="#把生成的本地配置文件推送到远程-k8s-集群" class="headerlink" title="把生成的本地配置文件推送到远程 k8s 集群"></a>把生成的本地配置文件推送到远程 k8s 集群</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python paictl.py config push -p ~&#x2F;damon&#x2F;pai-config&#x2F;</span><br></pre></td></tr></table></figure><p>执行上面的命令时，会出现输入命令，意思是让你输入一个 cluster-id，这是 OpenPAI 为集群设置的一个 id。输入后回车即可把配置推送到远程了。</p><br><br><h5 id="获取-cluster-id"><a href="#获取-cluster-id" class="headerlink" title="获取 cluster-id"></a>获取 cluster-id</h5><p>如果生成过，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">damon@master:~&#x2F;damon&#x2F;pai$ sudo python paictl.py config get-id</span><br><span class="line">2020-07-16 19:56:48,066 [INFO] - deployment.confStorage.get_cluster_id : Cluster-id is: ustc</span><br></pre></td></tr></table></figure><p>即可获取。</p><br><br><h5 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h5><p>以上配置都结束后，上面说过了，配置中只有 master 节点信息，需要手动给 node 节点打标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node nodeName hdfsrole&#x3D;master</span><br></pre></td></tr></table></figure><p>同样的标签还有类似:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master labels:</span><br><span class="line"></span><br><span class="line">hdfsrole&#x3D;master,jobhistory&#x3D;true,launcher&#x3D;true,node-exporter&#x3D;true,pai-master&#x3D;true,yarnrole&#x3D;master,zookeeper&#x3D;true</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node labels:</span><br><span class="line">gpu-check&#x3D;true,hdfsrole&#x3D;worker,node-exporter&#x3D;true,pai-worker&#x3D;true,yarnrole&#x3D;worker</span><br></pre></td></tr></table></figure><p>打完标签后，即可开始部署 Hadoop 集群了。</p><h3 id="部署-Hadoop"><a href="#部署-Hadoop" class="headerlink" title="部署 Hadoop"></a>部署 Hadoop</h3><p>部署 Hadoop 的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python paictl.py service start [-c &#x2F;path&#x2F;to&#x2F;kubeconfig] [ -n service-name ]</span><br></pre></td></tr></table></figure><p>解释：-c 参数中带的是 k8s 授权的 kube-config 路径，-n 参数是服务名，如果没带 -n，则会默认启动 src 下的所有的服务。</p><br><br><p>Hadoop 中主要有这些服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zookeeper</span><br><span class="line">hadoop-name-node</span><br><span class="line">hadoop-data-node</span><br><span class="line">hadoop-resource-manager</span><br><span class="line">hadoop-node-manager</span><br><span class="line">hadoop-batch-job</span><br><span class="line">hadoop-jobhistory</span><br></pre></td></tr></table></figure><p>那就手动一个个执行吧。执行一个后看看 pod 有没有启动，相关的 configmap 有没有创建，默认都是官方的。</p><h3 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h3><p>如果发现 namenode 启用了安全模式，而不想启用的话，执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it hadoop-name-node-e3bw9 bash</span><br><span class="line">hadoop dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><p>即：进入 name-node 容器中执行关闭。</p><br><br><h5 id="模块功能说明"><a href="#模块功能说明" class="headerlink" title="模块功能说明"></a>模块功能说明</h5><ol><li>resource-manager 是调度中心，负责资源管理。</li><li>node-manager 是容器启动的的执行者。通常异常情况需要重启 node-manager。</li><li>zookeeper 为数据的存储中心。</li><li>namenode 和 datanode 为 hadoop 服务（HDFS）的基础层。</li></ol><h5 id="模块运维方法说明"><a href="#模块运维方法说明" class="headerlink" title="模块运维方法说明"></a>模块运维方法说明</h5><ol><li>resource-manager 重启：大量任务 waiting 和 stopping 和数据不一致等情况。</li><li>node-manager 重启：更新节点的资源信息或者节点故障等。</li></ol><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>微服务自动化部署CI/CD</title>
    <link href="http://www.damon8.cn/2020/07/14/ci-cd/"/>
    <id>http://www.damon8.cn/2020/07/14/ci-cd/</id>
    <published>2020-07-14T12:03:14.000Z</published>
    <updated>2020-07-23T07:38:30.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一直有人说想了解微服务的自动化部署，今天它来了。"><a href="#一直有人说想了解微服务的自动化部署，今天它来了。" class="headerlink" title="一直有人说想了解微服务的自动化部署，今天它来了。"></a>一直有人说想了解微服务的自动化部署，今天它来了。</h4><br><p><code>在微服务化的时代，自动化部署越来越成为企业的重中之重了，因为这样减少了人员的成本，开发人员将代码提交后，触发相关事件即可部署测试环境，甚至得到许可后部署到线上。这样，原先开发人员、运维人员等要做的事，通通不必再重复劳作了。这对于一个企业来说，leader比较在乎的一件事。今天讲解通过jenkins、gitlab、harbor、k8s来作简单的CI/CD平台，暂时未涉及到代码检测等。</code></p><br><h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu16.04</span><br><span class="line">docker18.04</span><br><span class="line">k8s1.13.x +</span><br></pre></td></tr></table></figure><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><p>以上系统环境准备好，本文讲述的是用 k8s 来进行部署 jenkins</p><br><h2 id="2-部署-jenkins"><a href="#2-部署-jenkins" class="headerlink" title="2. 部署 jenkins"></a>2. 部署 jenkins</h2><p>新建部署脚本 jenkins.yaml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-service</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">    protocol: TCP</span><br><span class="line">    nodePort: 30600</span><br><span class="line">    name: jenkins</span><br><span class="line">  - port: 30000</span><br><span class="line">    targetPort: 30000</span><br><span class="line">    nodePort: 30000</span><br><span class="line">    protocol: TCP</span><br><span class="line">    name: agent</span><br><span class="line">  selector:</span><br><span class="line">    app: jenkins</span><br><span class="line">    tier: jenkins</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    type: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: jenkins</span><br><span class="line">        tier: jenkins</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: jenkins</span><br><span class="line">          image: jenkinsci&#x2F;blueocean:latest</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 8080</span><br><span class="line">              name: jenkins</span><br><span class="line">            - containerPort: 30000</span><br><span class="line">              name: agent</span><br><span class="line">          volumeMounts:</span><br><span class="line">          - mountPath: &#x2F;var&#x2F;jenkins_home</span><br><span class="line">            name: jenkins-data</span><br><span class="line">          - mountPath: &#x2F;data&#x2F;jenkins</span><br><span class="line">            name: jenkins-log-path</span><br><span class="line">      volumes:</span><br><span class="line">      - name: jenkins-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;home&#x2F;demo&#x2F;jenkins</span><br><span class="line">      - name: jenkins-log-path</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;data&#x2F;jenkins</span><br></pre></td></tr></table></figure><br><p>执行脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f jenkins.yaml</span><br></pre></td></tr></table></figure><br><p>查看部署成功的 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><br><p>同时会看到一个 service 生成，映射端口到外部。</p><p>接下来通过页面访问该服务，首次打开后，会让输入一个 admin 的密钥，这一串字符可以在日志中找到，执行 kubectl logs -f test-jenkins-c6bd58bf9-tgmsa 即可，输入一串字符后，进入下一步，需要安装一些插件，在安装插件的时候，需要注意的是，选择 jenkins 的 image 不同，其所需安装的插件也是不一样的，有的可能 image 已经存在了。<br>具体请看：<a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></p><p>安装完插件后，进入下一步，创建第一个账户，管理员账户，一般建议创建，方便后面使用，注：邮箱也需要填写。</p><br><p>完成以上后，我们进入正式界面：</p><img src="/images/jenkins/jenkins1.png" style="display: block; margin: 0 auto; max-width: 100%;"><br><p>第一步：点击系统管理—&gt;插件管理，添加一些插件，这里有用到kubernetes的插件，故安装了kubernetes plugins，其他的可根据自行项目确定下载、安装。</p><br><p>第二步：点击系统管理—&gt;系统设置</p><img src="/images/jenkins/jenkins2.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>添加jenkins的地址以及邮件地址</p><br><p>第三步：拉动滚动框到最下面，新增一个云</p><img src="/images/jenkins/jenkins3.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>这里我加了kubernetes的配置，为什么后面会讲。</p><br><p>第四步：新建任务</p><img src="/images/jenkins/jenkins4.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>在触发器中新增规则，最下面要生成token。</p><br><p>第五步：</p><img src="/images/jenkins/jenkins5.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>接下来就是选择与gitlab互动，gitlab的地址以及凭据，凭据可通过首页加上可访问gitlab的用户信息，脚本路径需要根据自身的Jenkinsfile路径情况填写。</p><br><p>第六步：</p><img src="/images/jenkins/jenkins6.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>如果启用全局安全，这个端口本身是50000，但由于k8s的默认nodePort范围是30000-32767，故可以修改在这区间内，比如：30000，这也是为什么上面创建时service的nodePort是30000了。</p><br><p>至此，jenkins环境配置完成</p><br><p>第七步：配置gitlab</p><img src="/images/jenkins/jenkins7.png" style="display: block; margin: 0 auto; max-width: 100%;"><p>这里的url就是在新建任务时生成的Gitlab webhook，token就是上面截图生成的token，最后add webhook。</p><br><p>第八步：</p><p>关于Harbor，自己可以简单搭建一个harbor服务，找度娘问一下很多，此处略。</p><br><p>第九步：</p><p>新建Jenkinsfile文件，如果刚才的路径是在项目根目录，则直接在项目根目录下创建Jenkinsfile文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">def label &#x3D; &quot;mypod-$&#123;UUID.randomUUID().toString()&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def k8sPodYaml &#x3D; &quot;&quot;&quot;</span><br><span class="line">    apiVersion: &quot;v1&quot;</span><br><span class="line">    kind: &quot;Pod&quot;</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        jenkins: &quot;slave&quot;</span><br><span class="line">      name: &quot;$&#123;label&#125;&quot;</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - env:</span><br><span class="line">        - name: &quot;CI_ENV&quot;</span><br><span class="line">          value: &quot;YES&quot;</span><br><span class="line">        - name: &quot;JENKINS_AGENT_WORKDIR&quot;</span><br><span class="line">          value: &quot;&#x2F;home&#x2F;jenkins&#x2F;agent&quot;</span><br><span class="line">        image: &quot;jenkins&#x2F;jnlp-slave&quot;</span><br><span class="line">        imagePullPolicy: &quot;Always&quot;</span><br><span class="line">        name: &quot;jnlp&quot;</span><br><span class="line">        resources:</span><br><span class="line">          limits: &#123;&#125;</span><br><span class="line">          requests: &#123;&#125;</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: false</span><br><span class="line">        tty: false</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &quot;&#x2F;home&#x2F;jenkins&#x2F;.kube&quot;</span><br><span class="line">          name: &quot;volume-2&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">        - mountPath: &quot;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;</span><br><span class="line">          name: &quot;volume-0&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">        - mountPath: &quot;&#x2F;var&#x2F;inference&#x2F;config&quot;</span><br><span class="line">          name: &quot;volume-1&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">        - mountPath: &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl&quot;</span><br><span class="line">          name: &quot;volume-3&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">        - mountPath: &quot;&#x2F;home&#x2F;jenkins&#x2F;agent&quot;</span><br><span class="line">          name: &quot;workspace-volume&quot;</span><br><span class="line">          readOnly: false</span><br><span class="line">        workingDir: &quot;&#x2F;home&#x2F;jenkins&#x2F;agent&quot;</span><br><span class="line">      nodeSelector: &#123;&#125;</span><br><span class="line">      restartPolicy: &quot;Never&quot;</span><br><span class="line">      volumes:</span><br><span class="line">      - hostPath:</span><br><span class="line">          path: &quot;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;</span><br><span class="line">        name: &quot;volume-0&quot;</span><br><span class="line">      - hostPath:</span><br><span class="line">          path: &quot;&#x2F;home&#x2F;leinao&#x2F;.kube&quot;</span><br><span class="line">        name: &quot;volume-2&quot;</span><br><span class="line">      - hostPath:</span><br><span class="line">          path: &quot;&#x2F;home&#x2F;leinao&#x2F;inference-deploy&#x2F;output_config&quot;</span><br><span class="line">        name: &quot;volume-1&quot;</span><br><span class="line">      - emptyDir: &#123;&#125;</span><br><span class="line">        name: &quot;workspace-volume&quot;</span><br><span class="line">      - hostPath:</span><br><span class="line">          path: &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl&quot;</span><br><span class="line">        name: &quot;volume-3&quot;</span><br></pre></td></tr></table></figure><br><p>下面是自己的任务构建项目时的逻辑，由于我们这块用了自己的框架写的编译逻辑，故比较简单的，这里不合适公开，但是逻辑都差不多，大家可自行编写。</p><p>这块解释上面的k8s的yaml，这个就是为了在k8s中启动一个pod，通过该pod来执行构建逻辑的过程。</p><br><br><p>到此，关于Jenkins结合harbor、gitlab、k8s来实现CI/CD结束了，有几点注意的地方：</p><pre><code>1. 如果jenkins是在容器中启动的一定要记得将这个端口(30000)暴露到外部，不然jenkins-master会不知道slave是否已经启动，会反复去创建pod只到超过重试次数。2. 如果提示Jenkins doesn’t have label jenkins-jnlp-slave，可能原因：    1). 因为slave节点无法链接到jenkins节点开放端口50000导致    2). 因为slave镜像中slave启动失败导致的    3). 因为jenkins和k8s通信有延时导致超时jenkins会反复创建pod    4). 因为slave pod启动失败    5). 因为pipeline中指定的label与配置中的不一致导致3. 也可以通过Ingress暴露的方式来进行暴露。</code></pre><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx 日常操作</title>
    <link href="http://www.damon8.cn/2020/07/14/nginx/"/>
    <id>http://www.damon8.cn/2020/07/14/nginx/</id>
    <published>2020-07-14T07:05:15.000Z</published>
    <updated>2020-07-23T00:07:31.912Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2>Ubuntu 下 Nginx 安装</h2><br><p>先下载相关文件:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">cd /usr/local/srcsudo 模式下wget http://nginx.org/download/nginx-1.10.2.tar.gzwget http://www.openssl.org/source/openssl-fips-2.0.10.tar.gzwget http://zlib.net/zlib-1.2.11.tar.gzwget https://netix.dl.sourceforge.net/project/pcre/pcre/8.40/pcre-8.40.tar.gz</code></pre><br><p>安装nginx相关组件:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">安装opensslsudo tar zxvf openssl-fips-2.0.10.tar.gzcd openssl-fips-2.0.10sudo ./config && make && make install</code></pre><br><p>安装pcre:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">sudo tar zxvf pcre-8.40.tar.gzcd pcre-8.40sudo ./configure && make && make install</code></pre><br><p>安装zlib:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">sudo tar zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11sudo ./configure && make && make install</code></pre><br><p>安装nginx:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">sudo tar zxvf nginx-1.10.2.tar.gzcd nginx-1.10.2sudo ./configure && make && make install</code></pre><br><p>启动nginx:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">/usr/local/nginx/sbin/nginx</code></pre><br><p>查看nginx是否启动成功:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">netstat -lnp</code></pre><br><p>查看 nginx 的测试，以及相关配置:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">nginx -t</code></pre><br><p>nginx 默认的日志位置:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">tail -f /var/log/nginx/access.log</code></pre><br><p>加配置:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">sudo /usr/local/nginx/sbin/nginxsudo /usr/local/nginx/sbin/nginx -s stop(quit、reload)sudo /usr/local/nginx/sbin/nginx -hsudo vi /usr/local/nginx/conf/nginx.conf</code></pre><br><br><h2>Ubuntu 下 Nginx 完全卸载</h2><br><p>先暂停 nginx 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure><br><p>删除 nginx，–purge 包括配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure><br><p>移除全部不使用的软件包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><br><p>列出与 nginx 相关的软件 并删除显示的软件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line">sudo apt-get --purge remove nginx-common</span><br><span class="line">sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring cloud 之熔断机制（实战）</title>
    <link href="http://www.damon8.cn/2020/07/10/springcloud-04/"/>
    <id>http://www.damon8.cn/2020/07/10/springcloud-04/</id>
    <published>2020-07-10T06:16:14.000Z</published>
    <updated>2020-07-14T01:54:56.433Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/title_img/5.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"><p>前面讲过 Spring cloud 之多种方式限流（实战）来处理请求频繁的压力。大家都知道，多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 有调用其他的微服务，这就是所谓的 扇出，若扇出的链路上某个微服务的请求时间过长或者不可用，对微服务 A 的调用就会占用越来越多的时间以及更多资源，进而引起系统雪崩，即”雪崩效应”。</p><p>这个时候，需要一个机制来保证当某个微服务出现异常时（请求反应慢或宕机），其整个流程还是阔以友好滴进行下去。即向调用方返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就可以保证调用方的线程不会被长时间、无厘头滴占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。我们把这个机制，或者这种处理方式叫作“熔断器”。</p><p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当整个链路的某个微服务异常时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回“合理”的响应信息。当检测到该节点微服务正常后恢复调用链路，在Spring cloud 框架机制通过 Hystrix 实现，Hystrix 会监控微服务见调用的状况，当失败的调用到一个阈值，默认是5秒内20次调用失败就会启动熔断机制，熔断机制的注解是 @HystrixCommand。</p><p>最近研究了一下 Spring cloud 的熔断机制，特分享一些代码，以及实战中的坑。</p><p>在Spring cloud 中，假设有几个微服务：用户管理服务、订单服务、鉴权中心、物流服务等。这时，订单服务中，某个接口请求用户管理服务，这个时候如果需要熔断机制，该怎么处理呢？</p><p>首先，订单服务引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>这个时候，订单服务启动类中需要引用熔断注解 @EnableCircuitBreaker，使其生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年1月13日 下午3:23:06</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">public class OrderApp &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(OrderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   这里，不要忘记注解 @EnableDiscoveryClient 来相互暴露服务。</p><p>最后需要在调用用户管理服务的函数中，加入注解 @HystrixCommand：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod &#x3D; &quot;admin_service_fallBack&quot;, commandProperties &#x3D; &#123;</span><br><span class="line">      @HystrixProperty(name &#x3D; &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value &#x3D; &quot;5000&quot;) &#125;)&#x2F;&#x2F;隔离策略:execution.isolation.strategy &#x3D;SEMAPHORE or THREAD(不配置默认)</span><br><span class="line">  @Override</span><br><span class="line">  public Response&lt;Object&gt; getUserInfo(HttpServletRequest req, HttpServletResponse res) &#123;</span><br><span class="line"></span><br><span class="line">    ResponseEntity&lt;String&gt; forEntity &#x3D; restTemplate.getForEntity(envConfig.getAdmin_web_url() + &quot;&#x2F;api&#x2F;user&#x2F;getUserInfo&quot;, String.class);</span><br><span class="line">    HttpHeaders headers &#x3D; new HttpHeaders();</span><br><span class="line">    MediaType type &#x3D; MediaType.parseMediaType(&quot;application&#x2F;json; charset&#x3D;UTF-8&quot;);</span><br><span class="line">    headers.setContentType(type);</span><br><span class="line">    headers.add(&quot;Accept&quot;, MediaType.APPLICATION_JSON.toString());</span><br><span class="line">    headers.add(&quot;Authorization&quot;, &quot;bearer &quot; + StrUtil.subAfter(req.getHeader(&quot;Authorization&quot;), &quot;bearer &quot;, false));</span><br><span class="line">    HttpEntity&lt;String&gt; formEntity &#x3D; new HttpEntity&lt;String&gt;(null, headers);</span><br><span class="line">    String body &#x3D; &quot;&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">      ResponseEntity&lt;String&gt; responseEntity &#x3D; restTemplate.exchange(&quot;http:&#x2F;&#x2F;admin-web-service&#x2F;api&#x2F;user&#x2F;getUserInfo&quot;,</span><br><span class="line">          HttpMethod.GET, formEntity, String.class);</span><br><span class="line">      if (responseEntity.getStatusCodeValue() &#x3D;&#x3D; 200) &#123;</span><br><span class="line">        logger.debug(String.format(&quot;request getUserInfo return: &#123;&#125;&quot;, JSON.toJSON(responseEntity.getBody())));</span><br><span class="line">        return Response.ok(responseEntity.getStatusCodeValue(), 0, &quot;success&quot;, JSON.toJSON(responseEntity.getBody()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      logger.error(&quot;loadJobDetail error&quot;);</span><br><span class="line">      logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 熔断时调用的方法</span><br><span class="line">   *</span><br><span class="line">   * 参数要与被请求的方法的参数一致</span><br><span class="line">   *</span><br><span class="line">   * @return</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private Response&lt;Object&gt; admin_service_fallBack(HttpServletRequest req, HttpServletResponse res) &#123;</span><br><span class="line">    String token &#x3D; StrUtil.subAfter(req.getHeader(&quot;Authorization&quot;), &quot;bearer &quot;, false);</span><br><span class="line">    logger.info(&quot;admin_service_fallBack token: &#123;&#125;&quot;, token);</span><br><span class="line">    return Response.ok(200, -2, &quot;用戶服務掛啦!&quot;, null);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中上面代码需要注意的是：注解中 fallbackMethod 的值指定了熔断后的处理函数，这个函数的参数与当前的调用方法的参数需要保持一致，否则报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.hystrix.contrib.javanica.exception.FallbackDefinitionException:fallback method wasn&#39;t found.</span><br></pre></td></tr></table></figure><p>最后，配置 Hystrix 相关的参数配置yaml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hystrix.command.BackendCall.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line">hystrix.threadpool.BackendCallThread.coreSize: 5</span><br></pre></td></tr></table></figure><p>其中第一个配置在调用函数中其实也可以配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod &#x3D; &quot;admin_service_fallBack&quot;, commandProperties &#x3D; &#123;</span><br><span class="line">      @HystrixProperty(name &#x3D; &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value &#x3D; &quot;3000&quot;) &#125;)</span><br></pre></td></tr></table></figure><p>这里配置的3000毫秒生效后，如果配置文件中也配置了，则会被覆盖。</p><p>如果不加@HystrixCommand中的commandProperties=@HystrixProperty注解配置，下面的FallBack函数admin_service_fallBack()是一个线程；@HystrixCommand()是一个隔离线程。若加上commandProperties=@HystrixProperty注解配置后，将2个线程合并到一个线程里。</p><p><span style="color: rgb(0, 0, 0);font-size: 16px;">这样到此为止，调用方就结束配置了，至于被调用方，相关配置与源码在<a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzA5NTE1MjY0NQ==&amp;mid=2648831713&amp;idx=1&amp;sn=c2b2000cdb8a2ac351ee54aa784b6b84&amp;chksm=8856e98bbf21609d2b0e513173e040dc6e4259559d61d81b41d906511f508fe1cba2d4c452a7&amp;scene=21#wechat_redirect" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1">Spring Cloud Kubernetes之实战二服务注册与发现</a>&nbsp;一文中，讲过被调用服务的相关，这里的<a href="http://admin-web-service" target="_blank" rel="noopener">http://admin-web-service</a> 为被调用服务，则在其服务启动类中需要注解 @EnableDiscoveryClient：</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.damon;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line">import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import com.damon.config.EnvConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年1月13日 下午3:23:06</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableConfigurationProperties(EnvConfig.class)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class AdminApp &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AdminApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，配置 RestTemplate 的 Bean 中加上注解 @LoadBalanced 需要作 LB，这样利用服务名来根据 LB 规则找到对应的其中一个服务，这样比较明显看出 LB 的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line">import org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2018年2月2日 下午7:15:53</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class BeansConfig &#123;</span><br><span class="line">  @Resource</span><br><span class="line">  private Environment env;</span><br><span class="line"></span><br><span class="line">  @LoadBalanced&#x2F;&#x2F;就不能用ip等形式来请求其他服务</span><br><span class="line">  @Bean</span><br><span class="line">  public RestTemplate restTemplate() &#123;</span><br><span class="line">    SimpleClientHttpRequestFactory requestFactory &#x3D; new SimpleClientHttpRequestFactory();</span><br><span class="line">    requestFactory.setReadTimeout(env.getProperty(&quot;client.http.request.readTimeout&quot;, Integer.class, 15000));</span><br><span class="line">    requestFactory.setConnectTimeout(env.getProperty(&quot;client.http.request.connectTimeout&quot;, Integer.class, 3000));</span><br><span class="line">    RestTemplate rt &#x3D; new RestTemplate(requestFactory);</span><br><span class="line">    return rt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后如果没问题了，可以先暂停用户管理服务，然后运行订单服务时，返回熔断结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&#123;&quot;code&quot;:-2,&quot;message&quot;:&quot;用戶服務掛啦!&quot;,&quot;status&quot;:200&#125;&#125;</span><br></pre></td></tr></table></figure><p>OK，Spring cloud 熔断实战就结束了！</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/title_img/5.jpg&quot; alt style=&quot;display: block; margin: 0 auto; max-width: 100%;&quot;&gt;

&lt;p&gt;前面讲过 Spring cloud 之多种方式限流（实战）来处理请求频繁的压力
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring cloud 之多种方式限流（实战）</title>
    <link href="http://www.damon8.cn/2020/07/10/springcloud-03/"/>
    <id>http://www.damon8.cn/2020/07/10/springcloud-03/</id>
    <published>2020-07-10T06:15:01.000Z</published>
    <updated>2020-07-14T01:54:49.883Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/title_img/6.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"><p>在频繁的网络请求时，服务有时候也会受到很大的压力，尤其是那种网络攻击，非法的。这样的情形有时候需要作一些限制。例如：限制对方的请求，这种限制可以有几个依据：请求IP、用户唯一标识、请求的接口地址等等。</p><p>当前限流的方式也很多：Spring cloud 中在网关本身自带限流的一些功能，基于 redis 来做的。同时，阿里也开源了一款：限流神器 Sentinel。今天我们主要围绕这两块来实战微服务的限流机制。</p><p>首先讲 Spring cloud 原生的限流功能，因为限流可以是对每个服务进行限流，也可以对于网关统一作限流处理。</p><p>一、实战基于 Spring cloud Gateway 的限流</p><p>pom.xml引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>其基础是基于redis，所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-service</span><br><span class="line">  redis: #redis相关配置</span><br><span class="line">    database: 8</span><br><span class="line">    host: 10.12.15.5</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456 #有密码时设置</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 10000ms</span><br></pre></td></tr></table></figure><p>接下来需要注入限流策略的 bean：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Primary</span><br><span class="line">  @Bean(value &#x3D; &quot;ipKeyResolver&quot;)</span><br><span class="line">  KeyResolver ipKeyResolver() &#123;</span><br><span class="line">      return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">      &#x2F;&#x2F;return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">      &#x2F;&#x2F;return exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * API限流</span><br><span class="line">   * @return</span><br><span class="line">   * @author Damon</span><br><span class="line">   * @date 2020年3月18日</span><br><span class="line">   *</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @Bean(value &#x3D; &quot;apiKeyResolver&quot;)</span><br><span class="line">  KeyResolver apiKeyResolver() &#123;</span><br><span class="line">    return exchange -&gt; Mono.just(exchange.getRequest().getPath().value());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 请求路径中必须携带userId参数</span><br><span class="line">   * 用户限流</span><br><span class="line">   * @return</span><br><span class="line">   * @author Damon</span><br><span class="line">   * @date 2020年3月18日</span><br><span class="line">   *</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @Bean(value &#x3D; &quot;userKeyResolver&quot;)</span><br><span class="line">  KeyResolver userKeyResolver() &#123;</span><br><span class="line">    return exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(&quot;userId&quot;));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里引入ipKeyResolver、apiKeyResolver、userKeyResolver三种策略，可以利用注解 @Primary 来决定其中一个被使用。</p><p>注入bean后，需要在配置中备用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-service</span><br><span class="line">  redis: #redis相关配置</span><br><span class="line">    database: 8</span><br><span class="line">    host: 10.12.15.5</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456 #有密码时设置</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 10000ms</span><br><span class="line"></span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br><span class="line">    gateway:</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: true</span><br><span class="line">          lowerCaseServiceId: true</span><br><span class="line">      routes: #路由配置:参数为一个List</span><br><span class="line">      - id: cas-server #唯一标识</span><br><span class="line">        uri: lb:&#x2F;&#x2F;cas-server-service #转发的地址,写服务名称</span><br><span class="line">        order: -1</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;cas-server&#x2F;** #判断匹配条件,即地址带有&#x2F;ribbon&#x2F;**的请求,会转发至lb:cas-server-service</span><br><span class="line">        filters:</span><br><span class="line">        - StripPrefix&#x3D;1 #去掉Path前缀,参数为1代表去掉&#x2F;ribbon</span><br><span class="line"></span><br><span class="line">        - name: RequestRateLimiter #基于redis的Gateway的自身限流</span><br><span class="line">          args:</span><br><span class="line">            redis-rate-limiter.replenishRate: 1  # 允许用户每秒处理多少个请求</span><br><span class="line">            redis-rate-limiter.burstCapacity: 3  # 令牌桶的容量，允许在一秒钟内完成的最大请求数</span><br><span class="line">            key-resolver: &quot;#&#123;@ipKeyResolver&#125;&quot; #SPEL表达式取的对应的bean</span><br><span class="line"></span><br><span class="line">      - id: admin-web</span><br><span class="line">        uri: lb:&#x2F;&#x2F;admin-web-service</span><br><span class="line">        order: -1</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;admin-web&#x2F;**</span><br><span class="line">        filters:</span><br><span class="line">        - StripPrefix&#x3D;1</span><br><span class="line"></span><br><span class="line">        - name: RequestRateLimiter</span><br><span class="line">          args:</span><br><span class="line">            redis-rate-limiter.replenishRate: 1  # 允许用户每秒处理多少个请求</span><br><span class="line">            redis-rate-limiter.burstCapacity: 3  # 令牌桶的容量，允许在一秒钟内完成的最大请求数</span><br><span class="line">            key-resolver: &quot;#&#123;@ipKeyResolver&#125;&quot; #SPEL表达式取的对应的bean</span><br><span class="line"></span><br><span class="line">      - id: order-service</span><br><span class="line">        uri: lb:&#x2F;&#x2F;order-service-service</span><br><span class="line">        order: -1</span><br><span class="line">        predicates:</span><br><span class="line">        - Path&#x3D;&#x2F;order-service&#x2F;**</span><br><span class="line">        filters:</span><br><span class="line">        - StripPrefix&#x3D;1</span><br><span class="line"></span><br><span class="line">        - name: RequestRateLimiter</span><br><span class="line">          args:</span><br><span class="line">            redis-rate-limiter.replenishRate: 1  # 允许用户每秒处理多少个请求</span><br><span class="line">            redis-rate-limiter.burstCapacity: 3  # 令牌桶的容量，允许在一秒钟内完成的最大请求数</span><br><span class="line">            key-resolver: &quot;#&#123;@ipKeyResolver&#125;&quot; #SPEL表达式取的对应的bean</span><br><span class="line"></span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      enabled: true</span><br><span class="line">      force: true</span><br><span class="line">  mvc:</span><br><span class="line">    throw-exception-if-no-handler-found: true</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true # 当遇到同样名称时，是否允许覆盖注册</span><br></pre></td></tr></table></figure><p>这里是在原有的路由基础上加入 RequestRateLimiter限流过滤器，包括三个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: RequestRateLimiter #基于redis的Gateway的自身限流</span><br><span class="line">          args:</span><br><span class="line">            redis-rate-limiter.replenishRate: 3  #允许用户每秒处理多少个请求</span><br><span class="line">            redis-rate-limiter.burstCapacity: 5  #令牌桶的容量，允许在一秒钟内完成的最大请求数</span><br><span class="line">            key-resolver: &quot;#&#123;@ipKeyResolver&#125;&quot; #SPEL表达式取的对应的bean</span><br></pre></td></tr></table></figure><ul><li>其中 replenishRate，其含义表示允许每秒处理请求数；</li><li>burstCapacity 表示允许在一秒内处理的最大请求数；</li><li>key-resolver 这里采用请求 IP 限流，利用SPEL 表达式取对应的 bean</li></ul><p>写一个小脚本来压测一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 30000); do echo $(expr $i \\* 3 + 1);curl -i -H &quot;Accept: application&#x2F;json&quot; -H &quot;Authorization:bearer b064d95b-af3f-4053-a980-377c63ab3413&quot; -X GET http:&#x2F;&#x2F;10.10.15.5:5556&#x2F;order-service&#x2F;api&#x2F;order&#x2F;getUserInfo;done</span><br><span class="line"></span><br><span class="line">for i in $(seq 1 30000); do echo $(expr $i \\* 3 + 1);curl -i -H &quot;Accept: application&#x2F;json&quot; -H &quot;Authorization:bearer b064d95b-af3f-4053-a980-377c63ab3413&quot; -X GET http:&#x2F;&#x2F;10.10.15.5:5556&#x2F;admin-web&#x2F;api&#x2F;user&#x2F;getCurrentUser;done</span><br></pre></td></tr></table></figure><p>上面两个脚本分别对2个服务进行压测，打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">X-RateLimit-Remaining: 2</span><br><span class="line">X-RateLimit-Burst-Capacity: 3</span><br><span class="line">X-RateLimit-Replenish-Rate: 1</span><br><span class="line">Expires: 0</span><br><span class="line">Cache-Control: no-cache, no-store, max-age&#x3D;0, must-revalidate</span><br><span class="line">Set-Cookie: ORDER-SERVICE-SESSIONID&#x3D;R99Ljit9XvfCapyUJDWL8I0rZqxReoY6HwcQV2n2; path&#x3D;&#x2F;</span><br><span class="line">X-XSS-Protection: 1; mode&#x3D;block</span><br><span class="line">Pragma: no-cache</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">Date: Thu, 19 Mar 2020 06:32:27 GMT</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;message&quot;:&#123;&quot;status&quot;:200,&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;&#125;,&quot;data&quot;:&quot;&#123;\&quot;message\&quot;:&#123;\&quot;status\&quot;:200,\&quot;code\&quot;:0,\&quot;message\&quot;:\&quot;get user success\&quot;&#125;,\&quot;data\&quot;:&#123;\&quot;id\&quot;:23,\&quot;isAdmin\&quot;:1,\&quot;userId\&quot;:\&quot;fbb18810-e980-428c-932f-848f3b9e7c84\&quot;,\&quot;userType\&quot;:\&quot;super_admin\&quot;,\&quot;username\&quot;:\&quot;admin\&quot;,\&quot;realName\&quot;:\&quot;super_admin\&quot;,\&quot;password\&quot;:\&quot;$2a$10$89AqlYKlnsTpNmWcCMvgluRFQ&#x2F;6MLK1k&#x2F;nkBpz.Lw6Exh.WMQFH6W\&quot;,\&quot;phone\&quot;:null,\&quot;email\&quot;:null,\&quot;createBy\&quot;:\&quot;admin\&quot;,\&quot;createTime\&quot;:1573119753172,\&quot;updateBy\&quot;:\&quot;admin\&quot;,\&quot;updateTime\&quot;:1573119753172,\&quot;loginTime\&quot;:null,\&quot;expireTime\&quot;:null,\&quot;remarks\&quot;:\&quot;super_admin\&quot;,\&quot;delFlag\&quot;:0,\&quot;loginType\&quot;:null&#125;&#125;&quot;&#125;ex</span><br><span class="line"></span><br><span class="line">同一秒内多次后：</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 429 Too Many Requests</span><br><span class="line">X-RateLimit-Remaining: 0</span><br><span class="line">X-RateLimit-Burst-Capacity: 3</span><br><span class="line">X-RateLimit-Replenish-Rate: 1</span><br><span class="line">content-length: 0</span><br><span class="line"></span><br><span class="line">expr: syntax error</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 429 Too Many Requests</span><br><span class="line">X-RateLimit-Remaining: 0</span><br><span class="line">X-RateLimit-Burst-Capacity: 3</span><br><span class="line">X-RateLimit-Replenish-Rate: 1</span><br><span class="line">content-length: 0</span><br><span class="line"></span><br><span class="line">expr: syntax error</span><br></pre></td></tr></table></figure><p>从上面可以看到，执行后，会出现调用失败的情况，状态变为429 (Too Many Requests) 。</p><p>二、基于阿里开源限流神器：Sentinel</p><p>首先引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--基于 阿里的sentinel作限流 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在配置文件 application.yaml 文件中配置，需要新增2个配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: admin-web</span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br><span class="line">    sentinel:</span><br><span class="line">      eager: true #取消Sentinel控制台的懒加载</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 10.12.15.2:8080 #sentinel的Dashboard地址</span><br><span class="line">        port: 8719 #是sentinel应用端和控制台通信端口</span><br><span class="line">        heartbeat-interval-ms: 500 #心跳时间</span><br><span class="line">      scg:</span><br><span class="line">        fallback: #scg.fallback为sentinel限流后的响应配置</span><br><span class="line">          mode: response</span><br><span class="line">          response-status: 455</span><br><span class="line">          response-body: 已被限流</span><br></pre></td></tr></table></figure><p>其中，这里面配置了一个服务：spring.cloud.sentinel.transport.dashboard，配置的是 sentinel 的 Dashboard 地址。同时 spring.cloud.sentinel.transport.port 这个端口配置会在应用对应的机器上启动一个Http Server，该 Server 会与 Sentinel 控制台做交互。</p><p>Sentinel 默认为所有的 HTTP 服务提供限流埋点，上面配置完成后自动完成所有埋点，只需要控制配置限流规则即可。</p><p>这里我们讲下通过注解来给指定接口函数加上限流埋点，写一个RestController，在接口函数上加上注解 @SentinelResource：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value &#x3D; &quot;&#x2F;getToken&quot;)</span><br><span class="line">@SentinelResource(&quot;getToken&quot;)</span><br><span class="line">public Response&lt;Object&gt; getToken(Authentication authentication)&#123;</span><br><span class="line">    &#x2F;&#x2F;Authentication authentication &#x3D; SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    authentication.getCredentials();</span><br><span class="line">    OAuth2AuthenticationDetails details &#x3D; (OAuth2AuthenticationDetails)authentication.getDetails();</span><br><span class="line">    String token &#x3D; details.getTokenValue();</span><br><span class="line">    return Response.ok(200, 0, &quot;get token success&quot;, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码部分完成了，接下来先安装SentinelDashBoard，Sentinel DashBoard下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a> 。</p><p>下载完成后，命令启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.6.2.jar</span><br></pre></td></tr></table></figure><p>默认启动端口为8080，访问 IP:8080，就可以显示 Sentinel 的登录界面，用户名与密码均为sentinel。登录 Dashboard 成功后，多次访问接口”/getToken”，可以在 Dashboard 看到相应数据，这里不展示了。接下来可以设置接口的限流功能，在 “+流控” 按钮点击打开设置界面，设置阈值类型为 qps，单机阈值为5。</p><p>浏览器重复请求 <a href="http://10.10.15.5:5556/admin-web/api/user/getToken" target="_blank" rel="noopener">http://10.10.15.5:5556/admin-web/api/user/getToken</a> 如果超过阀值就会出现如下界面信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blocked by Sentinel (flow limiting)</span><br></pre></td></tr></table></figure><p>此时，就看到Sentinel 限流起作用了，可以加上 spring.cloud.sentinel.scg.fallback 为sentinel 限流后的响应配置，亦可自定义限流异常信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value &#x3D; &quot;&#x2F;getToken&quot;)</span><br><span class="line">@SentinelResource(value &#x3D; &quot;getToken&quot;, blockHandler &#x3D; &quot;handleSentinelException&quot;, blockHandlerClass &#x3D; &#123;MySentinelException.class&#125;))</span><br><span class="line">public Response&lt;Object&gt; getToken(Authentication authentication)&#123;</span><br><span class="line">    &#x2F;&#x2F;Authentication authentication &#x3D; SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    authentication.getCredentials();</span><br><span class="line">    OAuth2AuthenticationDetails details &#x3D; (OAuth2AuthenticationDetails)authentication.getDetails();</span><br><span class="line">    String token &#x3D; details.getTokenValue();</span><br><span class="line">    return Response.ok(200, 0, &quot;get token success&quot;, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MySentinelException &#123;</span><br><span class="line">    public static Response&lt;Object&gt; handleSentinelException(BlockException e) &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">        logger.info(&quot;Oops: &quot; + ex.getClass().getCanonicalName());</span><br><span class="line">        return Response.ok(200, -8, &quot;通过注解 @SentinelResource 配置限流埋点并自定义限流后的处理逻辑&quot;, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里讲下注解 @SentinelResource 包含以下属性：</p><ul><li>value：资源名称，必需项；</li><li>entryType：入口类型，可选项（默认为 EntryType.OUT）；</li><li>blockHandler：blockHandlerClass中对应的异常处理方法名，参数类型和返回值必须和原方法一致；</li><li>blockHandlerClass：自定义限流逻辑处理类</li></ul><p>Sentinel 限流逻辑处理完毕了，但每次服务重启后，之前配置的限流规则就会被清空。因为是内存形式的规则对象。所以下面就讲下用 Sentinel 的一个特性 ReadableDataSource 获取文件、数据库或者配置中心设置限流规则，目前支持 Apollo、Nacos、ZK 配置来管理。</p><p>首先回忆一下，一条限流规则主要由下面几个因素组成：</p><ul><li>resource：资源名，即限流规则的作用对象，即为注解 @SentinelResource 的value；</li><li>count：限流阈值；grade：限流阈值类型（QPS 或并发线程数）；</li><li>limitApp：流控针对的调用来源，若为 default 则不区分调用来源；</li><li>strategy：基于调用关系的限流策略；</li><li>controlBehavior：流量控制效果（直接拒绝、排队等待、匀速器模式）</li></ul><p>理解了意思，接下来通过文件来配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#通过文件读取限流规则</span><br><span class="line">spring.cloud.sentinel.datasource.ds1.file.file&#x3D;classpath:flowrule.json</span><br><span class="line">spring.cloud.sentinel.datasource.ds1.file.data-type&#x3D;json</span><br><span class="line">spring.cloud.sentinel.datasource.ds1.file.rule-type&#x3D;flow</span><br></pre></td></tr></table></figure><p>在resources新建一个文件，比如 flowrule.json 添加限流规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;resource&quot;: &quot;getToken&quot;,</span><br><span class="line">    &quot;count&quot;: 1,</span><br><span class="line">    &quot;controlBehavior&quot;: 0,</span><br><span class="line">    &quot;grade&quot;: 1,</span><br><span class="line">    &quot;limitApp&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;strategy&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;resource&quot;: &quot;resource&quot;,</span><br><span class="line">    &quot;count&quot;: 1,</span><br><span class="line">    &quot;controlBehavior&quot;: 0,</span><br><span class="line">    &quot;grade&quot;: 1,</span><br><span class="line">    &quot;limitApp&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;strategy&quot;: 0</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>重新启动项目，出现如下日志说明成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataSource ds1-sentinel-file-datasource start to loadConfig</span><br><span class="line">DataSource ds1-sentinel-file-datasource load 2 FlowRule</span><br></pre></td></tr></table></figure><p>如果采用 Nacos 作为配置获取限流规则，可在文件中加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 10.10.15.5:8848</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 10.10.15.5:8848</span><br><span class="line">    sentinel:</span><br><span class="line">      eager: true</span><br><span class="line">      transport:</span><br><span class="line">        dashboard: 10.10.15.5:8080</span><br><span class="line">      datasource:</span><br><span class="line">        ds1:</span><br><span class="line">          nacos:</span><br><span class="line">            server-addr: 10.10.15.5:8848</span><br><span class="line">            dataId: $&#123;spring.application.name&#125;-flow-rules</span><br><span class="line">            data-type: json</span><br><span class="line">            rule-type: flow</span><br></pre></td></tr></table></figure><p>以上即为限流的两种方式。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/title_img/6.jpg&quot; alt style=&quot;display: block; margin: 0 auto; max-width: 100%;&quot;&gt;

&lt;p&gt;在频繁的网络请求时，服务有时候也会受到很大的压力，尤其是那种网络攻击，非法的。
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试被问finally 和 return，到底谁先执行？</title>
    <link href="http://www.damon8.cn/2020/07/10/core-java01/"/>
    <id>http://www.damon8.cn/2020/07/10/core-java01/</id>
    <published>2020-07-10T06:13:40.000Z</published>
    <updated>2020-07-14T01:54:25.995Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/title_img/2.jpg" style="display: block; margin: 0 auto; max-width: 100%;"><p>经常有人面试被问到，finally 和 return，到底谁先执行呢？</p><p>为了解决这个问题，其实我们可以先想想 finally 是被用来干嘛的呢？它是被用来结束一些正常的收尾动作或结束标识。也就是说无论怎么样，finally 都会被最后执行。例如：一般在操作数据库时，用Jdbc连接池连接数据库后释放资源，需要 finally 来处理。再如 redis 连接，在获取连接池处理完数据的增删改查后，需要释放其连接池。</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/24/171aa134ff8418b4?w=255&h=255&f=jpeg&s=8706" alt=""></p><p>但是，如果 return 是在 finally 前面呢？或者在 finally 后面呢？我们先来看看 return 在 finally 前面时，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年3月18日 上午11:02:08</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class App &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(&quot;return result: &quot; + test());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static int test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      Thread.sleep(1);</span><br><span class="line">      System.out.println(&quot;執行 return 1&quot;);</span><br><span class="line">      return 1;&#x2F;&#x2F; return 在try里，則先執行，再執行finally后才有可能执行该return</span><br><span class="line">    &#125;</span><br><span class="line">    catch (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">      System.out.println(&quot;执行 finally&quot;);</span><br><span class="line">      &#x2F;&#x2F;return 3;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;System.out.println(&quot;執行 return 2&quot;);</span><br><span class="line">    &#x2F;&#x2F;return 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">執行 return 1</span><br><span class="line">执行 finally</span><br><span class="line">return result: 1</span><br></pre></td></tr></table></figure><p>也就是说，在执行 return 之前，先执行了 finally。</p><p>我们在看，如果 finally 前面有 return，在其内部也有 return：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年3月18日 上午11:02:08</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class App &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(&quot;return result: &quot; + test());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static int test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      Thread.sleep(1);</span><br><span class="line">      System.out.println(&quot;執行 return 1&quot;);</span><br><span class="line">      return 1;&#x2F;&#x2F; return 在try里，則先執行，再執行finally后才有可能执行该return</span><br><span class="line">    &#125;</span><br><span class="line">    catch (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">      System.out.println(&quot;执行 finally&quot;);</span><br><span class="line">      return 3;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;System.out.println(&quot;執行 return 2&quot;);</span><br><span class="line">    &#x2F;&#x2F;return 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">執行 return 1</span><br><span class="line">执行 finally</span><br><span class="line">return result: 3</span><br></pre></td></tr></table></figure><p>其内部被 return 后，就不再执行前面那个 return 了。</p><p>我们再来看 return 在 finally 之后，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2020年3月18日 上午11:02:08</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class App &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(&quot;return result: &quot; + test());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static int test() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      Thread.sleep(1);</span><br><span class="line">      &#x2F;&#x2F;System.out.println(&quot;執行 return 1&quot;);</span><br><span class="line">      &#x2F;&#x2F;return 1;&#x2F;&#x2F; return 在try里，則先執行，再執行finally后才有可能执行该return</span><br><span class="line">    &#125;</span><br><span class="line">    catch (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      &#x2F;&#x2F;return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    finally &#123;</span><br><span class="line">      System.out.println(&quot;执行 finally&quot;);</span><br><span class="line">      &#x2F;&#x2F;return 3;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;執行 return 2&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">执行 finally</span><br><span class="line">執行 return 2</span><br><span class="line">return result: 1</span><br></pre></td></tr></table></figure><p>总结：finally 在 return 之后时，先执行 finally 后，再执行该 return；finally 内含有 return 时，直接执行其 return 后结束；finally 在 return 前，执行完 finally 后再执行 return。</p><p>接下来还有常被问到的是：Java 中 final、finally、finalize 的区别与用法：</p><ul><li>final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。即如果一个类被声明为 final，意味着它不能作为父类被继承，因此一个类不能同时被声明为 abstract 的，又被声明为 final 的。变量或方法被声明为 final，可以保证它们在使用中不被修改。被声明为 final 的变量必须在声明时给赋予初值，而在以后的引用中只能读取，不可修改。被声明为 final 的方法也同样只能使用，不能重载。</li><li>finally 是异常处理语句结构的一部分，总是执行，常见的场景：释放一些资源，例如前面所说的 redis、db 等。在异常处理时提供 finally 块来执行任何清除操作，即在执行 catch 后会执行 finally 代码块。</li><li>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/title_img/2.jpg&quot; style=&quot;display: block; margin: 0 auto; max-width: 100%;&quot;&gt;

&lt;p&gt;经常有人面试被问到，finally 和 return，到底谁先执行呢？&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Kubernetes之实战一配置管理</title>
    <link href="http://www.damon8.cn/2020/07/10/springcloud-02/"/>
    <id>http://www.damon8.cn/2020/07/10/springcloud-02/</id>
    <published>2020-07-10T06:10:45.000Z</published>
    <updated>2020-07-14T01:54:46.041Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/title_img/7.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"><p>一直以来，玩springcloud的，基本都是在玩Springboot1.x，Springcloud(Dalston版)的众多相关组件来做配置中心、服务注册与发现，网关用的是Netflix公司对springboot做的LB，等等，但是这些东西太过沉重，复杂了。在一个以k8s为基础的iaas服务系统，如果不用k8s的特性来做这些事，那是说不过去的。理由这就不重复述说了。一句话：减少系统服务的复杂性。</p><p>本文主要介绍springcloud结合k8s，做配置管理，避免更多服务组件的冗余，完美填坑版！</p><p>环境：</p><pre><code>ubuntu16.04docker18.04k8s1.13.x +maven3.5.3java1.8 +springboot 2.1.1spring-cloud-kubernetes：1.0.1.RELEAS</code></pre><ol><li><p>前提</p><pre><code>Ubuntu下安装docker18.04 or 其它较高版本，k8s1.13.x及以上，jvm环境等。</code></pre></li><li><p>创建项目<br><img src="https://user-gold-cdn.xitu.io/2020/4/24/171aa1520aa32250?w=760&h=818&f=png&s=42056" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2020/4/24/171aa1520a95d3a8?w=699&h=662&f=png&s=28152" alt="在这里插入图片描述"><br>基础依赖：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">&lt;swagger.version&gt;2.6.1&lt;&#x2F;swagger.version&gt;</span><br><span class="line">&lt;xstream.version&gt;1.4.7&lt;&#x2F;xstream.version&gt;</span><br><span class="line">&lt;pageHelper.version&gt;4.1.6&lt;&#x2F;pageHelper.version&gt;</span><br><span class="line">&lt;fastjson.version&gt;1.2.51&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">&lt;shiro.version&gt;1.3.0&lt;&#x2F;shiro.version&gt;</span><br><span class="line">&lt;!-- &lt;kubernetes-client-version&gt;6.0.1&lt;&#x2F;kubernetes-client-version&gt; --&gt;</span><br><span class="line">&lt;kubernetes-client-version&gt;5.0.0&lt;&#x2F;kubernetes-client-version&gt;</span><br><span class="line">&lt;fabric8-kubernetes-client.version&gt;4.6.1&lt;&#x2F;fabric8-kubernetes-client.version&gt;&lt;!-- 对应k8s v1.15.3 --&gt;</span><br><span class="line">&lt;springcloud.version&gt;Greenwich.SR4&lt;&#x2F;springcloud.version&gt;</span><br><span class="line">&lt;springcloud.kubernetes.version&gt;1.1.1.RELEASE&lt;&#x2F;springcloud.kubernetes.version&gt;</span><br><span class="line">&lt;mysql.version&gt;5.1.46&lt;&#x2F;mysql.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;springcloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>核心依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;exclusion&gt;</span><br><span class="line">&lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-actuator-autoconfigure&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-kubernetes-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- springcloud-k8s-discovery --&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-commons&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-kubernetes-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-kubernetes-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-kubernetes-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><pre><code>**本次依赖引入配置管理、服务的发现(即消费者)。**</code></pre><p>如果有操作redis和db的话，引入相应的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--分页插件--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;pageHelper.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- datasource pool--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 对redis支持,引入的话项目缓存就支持redis了,所以必须加上redis的相关配置,否则操作相关缓存会报异常 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.7.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;19.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>剩下的就是构建镜像时的插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;finalName&gt;$&#123;project.artifactId&#125;&lt;&#x2F;finalName&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;jvmArguments&gt;-Dfile.encoding&#x3D;UTF-8&lt;&#x2F;jvmArguments&gt;</span><br><span class="line">&lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.jacoco&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jacoco-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;0.7.8&lt;&#x2F;version&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">&lt;goals&gt;</span><br><span class="line">&lt;goal&gt;prepare-agent&lt;&#x2F;goal&gt;</span><br><span class="line">&lt;goal&gt;report&lt;&#x2F;goal&gt;</span><br><span class="line">&lt;&#x2F;goals&gt;</span><br><span class="line">&lt;&#x2F;execution&gt;</span><br><span class="line">&lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>接下来，我们创建主类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(scanBasePackages &#x3D; &#123; &quot;com.leinao&quot; &#125;)</span><br><span class="line">@EnableConfigurationProperties(EnvConfig.class)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableHystrix</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class AdminApp &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(AdminApp.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里创建启动类时，对springboot的项目进行了优化，避免启动时加载很多，启动繁重，具体深度优化，可参考：<a href="https://mp.weixin.qq.com/s?__biz=MzU2NjIzNDk5NQ==&amp;mid=2247487954&amp;idx=1&amp;sn=2426451f3bd83161cfe1237f82d6b448&amp;key=f8fb043b3d2681a794e51a46e142af77355722dff712776af12b1f3c831218df6dfc329df63c8e5e550b3d88d58f0f178c4c3c16b141733e0e3344fa595e2bc25241d864d45132753fd99279b832de85&amp;ascene=1&amp;uin=MzQzMzI2NjAxMQ%3D%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;pass_ticket=pnSSI9jAq0M11V5hYMmkoVm5qO%2FWk9l3UUUJMglbdtdDOzLHa7iHsDmwSzs486sD。" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU2NjIzNDk5NQ==&amp;mid=2247487954&amp;idx=1&amp;sn=2426451f3bd83161cfe1237f82d6b448&amp;key=f8fb043b3d2681a794e51a46e142af77355722dff712776af12b1f3c831218df6dfc329df63c8e5e550b3d88d58f0f178c4c3c16b141733e0e3344fa595e2bc25241d864d45132753fd99279b832de85&amp;ascene=1&amp;uin=MzQzMzI2NjAxMQ%3D%3D&amp;devicetype=Windows+10&amp;version=62070158&amp;lang=zh_CN&amp;pass_ticket=pnSSI9jAq0M11V5hYMmkoVm5qO%2FWk9l3UUUJMglbdtdDOzLHa7iHsDmwSzs486sD。</a></p><p>然后我们在进行配置，注意：据官方说，项目的src\main\resources路径下不要创建application.yml文件，只创建名为bootstrap.yml的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    restart:</span><br><span class="line">      enabled: true</span><br><span class="line">    health:</span><br><span class="line">      enabled: true</span><br><span class="line">    info:</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: edge-admin</span><br><span class="line">  cloud:</span><br><span class="line">    kubernetes:</span><br><span class="line">      config:</span><br><span class="line">        sources:</span><br><span class="line">         - name: $&#123;spring.application.name&#125;</span><br><span class="line">           namespace: default</span><br><span class="line">      discovery:</span><br><span class="line">        all-namespaces: true</span><br><span class="line">      reload:</span><br><span class="line">        #自动更新配置的开关设置为打开</span><br><span class="line">        enabled: true</span><br><span class="line">        #更新配置信息的模式：polling是主动拉取，event是事件通知</span><br><span class="line">        mode: polling</span><br><span class="line">        #主动拉取的间隔时间是500毫秒</span><br><span class="line">        period: 500</span><br><span class="line">  http:</span><br><span class="line">    encoding:</span><br><span class="line">      charset: UTF-8</span><br><span class="line">      enabled: true</span><br><span class="line">      force: true</span><br><span class="line">  mvc:</span><br><span class="line">    throw-exception-if-no-handler-found: true</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true # 当遇到同样名称时，是否允许覆盖注册</span><br></pre></td></tr></table></figure><p>这里，我创建了bootstrap文件，同时也加了application文件，启动时会先加载bootstrap，验证有效。</p><p>在application.yaml中，我们加入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9999</span><br><span class="line">  undertow:</span><br><span class="line">    accesslog:</span><br><span class="line">      enabled: false</span><br><span class="line">      pattern: combined</span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      timeout: PT120M</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  path: &#x2F;data&#x2F;$&#123;spring.application.name&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoint:</span><br><span class="line">    restart:</span><br><span class="line">      enabled: true</span><br><span class="line">    health:</span><br><span class="line">      enabled: true</span><br><span class="line">    info:</span><br><span class="line">      enabled: true</span><br><span class="line">client:</span><br><span class="line">  http:</span><br><span class="line">    request:</span><br><span class="line">      connectTimeout: 8000</span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line">  typeAliasesPackage: com.demo.*.model</span><br><span class="line"></span><br><span class="line">backend:</span><br><span class="line">  ribbon:</span><br><span class="line">    eureka:</span><br><span class="line">      enabled: false</span><br><span class="line">    client:</span><br><span class="line">      enabled: true</span><br><span class="line">    ServerListRefreshInterval: 5000</span><br><span class="line">hystrix.command.BackendCall.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line">hystrix.threadpool.BackendCallThread.coreSize: 5</span><br></pre></td></tr></table></figure><p>注意：这里的server设置session的超时时间，对于springboot2.0与1.0版本完全不一样了，具体看内容。</p><p>其他的application-test.yaml等配置文件，配置的是日志的级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      leinao: INFO</span><br><span class="line">    org:</span><br><span class="line">      springframework:</span><br><span class="line">        web: INFO</span><br></pre></td></tr></table></figure><p>接下来配置环境配置：</p><p>EnvConfig.java类作为环境变量配置，注解ConfigurationProperties的prefix=”spring_cloud”，</p><p>表示该类用到的配置项都是名为”spring_cloud”的配置项的子内容 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line">package com.demo.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 配置信息</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2019年10月25日 下午1:54:01</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;greeting&quot;)</span><br><span class="line">public class EnvConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String message &#x3D; &quot;This is a dummy message&quot;;</span><br><span class="line"></span><br><span class="line">    private String container_command;</span><br><span class="line">    private String model_dir_path;</span><br><span class="line">    private String so_path;</span><br><span class="line">    private String config_path;</span><br><span class="line">    private String task_role_name;</span><br><span class="line">    private String container_name;</span><br><span class="line">    private String container_workdir;</span><br><span class="line">    private String init_containers_image;</span><br><span class="line">    private String service_account_name;</span><br><span class="line">    private String spring_mq_host;</span><br><span class="line">    private String spring_mq_port;</span><br><span class="line">    private String spring_mq_user;</span><br><span class="line">    private String spring_mq_pwd;</span><br><span class="line">    private String jdbc_driverClassName;</span><br><span class="line">    private String jdbc_url;</span><br><span class="line">    private String jdbc_username;</span><br><span class="line">    private String jdbc_password;</span><br><span class="line">    private String spring_redis_host;</span><br><span class="line">    private String spring_redis_port;</span><br><span class="line">    private String spring_redis_pwd;</span><br><span class="line">    private String kube_apiserver_address;</span><br><span class="line">    private String image_path;</span><br><span class="line">    private String volume_image_path;</span><br><span class="line">    private String inference_job_namespace;</span><br><span class="line">    private String api_version;</span><br><span class="line">    private String remote_deployment_url;</span><br><span class="line">    private String remote_pods_url;</span><br><span class="line">    private String remote_deployment_pod_log_url;</span><br><span class="line">    private String base_path;</span><br><span class="line">    private String chunk_size;</span><br><span class="line">    private String cas_url;</span><br><span class="line">    private String create_job_url;</span><br><span class="line">    private String abnormal_data_dir;</span><br><span class="line"></span><br><span class="line">    private Long expire_time&#x3D; 600000L;</span><br><span class="line"></span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return this.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message &#x3D; message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public String getContainer_command() &#123;</span><br><span class="line">return container_command;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setContainer_command(String container_command) &#123;</span><br><span class="line">this.container_command &#x3D; container_command;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getModel_dir_path() &#123;</span><br><span class="line">return model_dir_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setModel_dir_path(String model_dir_path) &#123;</span><br><span class="line">this.model_dir_path &#x3D; model_dir_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSo_path() &#123;</span><br><span class="line">return so_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSo_path(String so_path) &#123;</span><br><span class="line">this.so_path &#x3D; so_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getConfig_path() &#123;</span><br><span class="line">return config_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setConfig_path(String config_path) &#123;</span><br><span class="line">this.config_path &#x3D; config_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTask_role_name() &#123;</span><br><span class="line">return task_role_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTask_role_name(String task_role_name) &#123;</span><br><span class="line">this.task_role_name &#x3D; task_role_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getContainer_name() &#123;</span><br><span class="line">return container_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setContainer_name(String container_name) &#123;</span><br><span class="line">this.container_name &#x3D; container_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getContainer_workdir() &#123;</span><br><span class="line">return container_workdir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setContainer_workdir(String container_workdir) &#123;</span><br><span class="line">this.container_workdir &#x3D; container_workdir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getInit_containers_image() &#123;</span><br><span class="line">return init_containers_image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInit_containers_image(String init_containers_image) &#123;</span><br><span class="line">this.init_containers_image &#x3D; init_containers_image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getService_account_name() &#123;</span><br><span class="line">return service_account_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setService_account_name(String service_account_name) &#123;</span><br><span class="line">this.service_account_name &#x3D; service_account_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_host() &#123;</span><br><span class="line">return spring_mq_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_host(String spring_mq_host) &#123;</span><br><span class="line">this.spring_mq_host &#x3D; spring_mq_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_port() &#123;</span><br><span class="line">return spring_mq_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_port(String spring_mq_port) &#123;</span><br><span class="line">this.spring_mq_port &#x3D; spring_mq_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_user() &#123;</span><br><span class="line">return spring_mq_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_user(String spring_mq_user) &#123;</span><br><span class="line">this.spring_mq_user &#x3D; spring_mq_user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_mq_pwd() &#123;</span><br><span class="line">return spring_mq_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_mq_pwd(String spring_mq_pwd) &#123;</span><br><span class="line">this.spring_mq_pwd &#x3D; spring_mq_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_driverClassName() &#123;</span><br><span class="line">return jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_driverClassName(String jdbc_driverClassName) &#123;</span><br><span class="line">this.jdbc_driverClassName &#x3D; jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_url() &#123;</span><br><span class="line">return jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_url(String jdbc_url) &#123;</span><br><span class="line">this.jdbc_url &#x3D; jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_username() &#123;</span><br><span class="line">return jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_username(String jdbc_username) &#123;</span><br><span class="line">this.jdbc_username &#x3D; jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_password() &#123;</span><br><span class="line">return jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_password(String jdbc_password) &#123;</span><br><span class="line">this.jdbc_password &#x3D; jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_host() &#123;</span><br><span class="line">return spring_redis_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_host(String spring_redis_host) &#123;</span><br><span class="line">this.spring_redis_host &#x3D; spring_redis_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_port() &#123;</span><br><span class="line">return spring_redis_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_port(String spring_redis_port) &#123;</span><br><span class="line">this.spring_redis_port &#x3D; spring_redis_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSpring_redis_pwd() &#123;</span><br><span class="line">return spring_redis_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSpring_redis_pwd(String spring_redis_pwd) &#123;</span><br><span class="line">this.spring_redis_pwd &#x3D; spring_redis_pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getKube_apiserver_address() &#123;</span><br><span class="line">return kube_apiserver_address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setKube_apiserver_address(String kube_apiserver_address) &#123;</span><br><span class="line">this.kube_apiserver_address &#x3D; kube_apiserver_address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getImage_path() &#123;</span><br><span class="line">return image_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setImage_path(String image_path) &#123;</span><br><span class="line">this.image_path &#x3D; image_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getVolume_image_path() &#123;</span><br><span class="line">return volume_image_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setVolume_image_path(String volume_image_path) &#123;</span><br><span class="line">this.volume_image_path &#x3D; volume_image_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getInference_job_namespace() &#123;</span><br><span class="line">return inference_job_namespace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInference_job_namespace(String inference_job_namespace) &#123;</span><br><span class="line">this.inference_job_namespace &#x3D; inference_job_namespace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getApi_version() &#123;</span><br><span class="line">return api_version;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setApi_version(String api_version) &#123;</span><br><span class="line">this.api_version &#x3D; api_version;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getRemote_deployment_url() &#123;</span><br><span class="line">return remote_deployment_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setRemote_deployment_url(String remote_deployment_url) &#123;</span><br><span class="line">this.remote_deployment_url &#x3D; remote_deployment_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getRemote_pods_url() &#123;</span><br><span class="line">return remote_pods_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setRemote_pods_url(String remote_pods_url) &#123;</span><br><span class="line">this.remote_pods_url &#x3D; remote_pods_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getRemote_deployment_pod_log_url() &#123;</span><br><span class="line">return remote_deployment_pod_log_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setRemote_deployment_pod_log_url(String remote_deployment_pod_log_url) &#123;</span><br><span class="line">this.remote_deployment_pod_log_url &#x3D; remote_deployment_pod_log_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getBase_path() &#123;</span><br><span class="line">return base_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setBase_path(String base_path) &#123;</span><br><span class="line">this.base_path &#x3D; base_path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getChunk_size() &#123;</span><br><span class="line">return chunk_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setChunk_size(String chunk_size) &#123;</span><br><span class="line">this.chunk_size &#x3D; chunk_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Long getExpire_time() &#123;</span><br><span class="line">return expire_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setExpire_time(Long expire_time) &#123;</span><br><span class="line">this.expire_time &#x3D; expire_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCas_url() &#123;</span><br><span class="line">return cas_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCas_url(String cas_url) &#123;</span><br><span class="line">this.cas_url &#x3D; cas_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCreate_job_url() &#123;</span><br><span class="line">return create_job_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreate_job_url(String create_job_url) &#123;</span><br><span class="line">this.create_job_url &#x3D; create_job_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getAbnormal_data_dir() &#123;</span><br><span class="line">return abnormal_data_dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setAbnormal_data_dir(String abnormal_data_dir) &#123;</span><br><span class="line">this.abnormal_data_dir &#x3D; abnormal_data_dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试demo类：</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2019年12月27日 上午9:16:41</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class DemoController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">    private EnvConfig envConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> * @date 2019年12月26日</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@GetMapping(value &#x3D; &quot;&#x2F;getTest&quot;)</span><br><span class="line">public String getTest() &#123;</span><br><span class="line">return envConfig.getBase_path();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点：默认的svc是没有权限访问k8s的API Server的资源的，执行如下脚本，可以提升权限，允许其访问configmap的可读权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#使用这个代表集群最高权限，deployment中无需引入serviceAccount: config-reader</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: fabric8-rbac</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    # Reference to upper&#39;s &#96;metadata.name&#96;</span><br><span class="line">    name: default</span><br><span class="line">    # Reference to upper&#39;s &#96;metadata.namespace&#96;</span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure><p>配置configmap：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: edge-admin</span><br><span class="line">data:</span><br><span class="line">  application.yaml: |-</span><br><span class="line">    greeting:</span><br><span class="line">      message: Say Hello to the World</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: dev</span><br><span class="line">    greeting:</span><br><span class="line">      message: Say Hello to the Developers</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: test</span><br><span class="line">    greeting:</span><br><span class="line">      message: Say Hello to the Test</span><br><span class="line">    ---</span><br><span class="line">    spring:</span><br><span class="line">      profiles: prod</span><br><span class="line">    greeting:</span><br><span class="line">      message: Say Hello to the Prod</span><br></pre></td></tr></table></figure><p>接下来就是执行deployment启动项目了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: edge-admin-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: edge-admin</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: edge-admin</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: edge-admin</span><br><span class="line">    spec:</span><br><span class="line">      nodeSelector:</span><br><span class="line">        edge-admin: &quot;true&quot;</span><br><span class="line">      containers:</span><br><span class="line">      - name: edge-admin</span><br><span class="line">        image: 10.11.2.20:8000&#x2F;harbor&#x2F;edge-admin</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">          - name: admin01</span><br><span class="line">            containerPort: 1002</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: &#x2F;home&#x2F;edge-admin</span><br><span class="line">          name: edge-admin-path</span><br><span class="line">        - mountPath: &#x2F;data&#x2F;edge-admin</span><br><span class="line">          name: edge-admin-log-path</span><br><span class="line">        - mountPath: &#x2F;etc&#x2F;kubernetes</span><br><span class="line">          name: kube-config-path</span><br><span class="line">        - mountPath: &#x2F;abnormal_data_dir</span><br><span class="line">          name: abnormal-data-dir</span><br><span class="line">        args: [&quot;sh&quot;, &quot;-c&quot;, &quot;nohup java $JAVA_OPTS -jar -XX:MetaspaceSize&#x3D;128m -XX:MaxMetaspaceSize&#x3D;128m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio&#x3D;8 -XX:+UseConcMarkSweepGC edge-admin.jar --spring.profiles.active&#x3D;dev&quot;, &quot;&amp;&quot;]</span><br><span class="line">      hostAliases:</span><br><span class="line">      - ip: &quot;10.10.1.5&quot;</span><br><span class="line">        hostnames:</span><br><span class="line">        - &quot;k8s.api.server&quot;</span><br><span class="line">        - &quot;foo.remote&quot;</span><br><span class="line">      - ip: &quot;127.0.0.1&quot;</span><br><span class="line">        hostnames:</span><br><span class="line">        - &quot;foo.localhost&quot;</span><br><span class="line">      - ip: &quot;0.0.0.0&quot;</span><br><span class="line">        hostnames:</span><br><span class="line">        - &quot;foo.all&quot;</span><br><span class="line">      #利用admin-rbac.yaml来获取权限</span><br><span class="line">      #serviceAccount: config-reader</span><br><span class="line">      #serviceAccountName: config-reader</span><br><span class="line">      volumes:</span><br><span class="line">      - name: edge-admin-path</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;var&#x2F;pai&#x2F;edge-admin</span><br><span class="line">      - name: edge-admin-log-path</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;data&#x2F;edge-admin</span><br><span class="line">      - name: kube-config-path</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;etc&#x2F;kubernetes</span><br><span class="line">      - name: abnormal-data-dir</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;data&#x2F;images&#x2F;detect_result&#x2F;defect</span><br></pre></td></tr></table></figure><p>其中，前面说的，项目启动参数对其性能优化，是对jvm的参数设置。分别执行kubectl apply -f deployment.yaml和configmap.yaml，创建demo时所用的configmap的资源以及利用k8s部署启动项目。</p><p>最后打开浏览器：执行ip:port/hello，即可看到configmap中对应的属性值，这里就不展示了，有兴趣的可以试试。</p><p>以上即是对springcloud和k8s首次结合后利用其configmap特性，来做配置管理，摒弃springcloud-config、spring-boot-starter-actuator的组件，减少系统的复杂性，毕竟k8s是肯定会被用到的，所以可以直接用其特性来做系统服务的环境配置管理。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/title_img/7.jpg&quot; alt style=&quot;display: block; margin: 0 auto; max-width: 100%;&quot;&gt;

&lt;p&gt;一直以来，玩springcloud的，基本都是在玩Springboot1.x，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅谈微服务安全架构设计</title>
    <link href="http://www.damon8.cn/2020/07/10/micro-service01/"/>
    <id>http://www.damon8.cn/2020/07/10/micro-service01/</id>
    <published>2020-07-10T05:57:33.000Z</published>
    <updated>2020-07-13T01:11:21.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、-回顾微服务设计理念"><a href="#1、-回顾微服务设计理念" class="headerlink" title="1、 回顾微服务设计理念"></a>1、 回顾微服务设计理念</h2><br><br><p>在前面的一篇文章 <a href="https://gitbook.cn/gitchat/activity/5e8ada3452383e517ff2b5f8" target="_blank" rel="noopener">https://gitbook.cn/gitchat/activity/5e8ada3452383e517ff2b5f8</a> 中，我们了解到什么是微服务，微服务的划分依据，其实，说到底，微服务的设计，有其独到的好处：使得各个模块之间<strong>解耦合</strong>，让每一个模块有自己独立的灵魂，其他服务即使出现任何问题，自己不会受到任何的影响。这是微服务的核心宗旨。那么今天要讲的微服务安全性问题，其实也是反映微服务的一个核心：<strong>高内聚</strong>。所谓高内聚，简单的理解就是，对外暴露的最小限度，降低其依赖关系，大部分都作为一个黑盒子封装起来，不直接对外，这样，即使内部发生变更、翻云覆雨，对外的接口没发生改变，这才是好的微服务设计理念，做到完美的对外兼容，一个好的架构设计，首先，这一点可能需要 get 到位，不知道大家咋认为呢？所以今天说的微服务安全性，就跟这个<strong>高内聚</strong>有一点点相关了。或者说，体现了微服务设计的核心理念。</p><br><br><h2 id="2、微服务下的各种安全性保证"><a href="#2、微服务下的各种安全性保证" class="headerlink" title="2、微服务下的各种安全性保证"></a>2、微服务下的各种安全性保证</h2><br><h3 id="2-1-常见的几种安全性措施"><a href="#2-1-常见的几种安全性措施" class="headerlink" title="2.1 常见的几种安全性措施"></a>2.1 常见的几种安全性措施</h3><p>在微服务中，我们常见的，有如下几种安全性设计的举措：网关设计、服务端口的对外暴露的限度、token 鉴权、OAuth2 的统一认证、微信中的 openId 设计等。这些都是在为服务的安全性作考虑的一些举措。</p><h3 id="2-2-OAuth2-的概念"><a href="#2-2-OAuth2-的概念" class="headerlink" title="2.2 OAuth2 的概念"></a>2.2 OAuth2 的概念</h3><p>何为 OAuth2 呢？我们先了解 OAuth，Oauth 是一个开放标准，假设有这样一种场景：一个 QQ 应用，希望让一个第三方的（慕课网）应用，能够得到关于自身的一些信息（唯一用户标识，比如说 QQ 号，用户个人信息、一些基础资料，昵称和头像等）。但是在获得这些资料的同时，却又不能提供用户名和密码之类的信息。如下图：</p><p><img src="https://imgkr.cn-bj.ufileos.com/8c7bc122-ef5b-4523-9c20-f28742054ee3.png" alt=""></p><p>而 OAuth 就是实现上述目标的一种规范。OAuth2 是 OAuth 协议的延续版本，但不兼容 OAuth1.0，即完全废弃了 OAuth1.0。</p><p>OAuth2.0 有这么几个术语：客户凭证、令牌、作用域。</p><p>客户凭证：客户的 clientId 和密码用于认证客户。</p><p>令牌：授权服务器在接收到客户请求后颁发的令牌。</p><p>作用域：客户请求访问令牌时,由资源拥有者额外指定的细分权限。</p><h3 id="2-3-OAuth2-的原理"><a href="#2-3-OAuth2-的原理" class="headerlink" title="2.3 OAuth2 的原理"></a>2.3 OAuth2 的原理</h3><p>在 OAuth2 的授权机制中有 4 个核心对象：</p><p>Resource Owner：资源拥有者，即用户。</p><p>Client：第三方接入平台、应用，请求者。</p><p>Resource Server：资源服务器，存储用户信息、用户的资源信息等资源。</p><p>Authorization Server：授权认证服务器。</p><p>实现机制：</p><p>用户在第三方应用上点击登录，应用向认证服务器发送请求，说有用户希望进行授权操作，同时说明自己是谁、用户授权完成后的回调 url，例如：上面的截图，通过慕课网访问 QQ 获取授权。</p><p>认证服务器展示给用户自己的授权界面。</p><p>用户进行授权操作，认证服务器验证成功后，生成一个授权编码 code，并跳转到第三方的回调 url。</p><p>第三方应用拿到 code 后，连同自己在平台上的身份信息（ID 密码）发送给认证服务器，再一次进行验证请求，说明自己的身份正确，并且用户也已经授权我了，来换取访问用户资源的权限。</p><p>认证服务器对请求信息进行验证，如果没问题，就生成访问资源服务器的令牌 access_token，交给第三方应用。</p><p>第三方应用使用 access_token 向资源服务器请求资源。</p><p>资源服务器验证 access_token 成功后返回响应资源。</p><br><h3 id="2-4-OAuth2-的几种授权模式"><a href="#2-4-OAuth2-的几种授权模式" class="headerlink" title="2.4 OAuth2 的几种授权模式"></a>2.4 OAuth2 的几种授权模式</h3><p>OAuth2.0 有这么几个授权模式：授权码模式、简化模式、密码模式、客户端凭证模式。</p><p>授权码模式：（authorization_code）是功能最完整、流程最严密的授权模式，code 保证了 token 的安全性，即使 code 被拦截，由于没有 client_secret，也是无法通过 code 获得 token 的。</p><p>简化模式：和授权码模式类似，只不过少了获取 code 的步骤，是直接获取令牌 token 的，适用于公开的浏览器单页应用，令牌直接从授权服务器返回，不支持刷新令牌，且没有 code 安全保证，令牌容易因为被拦截窃听而泄露。</p><p>密码模式：使用用户名/密码作为授权方式从授权服务器上获取令牌，一般不支持刷新令牌。</p><p>客户端凭证模式：一般用于资源服务器是应用的一个后端模块，客户端向认证服务器验证身份来获取令牌。</p><br><h3 id="2-5-实战-OAuth2-的密码模式"><a href="#2-5-实战-OAuth2-的密码模式" class="headerlink" title="2.5 实战 OAuth2 的密码模式"></a>2.5 实战 OAuth2 的密码模式</h3><p>本次结合 Spring Cloud Alibaba 组件，实现微服务的安全系统体系，本文主要讲解 OAuth2 的部分。</p><p>先来看鉴权中心，鉴权中心需要做到提供单点服务，为所有的客户端微服务的安全保驾护航。下面首先看依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-oauth2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!-- 对redis支持,引入的话项目缓存就支持redis了,所以必须加上redis的相关配置,否则操作相关缓存会报异常 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>如果需要使用 redis 来存储 token，则可以加入 reids 依赖，如果使用 jwt，则使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>当然，本次的项目模块引入的是比较新的 Spring Boot:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.13.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;relativePath&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">      &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">      &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">      &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">      &lt;swagger.version&gt;2.6.1&lt;&#x2F;swagger.version&gt;</span><br><span class="line">      &lt;xstream.version&gt;1.4.7&lt;&#x2F;xstream.version&gt;</span><br><span class="line">      &lt;pageHelper.version&gt;4.1.6&lt;&#x2F;pageHelper.version&gt;</span><br><span class="line">      &lt;fastjson.version&gt;1.2.51&lt;&#x2F;fastjson.version&gt;</span><br><span class="line">      &lt;springcloud.version&gt;Greenwich.SR3&lt;&#x2F;springcloud.version&gt;</span><br><span class="line">      &lt;mysql.version&gt;5.1.46&lt;&#x2F;mysql.version&gt;</span><br><span class="line"></span><br><span class="line">      &lt;alibaba-cloud.version&gt;2.1.1.RELEASE&lt;&#x2F;alibaba-cloud.version&gt;</span><br><span class="line">      &lt;springcloud.alibaba.version&gt;0.9.0.RELEASE&lt;&#x2F;springcloud.alibaba.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;alibaba-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springcloud.alibaba.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;springcloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>剩下的，像数据库、持久化等，其他的可以根据需要添加。</p><p>配置完成后，我们需要写一个认证服务器的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.env.Environment;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line">import org.springframework.security.oauth2.provider.error.WebResponseExceptionTranslator;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenEnhancerChain;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line">import com.damon.component.JwtTokenEnhancer;</span><br><span class="line">import com.damon.login.service.LoginService;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LoginService loginService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    &#x2F;&#x2F;@Qualifier(&quot;jwtTokenStore&quot;)</span><br><span class="line">    @Qualifier(&quot;redisTokenStore&quot;)</span><br><span class="line">    private TokenStore tokenStore;</span><br><span class="line">    &#x2F;*@Autowired</span><br><span class="line">    private JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">    @Autowired</span><br><span class="line">    private JwtTokenEnhancer jwtTokenEnhancer;*&#x2F;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private WebResponseExceptionTranslator userOAuth2WebResponseExceptionTranslator;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * redis token 方式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123;</span><br><span class="line">    &#x2F;&#x2F;验证时发生的情况处理</span><br><span class="line">        endpoints.authenticationManager(authenticationManager) &#x2F;&#x2F;支持 password 模式</span><br><span class="line">        .exceptionTranslator(userOAuth2WebResponseExceptionTranslator)&#x2F;&#x2F;自定义异常处理类添加到认证服务器配置</span><br><span class="line">                .userDetailsService(loginService)</span><br><span class="line">                .tokenStore(tokenStore);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 客户端配置（给谁发令牌）</span><br><span class="line">     * 不同客户端配置不同</span><br><span class="line">     *</span><br><span class="line">     * authorizedGrantTypes 可以包括如下几种设置中的一种或多种：</span><br><span class="line">authorization_code：授权码类型。需要redirect_uri</span><br><span class="line">implicit：隐式授权类型。需要redirect_uri</span><br><span class="line">password：资源所有者（即用户）密码类型。</span><br><span class="line">client_credentials：客户端凭据（客户端ID以及Key）类型。</span><br><span class="line">refresh_token：通过以上授权获得的刷新令牌来获取新的令牌。</span><br><span class="line"></span><br><span class="line">   accessTokenValiditySeconds：token 的有效期</span><br><span class="line">   scopes：用来限制客户端访问的权限，在换取的 token 的时候会带上 scope 参数，只有在 scopes 定义内的，才可以正常换取 token。</span><br><span class="line">     * @param clients</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @author Damon</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(&quot;provider-service&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;provider-service-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)&#x2F;&#x2F;配置申请的权限范围</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2001&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;consumer-service&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;consumer-service-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)&#x2F;&#x2F;配置申请的权限范围</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2005&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;resource-service&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;resource-service-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)&#x2F;&#x2F;配置申请的权限范围</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2006&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;test-sentinel&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;test-sentinel-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)&#x2F;&#x2F;配置申请的权限范围</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2008&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;test-sentinel-feign&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;test-sentinel-feign-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)&#x2F;&#x2F;配置申请的权限范围</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2010&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;customer-service&quot;)</span><br><span class="line">                .secret(passwordEncoder.encode(&quot;customer-service-123&quot;))</span><br><span class="line">                .accessTokenValiditySeconds(3600)</span><br><span class="line">                .refreshTokenValiditySeconds(864000)&#x2F;&#x2F;配置刷新token的有效期</span><br><span class="line">                .autoApprove(true) &#x2F;&#x2F;自动授权配置</span><br><span class="line">                .scopes(&quot;all&quot;)</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;client_credentials&quot;, &quot;refresh_token&quot;)&#x2F;&#x2F;配置授权模式</span><br><span class="line">                .redirectUris(&quot;http:&#x2F;&#x2F;localhost:2012&#x2F;login&quot;)&#x2F;&#x2F;授权码模式开启后必须指定</span><br><span class="line">                ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerSecurityConfigurer security) &#123;</span><br><span class="line">    security.allowFormAuthenticationForClients();&#x2F;&#x2F;是允许客户端访问 OAuth2 授权接口，否则请求 token 会返回 401</span><br><span class="line">    security.checkTokenAccess(&quot;isAuthenticated()&quot;);&#x2F;&#x2F;是允许已授权用户访问 checkToken 接口</span><br><span class="line">        security.tokenKeyAccess(&quot;isAuthenticated()&quot;); &#x2F;&#x2F; security.tokenKeyAccess(&quot;permitAll()&quot;);获取密钥需要身份认证，使用单点登录时必须配置，是允许已授权用户获取 token 接口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis 配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line">import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RedisTokenStoreConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TokenStore redisTokenStore ()&#123;</span><br><span class="line">        &#x2F;&#x2F;return new RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    return new MyRedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面接下来需要配置安全访问的拦截，这时候需要 SpringSecurity:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line">import org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">        return new BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Override</span><br><span class="line">    public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class="line">        return super.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">                .disable()</span><br><span class="line"></span><br><span class="line">                .exceptionHandling()</span><br><span class="line">        .authenticationEntryPoint(new AuthenticationEntryPointHandle())</span><br><span class="line">        &#x2F;&#x2F;.authenticationEntryPoint((request, response, authException) -&gt; response.sendError(HttpServletResponse.SC_UNAUTHORIZED))</span><br><span class="line">        .and()</span><br><span class="line"></span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;oauth&#x2F;**&quot;, &quot;&#x2F;login&#x2F;**&quot;)&#x2F;&#x2F;&quot;&#x2F;logout&#x2F;**&quot;</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*@Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService)</span><br><span class="line">            .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(&quot;&#x2F;css&#x2F;**&quot;, &quot;&#x2F;js&#x2F;**&quot;, &quot;&#x2F;plugins&#x2F;**&quot;, &quot;&#x2F;favicon.ico&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再者，就是需要配置资源拦截:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableResourceServer</span><br><span class="line">public class ResourceServerConfig extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line"></span><br><span class="line">                .exceptionHandling()</span><br><span class="line">        .authenticationEntryPoint(new AuthenticationEntryPointHandle())</span><br><span class="line">        &#x2F;&#x2F;.authenticationEntryPoint((request, response, authException) -&gt; response.sendError(HttpServletResponse.SC_UNAUTHORIZED))</span><br><span class="line">        .and()</span><br><span class="line"></span><br><span class="line">                .requestMatchers().antMatchers(&quot;&#x2F;api&#x2F;**&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;api&#x2F;**&quot;).authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，在上面我们配置了资源拦截、权限拦截的统一处理配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.damon.commons.Response;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * 统一结果处理</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class AuthenticationEntryPointHandle implements AuthenticationEntryPoint &#123;</span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Override</span><br><span class="line">public void commence(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">AuthenticationException authException) throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">&#x2F;&#x2F;response.setStatus(HttpStatus.OK.value());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);  &#x2F;&#x2F;gateway已加，无需再加</span><br><span class="line">        &#x2F;&#x2F;response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;token&quot;);</span><br><span class="line">        &#x2F;&#x2F;解决低危漏洞点击劫持 X-Frame-Options Header未配置</span><br><span class="line">        response.setHeader(&quot;X-Frame-Options&quot;, &quot;SAMEORIGIN&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setContentType(&quot;application&#x2F;json; charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">response.getWriter()</span><br><span class="line">.write(JSON.toJSONString(Response.ok(response.getStatus(), -2, authException.getMessage(), null)));</span><br><span class="line">&#x2F;*response.getWriter()</span><br><span class="line">.write(JSON.toJSONString(Response.ok(200, -2, &quot;Internal Server Error&quot;, authException.getMessage())));*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，自定义异常处理类添加到认证服务器配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.security.access.AccessDeniedException;</span><br><span class="line">import org.springframework.security.core.AuthenticationException;</span><br><span class="line">import org.springframework.security.oauth2.common.DefaultThrowableAnalyzer;</span><br><span class="line">import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;</span><br><span class="line">import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;</span><br><span class="line">import org.springframework.security.oauth2.provider.error.WebResponseExceptionTranslator;</span><br><span class="line">import org.springframework.security.web.util.ThrowableAnalyzer;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.HttpRequestMethodNotSupportedException;</span><br><span class="line"></span><br><span class="line">import com.damon.exception.UserOAuth2Exception;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * 自定义异常转换类</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Component(&quot;userOAuth2WebResponseExceptionTranslator&quot;)</span><br><span class="line">public class UserOAuth2WebResponseExceptionTranslator implements WebResponseExceptionTranslator &#123;</span><br><span class="line">    private ThrowableAnalyzer throwableAnalyzer &#x3D; new DefaultThrowableAnalyzer();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ResponseEntity&lt;OAuth2Exception&gt; translate(Exception e) throws Exception &#123;</span><br><span class="line">        Throwable[] causeChain &#x3D; this.throwableAnalyzer.determineCauseChain(e);</span><br><span class="line">        Exception ase &#x3D; (OAuth2Exception)this.throwableAnalyzer.getFirstThrowableOfType(OAuth2Exception.class, causeChain);</span><br><span class="line">        &#x2F;&#x2F;异常链中有OAuth2Exception异常</span><br><span class="line">        if (ase !&#x3D; null) &#123;</span><br><span class="line">            return this.handleOAuth2Exception((OAuth2Exception)ase);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;身份验证相关异常</span><br><span class="line">        ase &#x3D; (AuthenticationException)this.throwableAnalyzer.getFirstThrowableOfType(AuthenticationException.class, causeChain);</span><br><span class="line">        if (ase !&#x3D; null) &#123;</span><br><span class="line">            return this.handleOAuth2Exception(new UserOAuth2WebResponseExceptionTranslator.UnauthorizedException(e.getMessage(), e));</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;异常链中包含拒绝访问异常</span><br><span class="line">        ase &#x3D; (AccessDeniedException)this.throwableAnalyzer.getFirstThrowableOfType(AccessDeniedException.class, causeChain);</span><br><span class="line">        if (ase instanceof AccessDeniedException) &#123;</span><br><span class="line">            return this.handleOAuth2Exception(new UserOAuth2WebResponseExceptionTranslator.ForbiddenException(ase.getMessage(), ase));</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;异常链中包含Http方法请求异常</span><br><span class="line">        ase &#x3D; (HttpRequestMethodNotSupportedException)this.throwableAnalyzer.getFirstThrowableOfType(HttpRequestMethodNotSupportedException.class, causeChain);</span><br><span class="line">        if(ase instanceof HttpRequestMethodNotSupportedException)&#123;</span><br><span class="line">            return this.handleOAuth2Exception(new UserOAuth2WebResponseExceptionTranslator.MethodNotAllowed(ase.getMessage(), ase));</span><br><span class="line">        &#125;</span><br><span class="line">        return this.handleOAuth2Exception(new UserOAuth2WebResponseExceptionTranslator.ServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ResponseEntity&lt;OAuth2Exception&gt; handleOAuth2Exception(OAuth2Exception e) throws IOException &#123;</span><br><span class="line">        int status &#x3D; e.getHttpErrorCode();</span><br><span class="line">        HttpHeaders headers &#x3D; new HttpHeaders();</span><br><span class="line">        headers.set(&quot;Cache-Control&quot;, &quot;no-store&quot;);</span><br><span class="line">        headers.set(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        if (status &#x3D;&#x3D; HttpStatus.UNAUTHORIZED.value() || e instanceof InsufficientScopeException) &#123;</span><br><span class="line">            headers.set(&quot;WWW-Authenticate&quot;, String.format(&quot;%s %s&quot;, &quot;Bearer&quot;, e.getSummary()));</span><br><span class="line">        &#125;</span><br><span class="line">        UserOAuth2Exception exception &#x3D; new UserOAuth2Exception(e.getMessage(),e);</span><br><span class="line">        ResponseEntity&lt;OAuth2Exception&gt; response &#x3D; new ResponseEntity(exception, headers, HttpStatus.valueOf(status));</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static class MethodNotAllowed extends OAuth2Exception &#123;</span><br><span class="line">        public MethodNotAllowed(String msg, Throwable t) &#123;</span><br><span class="line">            super(msg, t);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String getOAuth2ErrorCode() &#123;</span><br><span class="line">            return &quot;method_not_allowed&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public int getHttpErrorCode() &#123;</span><br><span class="line">            return 405;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class UnauthorizedException extends OAuth2Exception &#123;</span><br><span class="line">        public UnauthorizedException(String msg, Throwable t) &#123;</span><br><span class="line">            super(msg, t);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String getOAuth2ErrorCode() &#123;</span><br><span class="line">            return &quot;unauthorized&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public int getHttpErrorCode() &#123;</span><br><span class="line">            return 401;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class ServerErrorException extends OAuth2Exception &#123;</span><br><span class="line">        public ServerErrorException(String msg, Throwable t) &#123;</span><br><span class="line">            super(msg, t);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String getOAuth2ErrorCode() &#123;</span><br><span class="line">            return &quot;server_error&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public int getHttpErrorCode() &#123;</span><br><span class="line">            return 500;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class ForbiddenException extends OAuth2Exception &#123;</span><br><span class="line">        public ForbiddenException(String msg, Throwable t) &#123;</span><br><span class="line">            super(msg, t);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String getOAuth2ErrorCode() &#123;</span><br><span class="line">            return &quot;access_denied&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public int getHttpErrorCode() &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可能需要配置一些请求客户端的配置，以及变量配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class BeansConfig &#123;</span><br><span class="line">@Resource</span><br><span class="line">private Environment env;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">SimpleClientHttpRequestFactory requestFactory &#x3D; new SimpleClientHttpRequestFactory();</span><br><span class="line">requestFactory.setReadTimeout(env.getProperty(&quot;client.http.request.readTimeout&quot;, Integer.class, 15000));</span><br><span class="line">requestFactory.setConnectTimeout(env.getProperty(&quot;client.http.request.connectTimeout&quot;, Integer.class, 3000));</span><br><span class="line">RestTemplate rt &#x3D; new RestTemplate(requestFactory);</span><br><span class="line">return rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 配置信息</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">public class EnvConfig &#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;jdbc.driverClassName:&#125;&quot;)</span><br><span class="line">    private String jdbc_driverClassName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.url:&#125;&quot;)</span><br><span class="line">    private String jdbc_url;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.username:&#125;&quot;)</span><br><span class="line">    private String jdbc_username;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;jdbc.password:&#125;&quot;)</span><br><span class="line">    private String jdbc_password;</span><br><span class="line"></span><br><span class="line">public String getJdbc_driverClassName() &#123;</span><br><span class="line">return jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_driverClassName(String jdbc_driverClassName) &#123;</span><br><span class="line">this.jdbc_driverClassName &#x3D; jdbc_driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_url() &#123;</span><br><span class="line">return jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_url(String jdbc_url) &#123;</span><br><span class="line">this.jdbc_url &#x3D; jdbc_url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_username() &#123;</span><br><span class="line">return jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_username(String jdbc_username) &#123;</span><br><span class="line">this.jdbc_username &#x3D; jdbc_username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getJdbc_password() &#123;</span><br><span class="line">return jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setJdbc_password(String jdbc_password) &#123;</span><br><span class="line">this.jdbc_password &#x3D; jdbc_password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后需要配置一些环境配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: oauth-cas</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        refreshable-dataids: actuator.properties,log.properties</span><br><span class="line"></span><br><span class="line">  redis: #redis相关配置</span><br><span class="line">    database: 8</span><br><span class="line">    host: 127.0.0.1 #localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password: aaa #有密码时设置</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 10000ms</span><br></pre></td></tr></table></figure><p>记住：上面这个启动配置需要在 bootstrap 文件中添加，否则，可能会失败，大家可以尝试下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 2000</span><br><span class="line">  undertow:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    accesslog:</span><br><span class="line">      enabled: false</span><br><span class="line">      pattern: combined</span><br><span class="line">  #这里我们使用了SpringBoot2.x，注意session与1.x不同</span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      timeout: PT120M</span><br><span class="line">      cookie:</span><br><span class="line">        name: OAUTH-CAS-SESSIONID #防止Cookie冲突，冲突会导致登录验证不通过</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client:</span><br><span class="line">  http:</span><br><span class="line">    request:</span><br><span class="line">      connectTimeout: 8000</span><br><span class="line">      readTimeout: 30000</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper&#x2F;*.xml</span><br><span class="line">  typeAliasesPackage: com.damon.*.model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>最后，我们添加启动类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class CasApp &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(CasApp.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，一个认证中心的代码实战逻辑就完成了。</p><p>接下来，我们看一个客户端如何去认证，首先还是依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在客户端，我们也需要配置一个资源配置与权限配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line">import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableResourceServer</span><br><span class="line">public class ResourceServerConfig extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line"></span><br><span class="line">                .exceptionHandling()</span><br><span class="line">        .authenticationEntryPoint(new AuthenticationEntryPointHandle())</span><br><span class="line">        &#x2F;&#x2F;.authenticationEntryPoint((request, response, authException) -&gt; response.sendError(HttpServletResponse.SC_UNAUTHORIZED))</span><br><span class="line">        .and()</span><br><span class="line"></span><br><span class="line">                .requestMatchers().antMatchers(&quot;&#x2F;api&#x2F;**&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;api&#x2F;**&quot;).authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，权限拦截可能就相对简单了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.damon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> *</span><br><span class="line"> * 在接口上配置权限时使用</span><br><span class="line"> * @author Damon</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)</span><br><span class="line">@Order(101)</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，这里也需要一个统一结果处理类，这里就不展示了。</p><p>接下来，我们主要看配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cas-server-url: http:&#x2F;&#x2F;oauth-cas #http:&#x2F;&#x2F;localhost:2000#设置可以访问的地址</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  oauth2: #与cas对应的配置</span><br><span class="line">    client:</span><br><span class="line">      client-id: provider-service</span><br><span class="line">      client-secret: provider-service-123</span><br><span class="line">      user-authorization-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;authorize #是授权码认证方式需要的</span><br><span class="line">      access-token-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;token #是密码模式需要用到的获取 token 的接口</span><br><span class="line">    resource:</span><br><span class="line">      loadBalanced: true</span><br><span class="line">      #jwt: #jwt存储token时开启</span><br><span class="line">        #key-uri: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;token_key</span><br><span class="line">        #key-value: test_jwt_sign_key</span><br><span class="line">      id: provider-service</span><br><span class="line">      #指定用户信息地址</span><br><span class="line">      user-info-uri: $&#123;cas-server-url&#125;&#x2F;api&#x2F;user #指定user info的URI，原生地址后缀为&#x2F;auth&#x2F;user</span><br><span class="line">      prefer-token-info: false</span><br><span class="line">      #token-info-uri:</span><br><span class="line">    authorization:</span><br><span class="line">      check-token-access: $&#123;cas-server-url&#125;&#x2F;oauth&#x2F;check_token #当此web服务端接收到来自UI客户端的请求后，需要拿着请求中的 token 到认证服务端做 token 验证，就是请求的这个接口</span><br></pre></td></tr></table></figure><p>在上面的配置里，我们看到了各种注释了，讲得很仔细，但是我要强调下：<strong>为了高可用，我们的认证中心可能多个，所以需要域名来作 LB。同时，开启了 loadBalanced=true。最后，如果是授权码认证模式，则需要 “user-authorization-uri”，如果是密码模式，需要 “access-token-uri” 来获取 token。我们通过它 “user-info-uri” 来获取认证中心的用户信息，从而判断该用户的权限，从而访问相应的资源。另外，上面的配置需要在 bootstrap 文件中，否则可能失败，大家可以试试。</strong></p><p>接下来，我们添加一般配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 2001</span><br><span class="line">  undertow:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">    accesslog:</span><br><span class="line">      enabled: false</span><br><span class="line">      pattern: combined</span><br><span class="line">  servlet:</span><br><span class="line">    session:</span><br><span class="line">      timeout: PT120M</span><br><span class="line">      cookie:</span><br><span class="line">        name: PROVIDER-SERVICE-SESSIONID #防止Cookie冲突，冲突会导致登录验证不通过</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backend:</span><br><span class="line">  ribbon:</span><br><span class="line">    client:</span><br><span class="line">      enabled: true</span><br><span class="line">    ServerListRefreshInterval: 5000</span><br><span class="line"></span><br><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 3000</span><br><span class="line">  # 设置全局默认的ribbon的读超时</span><br><span class="line">  ReadTimeout: 1000</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true</span><br><span class="line">    clients: oauth-cas,consumer-service</span><br><span class="line">  MaxAutoRetries: 1 #对第一次请求的服务的重试次数</span><br><span class="line">  MaxAutoRetriesNextServer: 1 #要重试的下一个服务的最大数量（不包括第一个服务）</span><br><span class="line">  #listOfServers: localhost:5556,localhost:5557</span><br><span class="line">  #ServerListRefreshInterval: 2000</span><br><span class="line">  OkToRetryOnAllOperations: true</span><br><span class="line">  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hystrix.command.BackendCall.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line">hystrix.threadpool.BackendCallThread.coreSize: 5</span><br></pre></td></tr></table></figure><p>这里，我们使用了 Ribbon 来做 LB，hystrix 来作熔断，最后需要注意的是：<strong>加上了 cookie name，防止 Cookie 冲突，冲突会导致登录验证不通过。</strong></p><p>配置启动类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &#123;&quot;com.damon&quot;&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableOAuth2Sso</span><br><span class="line">public class ProviderApp &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ProviderApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在上面配置了所有带有 “/api/**“ 的路径请求，都会加以拦截，根据用户的信息来判断其是否有权限访问。</p><p>写一个简单的测试类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger logger &#x3D; LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private UserService userService;</span><br><span class="line"></span><br><span class="line">  @PreAuthorize(&quot;hasAuthority(&#39;admin&#39;)&quot;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;auth&#x2F;admin&quot;)</span><br><span class="line">    public Object adminAuth() &#123;</span><br><span class="line">    logger.info(&quot;test password mode&quot;);</span><br><span class="line">        return &quot;Has admin auth!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码表示：如果用户具有 “admin” 的权限，则能够访问该接口，否则会被拒绝。</p><p>本文用的是 alibaba 的组件来作 LB，具体可以看前面的文章，用域名来找到服务。同时也加上了网关 Gateway。</p><p>最后，我们先来通过密码模式来进行认证吧:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST -d &quot;username&#x3D;admin&amp;password&#x3D;123456&amp;grant_type&#x3D;password&amp;client_id&#x3D;provider-service&amp;client_secret&#x3D;provider-service-123&quot; http:&#x2F;&#x2F;localhost:5555&#x2F;oauth-cas&#x2F;oauth&#x2F;token</span><br></pre></td></tr></table></figure><p>认证成功后，会返回如下结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;access_token&quot;:&quot;d2066f68-665b-4038-9dbe-5dd1035e75a0&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;refresh_token&quot;:&quot;44009836-731c-4e6a-9cc3-274ce3af8c6b&quot;,&quot;expires_in&quot;:3599,&quot;scope&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们通过 token 来访问接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H &quot;Accept: application&#x2F;json&quot; -H &quot;Authorization:bearer d2066f68-665b-4038-9dbe-5dd1035e75a0&quot; -X GET http:&#x2F;&#x2F;localhost:5555&#x2F;provider-service&#x2F;api&#x2F;user&#x2F;auth&#x2F;admin</span><br></pre></td></tr></table></figure><p>成功会返回结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Has admin auth!</span><br></pre></td></tr></table></figure><p>token 如果失效，会返回:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;:&quot;invalid_token&quot;,&quot;error_description&quot;:&quot;d2066f68-665b-4038-9dbe-5dd1035e75a01&quot;&#125;</span><br></pre></td></tr></table></figure><br><br><br><h2 id="3、GitHub-的授权应用案例"><a href="#3、GitHub-的授权应用案例" class="headerlink" title="3、GitHub 的授权应用案例"></a>3、GitHub 的授权应用案例</h2><br><br><p>如果你的应用想要接入 GitHub，则可以通过如下办法来实现。</p><p>首先注册一个 GitHub 账号，登陆后，找到设置，打开页面，最下面有一个开发者设置：</p><p><img src="https://imgkr.cn-bj.ufileos.com/cad014e3-6542-4b6c-8fde-9268819bb38e.png" alt=""></p><p>找到后，点击，可以看到三个，可以选择第二个方式来接入：</p><p><img src="https://imgkr.cn-bj.ufileos.com/5c0a7b00-6980-4596-89c2-07fea678ca5b.png" alt=""></p><p>可以新增你的应用 app，新建时，应用名、回调地址必填项：</p><p><img src="https://imgkr.cn-bj.ufileos.com/03769bc7-d9b8-4350-a07a-16fb42a49af2.png" alt=""></p><p>最后，完成后会生成一个 Client ID、Client Secret。</p><p>然后利用 Github 官方给的文档来进行认证、接入，授权逻辑：</p><p>1.在注册完信息后生成了 Client ID、Client Secret，首先，用户点击 github 登录本地应用引导用户跳转到第三方授权页跳转地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;authorize?client_id&#x3D;&#123;client_id&#125;&amp;redirect_uri&#x3D;&#123;redirect_uri&#125;&amp;state&#x3D;&#123;state&#125;</span><br></pre></td></tr></table></figure><p>其中，client_id，client_secret 是注册好 Oauth APP 后 github 提供的，需要写在本地代码或者配置文件中，state 也是在本地生成的。redirect_uri 就是在 GitHub 官网填的 Authorization callback URL。此时带着 state 等参数去申请授权，但此时尚未登陆，未能通过 authorize，GitHub 返回 code 参数。</p><p>2.授权成功后会重定向带参数访问上面的 redirect_uri，并多了一个 code 参数<br>后台接收 code 这个参数,我们带着这个 code 再次访问 github 地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;access_token?client_id&#x3D;xxx&amp;client_secret&#x3D;xxx&amp;code&#x3D;xxx&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;localhost:3001&#x2F;authCallback</span><br></pre></td></tr></table></figure><p>注意：上面的 redirect_uri 要与之前在新建 app 时填写的保持一直，否则会报错。</p><p>3.通过 state 参数和 code 参数，成功获取 access_token<br>有了 access_token，只需要把 access_token 参数放在 URL 后面即可，就可以换取用户信息了。访问地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.github.com&#x2F;user?access_token&#x3D;xxx</span><br></pre></td></tr></table></figure><p>4.得到 GitHub 授权用户的个人信息，就表明授权成功。</p><br><br><br><h2 id="4、微服务安全架构设计"><a href="#4、微服务安全架构设计" class="headerlink" title="4、微服务安全架构设计"></a>4、微服务安全架构设计</h2><br><br><p>在微服务中，安全性是一个很重要的问题。我们经常比较多的场景是：服务 A 需要调用服务 B，但是问题来了，到底是走外网调用呢？还是走局域网调用呢？这当然看 A、B 是否在同一个网段，如果在同一个局域网段，那肯定走局域网好。为什么呢？因为局域网快呀，如果说还有理由吗？当然有：除了网络快，降低网络开销，还可以保证安全性，不至于被黑客黑掉。这是安全的一个保证。</p><p>那么除了上面说的安全性，还有其他的吗？比如：在一个局域网下，有 N 个微服务模块，但是这些微服务并不想完全直接暴露给外部，这时候，就需要一个网关 Gateway 来处理。网关把所有的服务给路由了，就像在所有的服务上面一层，加了一个保护光环，突出<strong>高内聚</strong>的含义。同时还可以加上一些拦截，安全的拦截，鉴权、认证等。存在通过 token 的鉴权，也可以通过 jwt 的，等等。有时候，可以借助 redis 通过 session 共享。也可以通过 OAuth2 的鉴权模式来实现安全拦截。</p><p>最后安全性的考虑是在每个服务的接口设计上，比如：<strong>幂等</strong>的存在，让很多恶意攻击成为无用之功。更多的介绍可以看下面:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;G3yhwvLVTu_T5uPxgZD00w</span><br></pre></td></tr></table></figure><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://imgkr.cn-bj.ufileos.com/97e4eed2-a992-4976-acf0-ccb6fb34d308.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #282c34; border-radius: 5px;">https://gitee.com/damon_one/spring-cloud-k8shttps://gitee.com/damon_one/spring-cloud-oauth2</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、-回顾微服务设计理念&quot;&gt;&lt;a href=&quot;#1、-回顾微服务设计理念&quot; class=&quot;headerlink&quot; title=&quot;1、 回顾微服务设计理念&quot;&gt;&lt;/a&gt;1、 回顾微服务设计理念&lt;/h2&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;在前面的一篇文章 &lt;a href=&quot;h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅谈负载均衡</title>
    <link href="http://www.damon8.cn/2020/07/10/springcloud-01/"/>
    <id>http://www.damon8.cn/2020/07/10/springcloud-01/</id>
    <published>2020-07-10T05:47:15.000Z</published>
    <updated>2020-07-14T01:54:08.381Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/title_img/1.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"><p>1、 前言</p><p>负载均衡，英文：Load Balance，其含义是请求分发到多个粒度单元上进行执行操作，例如各种服务器、应用服务、中台服务、数据服务等，从而达到共同完成某项任务的目的。为了拓宽网络设备和服务器的带宽、增加吞吐量、加强网络请求处理能力、提高网络的灵活性和高可用性，负载均衡是一种廉价、有效、透明的方法，它为服务的高并发做了一次缓冲，让单个服务的压力瞬间减少，实现了服务的高可用，避免服务因为压力而面临宕机的危险。</p><p>2、负载均衡</p><p>2.1 基于网络的负载均衡<br>大家都知道，OSI 模型有 7 层结构，每层都可以有几个子层。OSI 的 7 层从上到下分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层：</p><p>在这七层结构中，高层次都是依赖于低层次的。层次越高，使用起来越方便。</p><p>根据负载均衡技术实现在 OSI 七层模型的不同层次，是可以给负载均衡分类的。</p><p>常见的实现方式中，主要可以在应用层、传输层、网络层和数据传输层做文章。所以，工作在应用层的负载均衡，我们通常称之为七层负载均衡、工作在传输层的我们称之为四层负载均衡。我们一个个来看看：</p><p>七层负载均衡</p><p>七层负载均衡工作在 OSI 模型的应用层，应用层协议较多，常用 http、dns、ftp 等。七层负载就可以基于这些协议来负载。这些应用层协议中会包含很多有意义的内容。比如同一个 Web 服务器的负载均衡，除了根据 IP 加 port 进行负载外，还可根据 URL 来决定是否要进行负载均衡。</p><p>四层负载均衡</p><p>四层负载均衡工作在 OSI 模型的传输层，由于在传输层，只有 TCP/UDP 协议，这两种协议中除了包含源 IP、目标 IP 以外，还包含源端口及目的端口。四层负载均衡服务器在接受到客户端请求后，以后通过修改数据包的地址信息（IP+端口号）将流量转发到应用服务器。</p><p>2.2 负载均衡工具<br>负载均衡的工具，常见的有 Nginx、k8s、Ribbon、Feign、HAProxy 等。</p><p>Nginx</p><p>Nginx 主要用来作七层负载均衡，反向代理 http、https 的协议链接，同时也提供了 IMAP/POP3/SMTP 的服务。</p><p>upstream proxy_demo_aaa {<br>  server  weight=5;<br>  server  weight=6;<br>}</p><p>location ~ ^/demo-aaa/api(.*)$ {<br>  proxy_pass <a href="http://proxy_demo_aaa/api$1$is_args$args" target="_blank" rel="noopener">http://proxy_demo_aaa/api$1$is_args$args</a>;<br>}<br>k8s</p><p>k8s 的负载均衡是基于 kube-proxy，其服务发现基于 kube-dns，最后由于每个 Service 对应的 pod 可以是多个，所以可以基于 kube-proxy 实现负载均衡，kube-proxy 进程其实就是一个智能的软件负载均衡器，他负责把 service 的请求转发到后端的某个 pod 实例。</p><p>Ribbon</p><p>Ribbon 是一个为客户端提供负载均衡功能的服务，它内部提供了一个叫做 ILoadBalance 的接口代表负载均衡器的操作，比如有添加服务器、选择服务器、获取所有的服务器列表、获取可用的服务器列表等等。</p><p>常见的，使用 RestTemplate 进行服务提供者、服务消费者之间的通信，只需为 RestTemplate 配置类添加@LoadBalanced 注解即可。</p><p>@Bean<br>@LoadBalanced<br>  public RestTemplate restTemplate() {<br>  return new RestTemplate();<br>}<br>Feign</p><p>Feign 是一个声明式负载均衡客户端使用 Feign 能让编写 WebService 的客户端更加简单，它的使用方法是定义一个接口，然后在上面添加注解，同时也支持 JAX-RS 标准的注解。Feign 也支持可拔插式的编码器和解码器。</p><p>@FeignClient(name = “provider-service”, configuration = {Feign4HttpConfiguration.class, FeignLogConfiguration.class}, fallback = CustomerClientImpl.class)<br>public interface CustomerClient {</p><pre><code>@PostMapping(&quot;/save&quot;)String save();@GetMapping(&quot;/api/user/getUserInfo&quot;)Response&lt;Object&gt; getUserInfo();</code></pre><p>}<br>HAProxy</p><p>HAProxy 是一个使用 C 语言编写的自由、开放源代码软件，其提供高可用性、负载均衡，以及基于 TCP 和 HTTP 的应用程序代理的功能。</p><p>2.3 负载均衡算法</p><p>常见的几种负载均衡的算法有：随机、轮询、最少链接、Hash、加权、重试等。</p><p>随机：即请求随机分配到各台服务器上，这是默认的策略机制。</p><p>轮询：将所有请求，依次分发到每台服务器上，适合服务器硬件相同的场景，服务请求数相同。</p><p>最少链接：将本次请求分配到请求数最少的服务上，这种可以根据服务器当前的请求处理情况，动态分配。</p><p>Hash：根据 IP 地址进行 Hash 计算，得到 IP 地址，这种可以将来自同一 IP 地址的请求，同一会话期内，转发到同一服务器；实现会话粘滞。但目标服务器宕机后，会话也会随之丢失。</p><p>加权：在上面几种算法基础上，进行一定的加权比例分配。</p><p>重试：这种策略一般都会有，就是在调用失败后，进行二次重试机制。</p><p>当然，还有其他的动态的算法规则：最快模式、观察模式、动态性能分配等。</p><br><br><p><span class="suffix" style="display: none;"></span></h6></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">结束福利</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">开源实战利用 k8s 作微服务的架构设计代码:</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px;"><code class="hljs" style="overflow-x: auto; padding: 16px; color: #abb2bf; background: #282c34; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; border-radius: 0px; font-size: 12px; -webkit-overflow-scrolling: touch;">https://gitee.com/damon_one/spring-cloud-k8s</code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎大家 star，多多指教。</p><br data-tool="mdnice编辑器"><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">关于作者</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">  <em style="font-style: italic; color: black;">笔名：Damon，技术爱好者，长期从事 Java 开发、Spring Cloud 的微服务架构设计，以及结合 docker、k8s 做微服务容器化，自动化部署等一站式项目部署、落地。Go 语言学习，k8s 研究，边缘计算框架 KubeEdge 等。公众号 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">程序猿Damon</code> 发起人。个人微信 <code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96);">MrNull008</code>，欢迎來撩。</em></p><br data-tool="mdnice编辑器"><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://www.infoq.cn/profile/1905020/following/user" title="InfoQ">InfoQ</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">欢迎关注：<a class="nav-item-link" target="_blank" href="https://cloud.tencent.com/developer/column/invite/533b1afb" title="">腾讯自媒体专栏</a></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; color: black; font-size: 22px;"><span class="prefix" style="display: none;"></span><span class="content">欢迎关注</span><span class="suffix"></span></h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC80LzIwLzE3MTk1OTEwODYzNTIyMmI?x-oss-process=image/format,png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/title_img/1.jpg&quot; alt style=&quot;display: block; margin: 0 auto; max-width: 100%;&quot;&gt;

&lt;p&gt;1、 前言&lt;/p&gt;
&lt;p&gt;负载均衡，英文：Load Balance，其含义是请
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
